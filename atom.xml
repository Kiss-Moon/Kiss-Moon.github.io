<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.liangmeng.xyz</id>
    <title>Hello Coder</title>
    <subtitle>No Error No Warning</subtitle>
    <icon>http://www.liangmeng.xyz/images/favicon.ico</icon>
    <link href="http://www.liangmeng.xyz" />
    <author>
      <name>MAC、凉梦</name>
    </author>
    <updated>2022-04-13T14:00:00.000Z</updated>
    <category term="越努力" />
    <category term=" 越幸运" />
    <entry>
        <id>http://www.liangmeng.xyz/WrittenExamination/Honor_20220412/</id>
        <title>荣耀笔试题</title>
        <link rel="alternate" href="http://www.liangmeng.xyz/WrittenExamination/Honor_20220412/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;笔试一共三道编程题，分数依次为100、200、300，需要按顺序依次完成，只有做完这一道题，才能进入下一道题，无法跳题，使用的是牛客网，允许跳出界面使用自己的IDE。&lt;/p&gt;
&lt;h2 id=&#34;题目一：字符串分割&#34;&gt;&lt;a href=&#34;#题目一：字符串分割&#34; class=&#34;headerlink&#34; title=&#34;题目一：字符串分割&#34;&gt;&lt;/a&gt;题目一：字符串分割&lt;/h2&gt;&lt;p&gt;给定一系列的字符串，字符串的个数为N，每个字符串的长度不超过100。长度小于8的字符串用零补足，长度大于等于8的字符串，按8位位一组的形式不断分割，最后剩余部分用零补足。&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;第一行包括一个整数N和N个原始字符串。&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;第一行包括分割后的字符串按字典序从小到大排列。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;/p&gt;
&lt;p&gt;2 abc 123456789&lt;/p&gt;
&lt;p&gt;输出示例：&lt;/p&gt;
&lt;p&gt;12345678 90000000 abc00000&lt;/p&gt;
&lt;h3 id=&#34;思路：&#34;&gt;&lt;a href=&#34;#思路：&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;p&gt;这一题比较简单，只需要按照题目的描述做即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;inp = input().split()
n = int(inp[0])
ls = []
for i in range(1, n+1):
    string = inp[i]
    while len(string) &amp;gt; 8:
        ls.append(string[:8])
        string = string[8:]
    ls.append(string + &amp;quot;0&amp;quot;*(8-len(string)))
ls.sort()
print(&amp;quot; &amp;quot;.join(ls))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;题目二：蜜蜂采蜜&#34;&gt;&lt;a href=&#34;#题目二：蜜蜂采蜜&#34; class=&#34;headerlink&#34; title=&#34;题目二：蜜蜂采蜜&#34;&gt;&lt;/a&gt;题目二：蜜蜂采蜜&lt;/h2&gt;&lt;p&gt;平原上，一群蜜蜂离开蜂巢采蜜，要连续采集5片花丛后归巢。&lt;br&gt;已知5片花丛相对蜂巢的坐标，请你帮它们规划一下到访花丛的顺序，以使飞行总距离最短。&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;以蜂巢为平面坐标原点的5片花丛A、B、C、D、E的坐标，坐标值为整数。&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;从出发到返回蜂巢最短路径的长度取整值，取整办法为舍弃小数点后面的值。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;/p&gt;
&lt;p&gt;200 0 200 10 200 50 200 30 200 25&lt;/p&gt;
&lt;p&gt;输出示例：&lt;/p&gt;
&lt;p&gt;456&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;样例中的10个数，相邻两个分别为一组，表示一个花丛相对蜂巢的坐标：A(x1, y1)、B(x2, y2)、C(x3, y3)、D(x4, y4)、E(x5, y5)，分表代表x1,y1,x2,y2,x3,y3,x4,y4,x5,y5。&lt;/p&gt;
&lt;h3 id=&#34;说明：&#34;&gt;&lt;a href=&#34;#说明：&#34; class=&#34;headerlink&#34; title=&#34;说明：&#34;&gt;&lt;/a&gt;说明：&lt;/h3&gt;&lt;p&gt;本题实际上是一道旅行商问题（TSP），经典的TSP可以描述为：一个商品推销员要去若干个城市推销商品，该推销员从一个城市出发，需要经过所有城市后，回到出发地。应如何选择行进路线，以使总的行程最短。从图论的角度来看，该问题实质是在一个带权完全无向图中，找一个权值最小的Hamilton回路。由于该问题的可行解是所有顶点的全排列，随着顶点数的增加，会产生组合爆炸，它是一个NP完全问题。&lt;/p&gt;
&lt;p&gt;常见的解法有暴力破解、深度优先遍历，动态规划等。&lt;/p&gt;
&lt;p&gt;高级的解法有模拟退火算法，遗传算法，粒子群算法、神经网络等&lt;/p&gt;
&lt;h3 id=&#34;思路一：&#34;&gt;&lt;a href=&#34;#思路一：&#34; class=&#34;headerlink&#34; title=&#34;思路一：&#34;&gt;&lt;/a&gt;思路一：&lt;/h3&gt;&lt;p&gt;暴力破解，求出五片花丛所有可能的到访顺序（全排列），取飞行总距离最短的路径即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from math import sqrt, floor
from xmlrpc.client import MAXINT
inp = list(map(int, input().split()))
mincost = MAXINT
ls = [(inp[i*2], inp[i*2+1]) for i in range(5)]
matrix = [[0 for i in range(5)] for j in range(5)]
for i in range(5):
    for j in range(5):
        matrix[i][j] = sqrt((ls[i][0]-ls[j][0])**2 + (ls[i][1]-ls[j][1])**2)

def Perm(nums, begin, end):
    global mincost, ls, matrix, path
    if begin &amp;gt;= end:
        cost = 0
        for i in range(4):
            cost += matrix[nums[i]][nums[i+1]]
        cost = cost + sqrt((ls[nums[0]][0]**2) + (ls[nums[0]][1]**2)) + sqrt((ls[nums[-1]][0]**2) + (ls[nums[-1]][1]**2))
        if cost &amp;lt; mincost:
            path = nums
            mincost = cost
        return
    else:
        for num in range(begin, end):
            nums[begin], nums[num] = nums[num], nums[begin]
            Perm(nums, begin+1, end)
            nums[begin], nums[num] = nums[num], nums[begin]

nums = [i for i in range(5)]
Perm(nums, 0, len(nums))
print(floor(mincost))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;思路二：&#34;&gt;&lt;a href=&#34;#思路二：&#34; class=&#34;headerlink&#34; title=&#34;思路二：&#34;&gt;&lt;/a&gt;思路二：&lt;/h3&gt;&lt;p&gt;采用深度优先遍历来寻找最短路径，并在遍历过程中通过不断剪枝来简化求解过程，广义上来讲也是全排列的一种。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from math import sqrt, floor
from xmlrpc.client import MAXINT

def DFS(u, cnt, cost):
    global mincost, matrix, visited
    if cost &amp;gt; mincost:
        return
    if cnt == 6:
        cost = cost + sqrt((ls[u][0]**2) + (ls[u][1]**2)) + sqrt((ls[0][0]**2) + (ls[0][1]**2))
        if cost &amp;lt; mincost:
            mincost = cost
    visited[u] = 1
    for v in range(6):
        if not visited[v]:
            DFS(v, cnt+1, cost + matrix[u][v])
    visited[u] = 0

inp = list(map(int, input().split()))
mincost = MAXINT
visited = [0 for i in range(6)]
ls = [(inp[i*2], inp[i*2+1]) for i in range(5)]
ls.insert(0, (0, 0))
matrix = [[0 for i in range(6)] for j in range(6)]
for i in range(6):
    for j in range(6):
        matrix[i][j] = sqrt((ls[i][0]-ls[j][0])**2 + (ls[i][1]-ls[j][1])**2)

DFS(0, 1, 0)
print(floor(mincost))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;惨痛经历&#34;&gt;&lt;a href=&#34;#惨痛经历&#34; class=&#34;headerlink&#34; title=&#34;惨痛经历&#34;&gt;&lt;/a&gt;惨痛经历&lt;/h2&gt;&lt;p&gt;因为邮件上写着系统开放时间为18:00-21:00（不同于美团写着笔试时间为16:00-18:00），所以我习惯性得以为笔试时间为三个小时，当我悠哉游哉地把第二题做完返回系统时，笔试已经结束了，因此只提交了第一题，直接人麻了。。。所以，各位小伙伴无论是在比赛还是在测试，一定先看好时间！！！当然，对于秒AK的大佬来说，时间根本不是事，那就当我没说。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/WrittenExamination/Honor_20220412/Honor_20220412/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
</content>
        <category term="WrittenExamination" scheme="http://www.liangmeng.xyz/categories/WrittenExamination/" />
        <category term="Honor_20220412" scheme="http://www.liangmeng.xyz/categories/WrittenExamination/Honor-20220412/" />
        <category term="牛客网" scheme="http://www.liangmeng.xyz/tags/%E7%89%9B%E5%AE%A2%E7%BD%91/" />
        <category term="荣耀" scheme="http://www.liangmeng.xyz/tags/%E8%8D%A3%E8%80%80/" />
        <category term="笔试题" scheme="http://www.liangmeng.xyz/tags/%E7%AC%94%E8%AF%95%E9%A2%98/" />
        <updated>2022-04-13T14:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://www.liangmeng.xyz/WrittenExamination/MeiTuan_20220409/</id>
        <title>美团笔试题</title>
        <link rel="alternate" href="http://www.liangmeng.xyz/WrittenExamination/MeiTuan_20220409/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;笔试一共五道编程题（四+一），一为专项编程题，估计不同岗位有题目不一样，使用的是赛码网，允许跳出界面使用自己的IDE。&lt;/p&gt;
&lt;p&gt;在此感谢&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlYm9ydHQ/dHlwZT1ibG9n&#34;&gt;筱羊冰冰&lt;/span&gt;提供的部分题目及题解。&lt;/p&gt;
&lt;h2 id=&#34;题目一：数圈游戏&#34;&gt;&lt;a href=&#34;#题目一：数圈游戏&#34; class=&#34;headerlink&#34; title=&#34;题目一：数圈游戏&#34;&gt;&lt;/a&gt;题目一：数圈游戏&lt;/h2&gt;&lt;p&gt;给定一个整数n，计算该整数含有的圆圈个数。数字0-9对应的圈数如下：&lt;br&gt;0: 1&lt;br&gt;1: 0&lt;br&gt;2: 0&lt;br&gt;3: 0&lt;br&gt;4: 0&lt;br&gt;5: 0&lt;br&gt;6: 1&lt;br&gt;7: 0&lt;br&gt;8: 2&lt;br&gt;9: 1&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行为一个整数n，表示数圈游戏的数字。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;60498&lt;br&gt;输出示例：&lt;br&gt;5&lt;/p&gt;
&lt;p&gt;限制：&lt;br&gt;80%的测试用例：n&amp;lt;&amp;#x3D;10000&lt;br&gt;100%的测试用例：n&amp;lt;&amp;#x3D;100000000&lt;/p&gt;
&lt;h3 id=&#34;思路：&#34;&gt;&lt;a href=&#34;#思路：&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;p&gt;该题较为简单，一次遍历累加即可。&lt;/p&gt;
&lt;h2 id=&#34;题目二：士兵排队&#34;&gt;&lt;a href=&#34;#题目二：士兵排队&#34; class=&#34;headerlink&#34; title=&#34;题目二：士兵排队&#34;&gt;&lt;/a&gt;题目二：士兵排队&lt;/h2&gt;&lt;p&gt;给定一定数量的士兵，将士兵按照身高从小到大排列，身高相同者按照姓名的字典序从小到大排列。&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行为一个整数n，表示士兵的数量。&lt;br&gt;第二行为n个士兵的身高，单位为cm。&lt;br&gt;第三行为n个士兵的姓名。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;4&lt;br&gt;176 170 176 176&lt;br&gt;bamma tom alpha beta&lt;/p&gt;
&lt;p&gt;输出示例：&lt;br&gt;tom alpha bamma beta&lt;/p&gt;
&lt;p&gt;限制：&lt;br&gt;士兵身高 hi &amp;lt;&amp;#x3D; 300&lt;br&gt;士兵姓名长度 ni &amp;lt;&amp;#x3D; 20&lt;/p&gt;
&lt;h3 id=&#34;思路一：&#34;&gt;&lt;a href=&#34;#思路一：&#34; class=&#34;headerlink&#34; title=&#34;思路一：&#34;&gt;&lt;/a&gt;思路一：&lt;/h3&gt;&lt;p&gt;将每一个人的身高和名字按照 (身高，名字) 的格式存储，然后进行两次排序，先按照身高排序，再按照名字排序即可。（利用了python排序算法的稳定性！）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n = int(input())
heights = list(map(str, input().split()))
names = list(map(str, input().split()))
ls = []
for i in range(n):
    ls.append((heights[i], names[i]))
# lambda函数指定排序规则
ls.sort(key=lambda x:x[1])
ls.sort(key=lambda x:x[0])
for i in range(n):
    print(ls[i][1], end=&amp;#39; &amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;思路二：&#34;&gt;&lt;a href=&#34;#思路二：&#34; class=&#34;headerlink&#34; title=&#34;思路二：&#34;&gt;&lt;/a&gt;思路二：&lt;/h3&gt;&lt;p&gt;因为身高的限制为 hi &amp;lt;&amp;#x3D; 300，所以身高最高只能为三位数，那么我们可以把所有身高都通过补前置零的方式化为三位数，然后再与名字拼接成一个字符串，这样只需要一次排序就能够得出结果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n = int(input())
heights = list(map(str, input().split()))
names = list(map(str, input().split()))
for i in range(n):
    # str.zfill()自动填充
    heights[i] = heights[i].zfill(3) + names[i]
heights.sort()
for i in range(n):
    print(heights[i][3:], end=&amp;#39; &amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;题目三：路径搜索&#34;&gt;&lt;a href=&#34;#题目三：路径搜索&#34; class=&#34;headerlink&#34; title=&#34;题目三：路径搜索&#34;&gt;&lt;/a&gt;题目三：路径搜索&lt;/h2&gt;&lt;p&gt;给定一个地图，询问是否存在一条从起点到终点的直接通路。注意，通路是双向的。&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行包括两个整数n和m，分别表示地图上点的数量和通路的数量。&lt;br&gt;第二行包括m个整数，表示地图上通路的一端。&lt;br&gt;第三行包括m个整数，表示地图上通路的另一端。&lt;br&gt;第四行包括k个整数，表示询问的次数。&lt;br&gt;接下来的k行每行包括两个整数，分别表示起点和终点。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;4 5&lt;br&gt;1 2 1 3 1&lt;br&gt;2 3 3 4 4&lt;br&gt;4&lt;br&gt;1 3&lt;br&gt;2 4&lt;br&gt;2 1&lt;br&gt;3 2&lt;/p&gt;
&lt;p&gt;输出示例：&lt;br&gt;Yes&lt;br&gt;No&lt;br&gt;Yes&lt;br&gt;Yes&lt;/p&gt;
&lt;h3 id=&#34;思路：-1&#34;&gt;&lt;a href=&#34;#思路：-1&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;p&gt;筱羊冰冰：上来就看错了，然后花了好久写了类似并查集的东西，然后用不上……&lt;br&gt;（果然大佬就是不一样，上来直接手撕并查集）&lt;br&gt;这道题只需要检查有无指定通路就行了，不过要特别注意查询范围，因为通路是双向的而且要求的是直接通路。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n, m = map(int, input().split())
lsu = list(map(int, input().split()))
lsv = list(map(int, input().split()))
k = int(input())
ways = set((lsu[i], lsv[i]) for i in range(m))
out = []
for _ in range(k):
    u, v = map(int, input().split())
    if (u, v) in ways or (v, u) in ways:
        out.append(&amp;#39;Yes&amp;#39;)
    else:
        out.append(&amp;#39;No&amp;#39;)
print(&amp;#39;\n&amp;#39;.join(out))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;井字棋&#34;&gt;&lt;a href=&#34;#井字棋&#34; class=&#34;headerlink&#34; title=&#34;井字棋&#34;&gt;&lt;/a&gt;井字棋&lt;/h2&gt;&lt;p&gt;给定一个2x2的棋盘和n中不同的颜色，要求每行每列均不能出现相同的颜色，计算总共有多少种填充方案。&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行包括一个整数n，表示颜色的数量。&lt;/p&gt;
&lt;p&gt;输出：&lt;br&gt;输出一个整数，表示有多少种填充方案。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;2&lt;/p&gt;
&lt;p&gt;输出示例：&lt;br&gt;2&lt;/p&gt;
&lt;p&gt;限制：&lt;br&gt;颜色的种类n &amp;lt;&amp;#x3D; 10&lt;/p&gt;
&lt;h3 id=&#34;思路：-2&#34;&gt;&lt;a href=&#34;#思路：-2&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;p&gt;筱羊冰冰：有一说一，感觉就属这个题有意思吧。我当时看完，感觉就有一点像排列组合(业余玩家，不太清楚具体的类型)。&lt;br&gt;n种颜色，如果颜色足够(指大于四种)，我们其实也只能取出四种来操作，所以只需要一个&lt;br&gt;$$&lt;br&gt;C_n^4&lt;br&gt;$$&lt;br&gt;所以我们其实只需要考虑四种以内的情况。&lt;/p&gt;
&lt;p&gt;两种颜色：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;和&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;三种颜色：&lt;br&gt;我们自然可以想到，拿两种颜色就可以填上面的两种&lt;br&gt;$$&lt;br&gt;C_3^2 * 2&lt;br&gt;$$&lt;br&gt;然后，如果是三种颜色都要，有12种，肯定是有一个重复的，那么对角线重复就有两种情况，剩下的其实就是将三个数字填入三个位置，&lt;br&gt;$$&lt;br&gt;A_3^3&lt;br&gt;$$&lt;br&gt;就是6 + 6*2 &amp;#x3D; 18。&lt;/p&gt;
&lt;p&gt;到这里其实就应该明白了，我们只需要知道 i 种颜色有多少种即可，因为 i &amp;#x3D; 2, 3, 4，我们完全可以直接写出来，剩下的就是一个组合问题，再给出一个阶乘列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# ls[i]为i种颜色都使用，对应的可能数
# 四种颜色忘了说了，不过就是个A44
ls = [0, 0, 2, 12, 24]
# ls_jc[i] = i!
ls_jc = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
ret = 0
n = int(input())
if n &amp;lt;= 1:
    # 他在系统公告中，提示了0的问题
    ret = 0
elif n &amp;lt;= 4:
    for i in range(2, n+1):
        ret += ls[i] * ls_jc[n] // (ls_jc[i] * ls_jc[n-i])
        # 还有一个限制就是输出大小，这里原题目是有的
        ret %= 1000000007
else:
    for i in range(2, 5):
        ret += ls[i] * ls_jc[n] // (ls_jc[i] * ls_jc[n-i])
        ret %= 1000000007
print(ret)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;小插曲：&#34;&gt;&lt;a href=&#34;#小插曲：&#34; class=&#34;headerlink&#34; title=&#34;小插曲：&#34;&gt;&lt;/a&gt;小插曲：&lt;/h3&gt;&lt;p&gt;当时有一块写错了，然后跑出来只有27%，自己就去看了一下范围是小于等于十，那么案例至少有10个吧。&lt;br&gt;然后自己因为有边界检测，负数、0、1、2都能正确，那么至少对三个，反推出案例应该是11个，那么就是3往上有问题，所以将矛头对准了ls[3]，果然是算少了，改成12，啪的一下，很快就过了……&lt;/p&gt;
&lt;h2 id=&#34;题目五：堆积木&#34;&gt;&lt;a href=&#34;#题目五：堆积木&#34; class=&#34;headerlink&#34; title=&#34;题目五：堆积木&#34;&gt;&lt;/a&gt;题目五：堆积木&lt;/h2&gt;&lt;p&gt;给定一个已有的字符串和一个目标字符串，可以从右边删除一个字符，也可以往左边插入一个字符，删除和插入操作的次数没有限制，问最少操作多少次可以使已有字符串变成目标字符串。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;输入&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;原串长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 5 3 4 6&lt;/td&gt;
&lt;td&gt;原串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;目标串长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 1 5 3 4&lt;/td&gt;
&lt;td&gt;目标串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;思路：-3&#34;&gt;&lt;a href=&#34;#思路：-3&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;p&gt;筱羊冰冰：这个题，其实看明白了就没那么难，其实就是找最长公共子序列。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from collections import deque
l_old = int(input())
old = input().split()
l_new = int(input())
new = input().split()
length = 0
# 这里没啥原因，就是deque的头插尾插都比较快，O(1)的
s1, s2 = deque(), deque()
judge = 0
while True:
    s1.append(old[length])
    s2.appendleft(new[-length-1])
    length += 1
    if s1 == s2:
        judge = 1
        break
    elif length == min(l_old, l_new):
        break
if judge:
    print(l_old+l_new - length*2)
else:
    print(l_old+l_new)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;重大失误&#34;&gt;&lt;a href=&#34;#重大失误&#34; class=&#34;headerlink&#34; title=&#34;重大失误&#34;&gt;&lt;/a&gt;重大失误&lt;/h3&gt;&lt;p&gt;上面的代码其实没考虑，如果有多对子串相同，要找出最长的……&lt;br&gt;不过感觉测试案例比较拉，所以显示还是ac了的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/WrittenExamination/MeiTuan_20220409/MeiTuan_20220409/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
</content>
        <category term="WrittenExamination" scheme="http://www.liangmeng.xyz/categories/WrittenExamination/" />
        <category term="MeiTuan_20220409" scheme="http://www.liangmeng.xyz/categories/WrittenExamination/course-1/" />
        <category term="笔试题" scheme="http://www.liangmeng.xyz/tags/%E7%AC%94%E8%AF%95%E9%A2%98/" />
        <category term="赛码网" scheme="http://www.liangmeng.xyz/tags/%E8%B5%9B%E7%A0%81%E7%BD%91/" />
        <category term="美团" scheme="http://www.liangmeng.xyz/tags/%E7%BE%8E%E5%9B%A2/" />
        <updated>2022-04-10T10:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://www.liangmeng.xyz/LeetCode/1_twosum_easy/</id>
        <title>两数之和</title>
        <link rel="alternate" href="http://www.liangmeng.xyz/LeetCode/1_twosum_easy/"/>
        <content type="html">&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。&lt;/p&gt;
&lt;p&gt;你可以按任意顺序返回答案。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a href=&#34;#实例&#34; class=&#34;headerlink&#34; title=&#34;实例&#34;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;h3 id=&#34;实例1&#34;&gt;&lt;a href=&#34;#实例1&#34; class=&#34;headerlink&#34; title=&#34;实例1&#34;&gt;&lt;/a&gt;实例1&lt;/h3&gt;&lt;p&gt;输入：nums &amp;#x3D; [2,7,11,15], target &amp;#x3D; 9&lt;br&gt;输出：[0,1]&lt;br&gt;解释：因为 nums[0] + nums[1] &amp;#x3D;&amp;#x3D; 9 ，返回 [0, 1] 。&lt;/p&gt;
&lt;h3 id=&#34;实例2&#34;&gt;&lt;a href=&#34;#实例2&#34; class=&#34;headerlink&#34; title=&#34;实例2&#34;&gt;&lt;/a&gt;实例2&lt;/h3&gt;&lt;p&gt;输入：nums &amp;#x3D; [3,2,4], target &amp;#x3D; 6&lt;br&gt;输出：[1,2]&lt;/p&gt;
&lt;h3 id=&#34;实例3&#34;&gt;&lt;a href=&#34;#实例3&#34; class=&#34;headerlink&#34; title=&#34;实例3&#34;&gt;&lt;/a&gt;实例3&lt;/h3&gt;&lt;p&gt;输入：nums &amp;#x3D; [3,3], target &amp;#x3D; 6&lt;br&gt;输出：[0,1]&lt;/p&gt;
&lt;h2 id=&#34;提示&#34;&gt;&lt;a href=&#34;#提示&#34; class=&#34;headerlink&#34; title=&#34;提示&#34;&gt;&lt;/a&gt;提示&lt;/h2&gt;&lt;p&gt;（1）2 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 104&lt;br&gt;（2）-109 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;br&gt;（3）-109 &amp;lt;&amp;#x3D; target &amp;lt;&amp;#x3D; 109&lt;br&gt;（4）只会存在一个有效答案&lt;/p&gt;
</content>
        <category term="LeetCode" scheme="http://www.liangmeng.xyz/categories/LeetCode/" />
        <category term="两数之和" scheme="http://www.liangmeng.xyz/categories/LeetCode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/" />
        <updated>2022-04-10T08:52:36.000Z</updated>
    </entry>
    <entry>
        <id>http://www.liangmeng.xyz/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
        <title>学生成绩管理系统</title>
        <link rel="alternate" href="http://www.liangmeng.xyz/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;p&gt;相信很多同仁在大学学习编程的时候都会被老师要求动手敲出一个学生成绩管理系统或图书馆管理系统之类的程序吧。&lt;br&gt;&lt;strong&gt;不得不说，这个程序简直就是大多数初学者的恶梦，毕竟它的内容涉及到了整一个学期学到的所有知识。&lt;/strong&gt;&lt;br&gt;&lt;del&gt;况且，对于像我这种在大学前从来没接触过编程，也不知道代码是啥的绝对萌新来说，更是一次史诗级的灾难。&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你见过凌晨四点的教学楼吗？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;我见过，那时候我刚从里面出来。&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话不多说，说多了都是泪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实验要求我就不赘述了吧，无非就是录成绩、各种方式查成绩、名次排序、计算均分等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;还是直接上代码吧，大家都是爽快人！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define N 30
#define M 10
#define X 6

/*学生信息结构体，包括学号，姓名，各学科分数，总分，均分*/
typedef struct student
&amp;#123;
  long number;
  char name[M];
  int score[X];
  int stutotal;
  float stuaverage;
&amp;#125;STUDENT;/*对学生信息结构体取别名“STUDENT”*/

/*实现两个结构体的交换，注意，结构体是可以直接赋值的*/
void Swap(STUDENT *a,STUDENT *b)
&amp;#123;
  STUDENT temp;
  temp=*a;
  *a=*b;
  *b=temp;
&amp;#125;

/*由用户用键盘依次输入学生信息*/
void Input(STUDENT stu[],int n,int x)
&amp;#123;
    printf(&amp;quot;\n\n&amp;quot;);
    int i,j;
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        printf(&amp;quot;Number:\t&amp;quot;);
        scanf(&amp;quot;%ld&amp;quot;,&amp;amp;stu[i].number);
        getchar();/*清除缓冲区中的回车字符，防止被读入学生姓名*/
        printf(&amp;quot;Name:\t&amp;quot;);
        gets(stu[i].name);
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            do&amp;#123;
                printf(&amp;quot;Score %d:&amp;quot;,j+1);
                scanf(&amp;quot;%d&amp;quot;,&amp;amp;stu[i].score[j]);
            &amp;#125;while(stu[i].score[j]&amp;lt;0||stu[i].score[j]&amp;gt;100);/*防止录入异常成绩*/
        &amp;#125;
    &amp;#125;
&amp;#125;

/*计算各学科的总分和均分*/
void SubCalculate(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&amp;#123;
    int i,j;
    for(j=0;j&amp;lt;x;j++)
    &amp;#123;
        subtotal[j]=0;/*学科总成绩初始化为0*/
        for(i=0;i&amp;lt;n;i++)
        &amp;#123;
            subtotal[j]=subtotal[j]+stu[i].score[j];
        &amp;#125;
        subaverage[j]=(float)subtotal[j]/n;/*将整型数强转为浮点数后进行浮点数运算，确保数据的准确性*/
        printf(&amp;quot;(subject %d)Total:%d\t\tAverage:%6.2f\n&amp;quot;,j+1,subtotal[j],subaverage[j]);
    &amp;#125;
 &amp;#125;

/*计算每个学生的总分和均分*/
void StuCalculate(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j;
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        stu[i].stutotal=0;/*学生总成绩初始化为0*/
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            stu[i].stutotal=stu[i].stutotal+stu[i].score[j];
        &amp;#125;
        stu[i].stuaverage=(float)stu[i].stutotal/x;/*将整型数强转为浮点数后进行浮点数运算，确保数据的准确性*/
        printf(&amp;quot;(student %d)Total:%d\t\tAverage:%6.2f\n&amp;quot;,i+1,stu[i].stutotal,stu[i].stuaverage);
    &amp;#125;
&amp;#125;

/*将学生成绩按从高到低的顺序排列*/
void SortStuScoreUpdown(STUDENT stu[],int n)
&amp;#123;
    for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (stu[i].stutotal &amp;lt; stu[j].stutotal) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的总成绩小于后面的学生的总成绩，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*将学生成绩按从低到高的顺序排列*/
void SortStuScoreDownup(STUDENT stu[],int n)
&amp;#123;
        for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (stu[i].stutotal &amp;gt; stu[j].stutotal) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的总成绩大于后面的学生的总成绩，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*将学生学号按从小到大排列*/
void SortNumberDownup(STUDENT stu[],int n)
&amp;#123;
        for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (stu[i].number &amp;gt; stu[j].number) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的学号大于后面的学生的学号，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*将学生姓名按字典顺序排列*/
void SortName(STUDENT stu[],int n)
&amp;#123;
    for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (strcmp(stu[i].name,stu[j].name)&amp;gt;0) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的字母序位大于后面的学生的字母序位，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*按学号查找学生并输出学生信息*/
void SearchNumber(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j,flag=0;/*未找到学生时flag初始化为0*/
    long temp;
    printf(&amp;quot;Input the number:\t&amp;quot;);
    scanf(&amp;quot;%ld&amp;quot;,&amp;amp;temp);
    getchar();
    SortStuScoreUpdown(stu,n);/*将学生按照成绩从高到低排序以获得学生的排名情况*/
    for(i=0;i&amp;lt;n;i++)/*将录入的学生学号与待查学号进行一一比对*/
    &amp;#123;
        if(stu[i].number==temp)/*找到与待查学号一致的学号*/
        &amp;#123;
            flag=1;/*找到学号对应的学生时，flag被赋值为1*/
            printf(&amp;quot;Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n&amp;quot;);
            printf(&amp;quot;%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,i+1,stu[i].stutotal,stu[i].stuaverage);
            for(j=0;j&amp;lt;x;j++)
            &amp;#123;
                printf(&amp;quot;%4d&amp;quot;,stu[i].score[j]);
            &amp;#125;
            printf(&amp;quot;\n&amp;quot;);
            break;
        &amp;#125;
    &amp;#125;
    if(flag==0)/*未找到学号对应学生时，flag的值仍为0*/
    &amp;#123;
        printf(&amp;quot;\nNot find!\n&amp;quot;);
    &amp;#125;
&amp;#125;

/*按姓名查找学生并输出学生信息*/
void SearchName(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j,flag=0;/*未找到学生时flag初始化为0*/
    char tep[M];
    printf(&amp;quot;Input the name:\t&amp;quot;);
  scanf(&amp;quot; %s&amp;quot;,tep);
    SortStuScoreUpdown(stu,n);/*将学生按照成绩从高到低排序以获得学生的排名情况*/
    for(i=0;i&amp;lt;n;i++)/*将录入的学生姓名与待查姓名进行一一比对*/
    &amp;#123;
        if(strcmp(stu[i].name,tep)==0)/*找到与待查姓名字母顺序完全一致的姓名*/
        &amp;#123;
            flag=1;/*找到学号对应的学生时，flag被赋值为1*/
            printf(&amp;quot;Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n&amp;quot;);
            printf(&amp;quot;%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,i+1,stu[i].stutotal,stu[i].stuaverage);
            for(j=0;j&amp;lt;x;j++)
            &amp;#123;
                printf(&amp;quot;%4d&amp;quot;,stu[i].score[j]);
            &amp;#125;
            printf(&amp;quot;\n&amp;quot;);
            break;
        &amp;#125;
    &amp;#125;
    if(flag==0)/*未找到学号对应学生时，flag的值仍为0*/
    &amp;#123;
        printf(&amp;quot;\nNot find!\n&amp;quot;);
    &amp;#125;
&amp;#125;

/*统计并打印出各学科各阶段人数及占比*/
void Analysis(STUDENT stu[],int n,int x)
&amp;#123;
    int a[N]=&amp;#123;0&amp;#125;,b[N]=&amp;#123;0&amp;#125;,c[N]=&amp;#123;0&amp;#125;,d[N]=&amp;#123;0&amp;#125;,e[N]=&amp;#123;0&amp;#125;;
    int i,j;
    for(j=0;j&amp;lt;x;j++)
    &amp;#123;
        for(i=0;i&amp;lt;n;i++)
        &amp;#123;
            if    (100&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;90&amp;lt;=stu[i].score[j])    a[j]++;
            else if(89&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;80&amp;lt;=stu[i].score[j])    b[j]++;
            else if(79&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;70&amp;lt;=stu[i].score[j])    c[j]++;
            else if(69&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;60&amp;lt;=stu[i].score[j])    d[j]++;
            else                                                           e[j]++;
        &amp;#125;
    &amp;#125;
    for(j=0;j&amp;lt;x;j++)
    &amp;#123;
        printf(&amp;quot;Subject No.%d:\n&amp;quot;,j+1);
        printf(&amp;quot;Excellent:%d\tpercent:%.2f%%\n&amp;quot;,a[j],(float)100*a[j]/n);
        printf(&amp;quot;Good:     %d\tpercent:%.2f%%\n&amp;quot;,b[j],(float)100*b[j]/n);
        printf(&amp;quot;Medium:   %d\tpercent:%.2f%%\n&amp;quot;,c[j],(float)100*c[j]/n);
        printf(&amp;quot;Pass:     %d\tpercent:%.2f%%\n&amp;quot;,d[j],(float)100*d[j]/n);
        printf(&amp;quot;Failed:   %d\tpercent:%.2f%%\n&amp;quot;,e[j],(float)100*e[j]/n);
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
    printf(&amp;quot;\n&amp;quot;);
&amp;#125;

/*输出各学生的学生信息及各课程的总分和均分*/
void List(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&amp;#123;
    int i,j;
    printf(&amp;quot;Name:     \tNumber:      \tTotalscore:\tAveragescore:\tSub 1:Sub 2:Sub 3:Sub 4:Sub 5:Sub 6:\n&amp;quot;);
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        printf(&amp;quot;%-10s\t%-13ld\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            printf(&amp;quot;%6d&amp;quot;,stu[i].score[j]);
        &amp;#125;
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
     printf(&amp;quot;          \t             \t           \t           \t&amp;quot;);
     for(j=0;j&amp;lt;x;j++)
     &amp;#123;
      printf(&amp;quot;%6d&amp;quot;,subtotal[j]);
     &amp;#125;
      printf(&amp;quot;\n&amp;quot;);
      printf(&amp;quot;         \t             \t           \t          \t&amp;quot;);
      for(j=0;j&amp;lt;x;j++)
      &amp;#123;
          printf(&amp;quot;%6.2f&amp;quot;,subaverage[j]);
      &amp;#125;
&amp;#125;

/*打印姓名，学号，总分，均分及各学科的分数*/
void Print1(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j;
    printf(&amp;quot;Name:     \tNumber:\t      Totalscore:\tAveragescore:\tSubjectscore:\n&amp;quot;);
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        printf(&amp;quot;%-10s\t%-13ld\t%9d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            printf(&amp;quot;%-6d&amp;quot;,stu[i].score[j]);
        &amp;#125;
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
&amp;#125;

/*打印各课程的总分和均分*/
void Print2(int subtotal[],float subaverage[],int x)
&amp;#123;
  int i;
  for(i=0;i&amp;lt;x;i++)
  &amp;#123;
    printf(&amp;quot;subtotal No.%d: %-6d\tsubaverage No.%d: %-6.2f\n&amp;quot;,i+1,subtotal[i],i+1,subaverage[i]);
  &amp;#125;
&amp;#125;

/*将信息写入文件并保存*/
void WritetoFile(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&amp;#123;
  FILE *fp;
  int i,j;
  if((fp=fopen(&amp;quot;score.txt&amp;quot;,&amp;quot;w&amp;quot;))==NULL)/*检验文件是否打开成功*/
  &amp;#123;
    printf(&amp;quot;Failure to open score.txt!\n&amp;quot;);
    exit(0);
  &amp;#125;
  fprintf(fp,&amp;quot;%d\t%d\n&amp;quot;,n,x);
  for(i=0;i&amp;lt;n;i++)
  &amp;#123;
    fprintf(fp,&amp;quot;%-10s\t%-13ld\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
     for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            fprintf(fp,&amp;quot;%-6d\n&amp;quot;,stu[i].score[j]);
        &amp;#125;
  &amp;#125;
  for(j=0;j&amp;lt;x;j++)
  &amp;#123;
      fprintf(fp,&amp;quot;%d\t%f\n&amp;quot;,subtotal[j],subaverage[j]);
  &amp;#125;
  fclose(fp);
&amp;#125;

/*从文件中读取出信息*/
void ReadfromFile(STUDENT stu[],int subtotal[],float subaverage[],int *n,int *x)
&amp;#123;
  FILE *fp;
  int i,j;
  if((fp=fopen(&amp;quot;score.txt&amp;quot;,&amp;quot;r&amp;quot;))==NULL)/*检验文件是否打开成功*/
  &amp;#123;
    printf(&amp;quot;Failure to open score.txt!\n&amp;quot;);
    exit(0);
  &amp;#125;
   fscanf(fp,&amp;quot;%d\t%d\n&amp;quot;,n,x);
  for(i=0;i&amp;lt;*n;i++)
    &amp;#123;
      fscanf(fp,&amp;quot;%10s&amp;quot;,stu[i].name);
      fscanf(fp,&amp;quot;%13ld&amp;quot;,&amp;amp;stu[i].number);
      fscanf(fp,&amp;quot;%11d&amp;quot;,&amp;amp;stu[i].stutotal);
      fscanf(fp,&amp;quot;%f&amp;quot;,&amp;amp;stu[i].stuaverage);
      for(j=0;j&amp;lt;*x;j++)
      &amp;#123;
        fscanf(fp,&amp;quot;%6d&amp;quot;,&amp;amp;stu[i].score[j]);
      &amp;#125;
    &amp;#125;
    for(j=0;j&amp;lt;*x;j++)
    &amp;#123;
        fscanf(fp,&amp;quot;%d\t%f&amp;quot;,&amp;amp;subtotal[j],&amp;amp;subaverage[j]);
    &amp;#125;
    fclose(fp);
&amp;#125;

int main()
&amp;#123;
    int m,n,x;
    int subtotal[X];
    float subaverage[X];
    STUDENT stu[N];
    do&amp;#123;
        printf(&amp;quot;Input the total number of students:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);
        printf(&amp;quot;Input the total number of subjects:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);
    &amp;#125;while(n&amp;lt;=0||n&amp;gt;30||x&amp;lt;1||x&amp;gt;6);/*检测学生总人数及学科总数是否符合要求*/
 KG:printf(&amp;quot;\n\n1.Input record\n2.Calculate total and average score of every course\n3.Calculate total and average score of every student\n&amp;quot;);
      printf(&amp;quot;4.Sort in descending order by total score of every student\n5.Sort in ascending order by total score of every student\n&amp;quot;);
      printf(&amp;quot;6.Sort in ascending order by number\n7.Sort in dictionary order by name\n8.Search by number\n&amp;quot;);
      printf(&amp;quot;9.Search by name\n10.Statistic analysis for every course\n11.List record\n&amp;quot;);
      printf(&amp;quot;12.Write to a file\n13.Read from a file\n0.Exit\n\nPlease enter your choice:&amp;quot;);
      scanf(&amp;quot;%d&amp;quot;,&amp;amp;m);/*打印出菜单栏以供用户选择操作*/
    switch(m)/*利用switch语句实现菜单中的各个功能*/
    &amp;#123;
      case 1: Input(stu,n,x);
               break;
      case 2: SubCalculate(stu,subtotal,subaverage,n,x);
               break;
      case 3:StuCalculate(stu,n,x);
               break;
      case 4: SortStuScoreUpdown(stu,n);
               Print1(stu,n,x);
              break;
      case 5: SortStuScoreDownup(stu,n);
              Print1(stu,n,x);
             break;
      case 6: SortNumberDownup(stu,n);
              Print1(stu,n,x);
            break;
      case 7: SortName(stu,n);
              Print1(stu,n,x);
            break;
      case 8: SearchNumber(stu,n,x);
            break;
      case 9: SearchName(stu,n,x);
            break;
      case 10: Analysis(stu,n,x);
            break;
      case 11: List(stu,subtotal,subaverage,n,x);
            break;
      case 12:WritetoFile(stu,subtotal,subaverage,n,x);
            break;
      case 13:ReadfromFile(stu,subtotal,subaverage,&amp;amp;n,&amp;amp;x);
                Print1(stu,n,x);
                Print2(subtotal,subaverage,x);
            break;
      case 0: exit(0);
    &amp;#125;
   if(m!=0||m&amp;lt;0||m&amp;gt;13) goto KG;/*检测用户选择是否出错，并利用goto语句实现跳转*/
   return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上就是该实验的全部代码。（&lt;del&gt;毫无保留，直接裸奔！！！&lt;/del&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;实验数据我就不给了吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本人王者荣耀迷和KPL迷，实验数据全是英雄名和选手名（说实话，选手们的ID确实好听），估计助教在看实验的时候都笑出猪叫了。（&lt;del&gt;助教笑出猪叫？？？&lt;/del&gt; 啪，又来套娃！）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有相同兴趣的小伙伴们可以找我一起观赛掉分。&lt;del&gt;本人厨艺精湛，饭多管饱！！！&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/3.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;敲黑板！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果大佬们不幸看了我的代码，欢迎指导！！！（毕竟这时大一刚学的时候写的，估计bug一堆，很多代码也不是最优的）&lt;br&gt;如果萌新们不幸看了我的代码，欢迎交流！！！（如果你也备受这个实验困扰，希望这篇文章能够帮助到你）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后，有被学生成绩管理系统和图书馆管理系统折磨过的同仁，举个爪子示意一下，让我知道我并不孤单！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
</content>
        <category term="C-CPP" scheme="http://www.liangmeng.xyz/categories/C-CPP/" />
        <category term="学生成绩管理系统" scheme="http://www.liangmeng.xyz/categories/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/" />
        <category term="C语言" scheme="http://www.liangmeng.xyz/tags/C%E8%AF%AD%E8%A8%80/" />
        <updated>2022-04-07T06:43:36.000Z</updated>
    </entry>
    <entry>
        <id>http://www.liangmeng.xyz/Hello-MyWorld/hello-world/</id>
        <title>欢迎来到我的世界</title>
        <link rel="alternate" href="http://www.liangmeng.xyz/Hello-MyWorld/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="Hello-MyWorld" scheme="http://www.liangmeng.xyz/categories/Hello-MyWorld/" />
        <category term="欢迎来到我的世界" scheme="http://www.liangmeng.xyz/categories/Hello-MyWorld/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/" />
        <updated>2022-04-06T14:56:44.788Z</updated>
    </entry>
    <entry>
        <id>http://www.liangmeng.xyz/C-CPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</id>
        <title>CPP语言基础</title>
        <link rel="alternate" href="http://www.liangmeng.xyz/C-CPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
        <content type="html"></content>
        <category term="C-CPP" scheme="http://www.liangmeng.xyz/categories/C-CPP/" />
        <category term="CPP语言基础" scheme="http://www.liangmeng.xyz/categories/C-CPP/course-1/" />
        <category term="C++" scheme="http://www.liangmeng.xyz/tags/C/" />
        <updated>2021-03-25T11:45:16.000Z</updated>
    </entry>
</feed>
