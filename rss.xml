<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Keep Coding</title>
        <subtitle></subtitle>
        <icon>https://www.liangmeng.xyz/images/favicon.ico</icon>
        <link>https://www.liangmeng.xyz</link>
        <author>
          <name>MAC、凉梦</name>
        </author>
        <description>花落微凉梦清幽</description>
        <language>zh-CN</language>
        <pubDate>Sun, 24 Apr 2022 10:42:00 +0800</pubDate>
        <lastBuildDate>Sun, 24 Apr 2022 10:42:00 +0800</lastBuildDate>
        <category term="后端" />
        <category term="软件" />
        <category term="Python" />
        <category term="C/C++" />
        <category term="Markdown" />
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/DataStructure/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</guid>
            <title>线性结构及其应用</title>
            <link>https://www.liangmeng.xyz/DataStructure/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</link>
            <category term="数据结构" scheme="https://www.liangmeng.xyz/categories/DataStructure/" />
            <category term="线性结构及其应用" scheme="https://www.liangmeng.xyz/categories/DataStructure/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/" />
            <category term="实验" scheme="https://www.liangmeng.xyz/tags/%E5%AE%9E%E9%AA%8C/" />
            <category term="数据结构" scheme="https://www.liangmeng.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="线性表" scheme="https://www.liangmeng.xyz/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/" />
            <pubDate>Sun, 24 Apr 2022 10:42:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;结束了大一上C语言的学习，脱离了被学生成绩管理系统支配的恐惧，开始来学习 &lt;strong&gt;&lt;del&gt;万恶的&lt;/del&gt;&lt;/strong&gt; 数据结构。&lt;/p&gt;
&lt;p&gt;依稀记得当时为了做这个实验，我早早地吃完晚饭，守在电脑前，打开了 &lt;strong&gt;CodeBlocks、百度搜索（&lt;del&gt;懂的都懂！！！&lt;/del&gt; ）、QQ和微信（&lt;del&gt;哈哈，信我，真的只是为了与外界取得联系！！！&lt;/del&gt; ），面前还摆着C语言课本和数结构课本，&lt;/strong&gt; 真的是正襟危坐，紧张刺激。&lt;/p&gt;
&lt;p&gt;这里说明一下，去年因为疫情的影响，全部在家上网课，而且数据结构实验课是在晚上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;等等，晚上？这不是变相让我们决战到天亮吗？？？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;果然，老师诚不负我。曾天真地以为可以永远告别学生成绩管理系统了，好家伙，它又给我回来了！！！（&lt;strong&gt;原地死亡&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验要求如下&lt;/strong&gt;：&lt;br&gt;学期结束，辅导员需要收集两个班级的同学的C语言课程成绩。请你为辅导员做一个成绩录入统计，帮助辅导员更好地工作。（&lt;del&gt;&lt;strong&gt;请问你分钱给我吗？没有凭什么将你的快乐建立在我的痛苦之上？&lt;/strong&gt;&lt;/del&gt; ）&lt;/p&gt;
&lt;p&gt;（1）成绩信息录入——线性表的建立与遍历&lt;br&gt;操作1：初始化空表&lt;br&gt;操作2：按成绩降序插入所有同学的学号、班级信息和成绩到各自班级链表&lt;br&gt;操作3：查找&amp;#x2F;删除，若对应班级链表中无该同学信息，则输出无法找到&lt;br&gt;操作4：信息输出，线性表的遍历&lt;br&gt;（2）信息汇总&lt;br&gt;信息统计：将同学们的成绩合并到总表&lt;br&gt;（3）建表翻转&lt;br&gt;将总表中信息翻转到新表中&lt;/p&gt;
&lt;p&gt;算了，还是写吧。&lt;br&gt;&lt;strong&gt;但请你记住，我不是在帮你，我只是想改变世界！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面奉上鄙人的拙劣的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

//定义学生信息节点
typedef struct node&amp;#123;
    int ID_num;  //学号
    int Class_num;  //班级
    int C_score;  //分数
    struct node *next;
&amp;#125;STUDENTNODE;

//建立学生信息节点,返回指向该节点的指针
STUDENTNODE* StudentListNodeCreat(int Class_num, int ID_num, int C_score)&amp;#123;
    STUDENTNODE *p;
    p = (STUDENTNODE *)malloc(sizeof(STUDENTNODE));   //给新建节点分配存储空间
    if(!p)  exit(0);
    p-&amp;gt;ID_num = ID_num;
    p-&amp;gt;Class_num = Class_num;
    p-&amp;gt;C_score = C_score;
    p-&amp;gt;next = NULL;  //指针初始化为NULL
    return p;
&amp;#125;

//在已有的成绩降序链表中插入新建学生信息节点，并保持链表成绩仍为降序
STUDENTNODE* Insert_Descending(STUDENTNODE *head, STUDENTNODE *node)&amp;#123;
    STUDENTNODE *p, *q;
    p = head;
    q = node;
    while(p-&amp;gt;next)&amp;#123;  //链表下一节点存在
        if((p-&amp;gt;next-&amp;gt;C_score) &amp;gt; q-&amp;gt;C_score)&amp;#123;  //若下一节点的成绩大于插入节点的成绩
            p = p-&amp;gt;next;  //继续向下搜索
        &amp;#125;
        else&amp;#123;
            q-&amp;gt;next = p-&amp;gt;next;  //若下一节点的成绩小于或等于插入节点的成绩
            p-&amp;gt;next = q;
            break;
        &amp;#125;
    &amp;#125;
    if(!(p-&amp;gt;next))&amp;#123;
        q-&amp;gt;next = p-&amp;gt;next;  //搜索至链表末端时，将节点插入末端
        p-&amp;gt;next = q;
    &amp;#125;
    return head;
&amp;#125;

//根据学号搜索学生信息,若有，则输出成绩,若没有，输出没有该学生信息
void SearchByID_num(STUDENTNODE *head, int ID_num)&amp;#123;
    STUDENTNODE *p;
    p = head;
    while(p-&amp;gt;next)&amp;#123;  //下一节点存在
        if((p-&amp;gt;next-&amp;gt;ID_num) != ID_num)&amp;#123;  //若下一节点的学号不等于搜索的学号
            p = p-&amp;gt;next;  //继续向下搜索
        &amp;#125;
        else&amp;#123;
            printf(&amp;quot;It is    &amp;#123; Class_number: %d, ID_number: %d, C_score: %3d &amp;#125;\n&amp;quot;, p-&amp;gt;next-&amp;gt;Class_num, p-&amp;gt;next-&amp;gt;ID_num, p-&amp;gt;next-&amp;gt;C_score);  //匹配到相应学号时
            break;
        &amp;#125;
    &amp;#125;
    if(!(p-&amp;gt;next))&amp;#123;
       printf(&amp;quot;This class has no such student as ID_number = %d\n&amp;quot;, ID_num);  //搜索至链表末端时,返回没有相应学生信息
    &amp;#125;
&amp;#125;

//根据学号删除学生相关信息
STUDENTNODE* DeleteByID_num(STUDENTNODE *head, int ID_num)&amp;#123;
    STUDENTNODE *p, *q;
    p = head;
    while(p-&amp;gt;next)&amp;#123;  //下一节点存在
        if((p-&amp;gt;next-&amp;gt;ID_num) != ID_num)&amp;#123;  //若下一节点的学号不等于搜索的学号
            p = p-&amp;gt;next;  //继续向下搜索
        &amp;#125;
        else&amp;#123;
            q = p-&amp;gt;next;  //匹配到相应学号时
            p-&amp;gt;next = q-&amp;gt;next;  //将p的指针指向下一节点存放的指针所指向的地址
            free(q);  //释放内存
            printf(&amp;quot;Success!\n&amp;quot;);
            break;
        &amp;#125;
    &amp;#125;
    if(!(p-&amp;gt;next))&amp;#123;
       printf(&amp;quot;This class has no such student as ID_number = %d\n&amp;quot;, ID_num);  //搜索至链表末端时,返回没有相应学生信息
    &amp;#125;
    return head;
&amp;#125;


//复制参数节点
STUDENTNODE* NodeCopy(STUDENTNODE *node)&amp;#123;
    STUDENTNODE *newnode;
    newnode = (STUDENTNODE *)malloc(sizeof(STUDENTNODE));  //为新节点分配空间复制各部分的值，指针初始化为NULL
    newnode-&amp;gt;Class_num = node-&amp;gt;Class_num;  //复制各部分的值指针初始化为NULL
    newnode-&amp;gt;ID_num = node-&amp;gt;ID_num;
    newnode-&amp;gt;C_score = node-&amp;gt;C_score;
    newnode-&amp;gt;next = NULL;  //指针初始化为NULL
    return newnode;
&amp;#125;

//将两个班级的成绩表合并为一个新的总表，表中成绩仍按降序处理,同时不破坏原有分表
STUDENTNODE* MergeStudentList(STUDENTNODE* heads[], STUDENTNODE *MergeList)&amp;#123;  //参数为待合并分表和合并总表头结点的指针
    STUDENTNODE *p, *q, *r, *copynode;
    p = heads[0]-&amp;gt;next;
    q = heads[1]-&amp;gt;next;
    r = MergeList;
    while(p &amp;amp;&amp;amp; q)&amp;#123;  //当两个指针指向的节点同时存在时,比较两节点的成绩
        if((p-&amp;gt;C_score) &amp;gt;= (q-&amp;gt;C_score))&amp;#123;  //p指针指向节点的成绩大于或等于q指针指向节点的成绩
            copynode = NodeCopy(p);  //复制p指针指向的节点,该节点为满足条件的待插入节点
            r-&amp;gt;next = copynode;
            r = r-&amp;gt;next;
            p = p-&amp;gt;next;
        &amp;#125;
        else&amp;#123;
            copynode = NodeCopy(q);  //复制q指针指向的节点,该节点为满足条件的待插入节点
            r-&amp;gt;next = copynode;
            r = r-&amp;gt;next;
            q = q-&amp;gt;next;
        &amp;#125;
    &amp;#125;
    while(p)&amp;#123;  //当p指针指向节点存在,即分表还未遍历时,依次插入所有节点
        copynode = NodeCopy(p);
        r-&amp;gt;next = copynode;
        r = r-&amp;gt;next;
        p = p-&amp;gt;next;
    &amp;#125;
    while(q)&amp;#123;  //当q指针指向节点存在,即分表还未遍历时,依次插入所有节点
        copynode = NodeCopy(q);
        r-&amp;gt;next = copynode;
        r = r-&amp;gt;next;
        q = q-&amp;gt;next;
    &amp;#125;
    return MergeList;
&amp;#125;

//将总表逆序排列,即表中成绩按升序处理,同时不破坏原有总表
STUDENTNODE* ReverseStudentList(STUDENTNODE *MergeList,STUDENTNODE *ReverseList)&amp;#123;  //参数为待逆序总表和逆序总表头结点的指针
    STUDENTNODE *p, *q, *newnode;
    p = MergeList-&amp;gt;next;
    q = ReverseList;
    while(p)&amp;#123;  //依次遍历并复制每一个节点,不断将复制形成的节点插入到头结点与第一个节点之间,最终达到逆序的效果
        newnode = NodeCopy(p);  //复制当前节点
        newnode-&amp;gt;next = q-&amp;gt;next;  //将复制形成的节点插入头结点与第一个节点之间
        q-&amp;gt;next = newnode;
        p = p-&amp;gt;next;
    &amp;#125;
    return ReverseList;
&amp;#125;

//打印单个学生节点信息
void PrintStudentNode(STUDENTNODE *node)&amp;#123;
    STUDENTNODE *p;
    p = node;
    printf(&amp;quot;&amp;#123; Class_number: %d, ID_number: %d, C_score: %3d&amp;#125;\n&amp;quot;, p-&amp;gt;Class_num, p-&amp;gt;ID_num, p-&amp;gt;C_score);
&amp;#125;

//打印整个学生信息表
void PrintStudentList(STUDENTNODE *head)&amp;#123;
    STUDENTNODE *p;
    p = head-&amp;gt;next;
    while(p)&amp;#123;
        printf(&amp;quot;&amp;#123; Class_number: %d, ID_number: %d, C_score: %3d &amp;#125;&amp;quot;, p-&amp;gt;Class_num, p-&amp;gt;ID_num, p-&amp;gt;C_score);
        p = p-&amp;gt;next;
        if(p)&amp;#123;
            printf(&amp;quot;-&amp;gt;\n&amp;quot;);  //存在后继节点，则以&amp;quot;-&amp;gt;&amp;quot;来表示
        &amp;#125;
    &amp;#125;
    printf(&amp;quot;\nThat&amp;#39;s all\n&amp;quot;);
&amp;#125;

int main()
&amp;#123;
    int n_student;  //学生个数
    char order;      //用户选择
    int tempClass;
    int tempID;
    int tempScore;
    STUDENTNODE* tempNode;
    STUDENTNODE* MergeList;  //降序总表头指针
    STUDENTNODE* ReverseList;  //升序总表头指针
    STUDENTNODE* Class[2] = &amp;#123;StudentListNodeCreat(0,0,0),StudentListNodeCreat(1,0,0)&amp;#125;;  //为两个班级分表创建头结点
    printf(&amp;quot;\n                  ################################################################                  \n&amp;quot;);
    printf(&amp;quot;1.Insert_Descending  2.Search by ID_number  3.Delete by ID_number  4.Merge  5.Reverse  6.Print  q.Quit\n&amp;quot;);
    printf(&amp;quot;\n                  ################################################################                  \n&amp;quot;);
    printf(&amp;quot;Input your order:    &amp;quot;);
    while(scanf(&amp;quot; %c&amp;quot;, &amp;amp;order))&amp;#123;  //检查是否读取到有效值
        switch (order)&amp;#123;  //查看用户指令
        case &amp;#39;1&amp;#39;:
            printf(&amp;quot;How many student do you want to input?    &amp;quot;);
            while(getchar() != &amp;#39;\n&amp;#39;)&amp;#123;  //清除缓冲区中的所有字符
                continue;
            &amp;#125;
            while(scanf(&amp;quot;%d&amp;quot;, &amp;amp;n_student))&amp;#123;  //检查是否读取到有效值
            while(n_student != 0)&amp;#123;
                printf(&amp;quot;Input the data format as Class_number,ID_number,C_score:    &amp;quot;);
                while(getchar() != &amp;#39;\n&amp;#39;)&amp;#123;  //清除缓冲区中的所有字符
                    continue;
                &amp;#125;
                while((scanf(&amp;quot;%d,%d,%d&amp;quot;, &amp;amp;tempClass, &amp;amp;tempID, &amp;amp;tempScore) != 3))&amp;#123;  //检查是否读取到有效值
                    while(getchar() != &amp;#39;\n&amp;#39;)&amp;#123;  //清除缓冲区中的所有字符
                    continue;
                    &amp;#125;
                    printf(&amp;quot;Error!Please input again!\n&amp;quot;);  //提示错误并要求重新输入
                    printf(&amp;quot;Input the data format as Class_number,ID_number,C_score:    &amp;quot;);
                &amp;#125;
                tempNode = StudentListNodeCreat(tempClass, tempID, tempScore);  //新建学生信息节点
                Class[tempClass] = Insert_Descending(Class[tempClass], tempNode);  //将新建节点按降序插入班级表中
                printf(&amp;quot;This is the node you have inserted:    &amp;quot;);
                PrintStudentNode(tempNode);  //输出插入的学生节点信息
                n_student--;
            &amp;#125;
            break;
        case &amp;#39;2&amp;#39;:
            printf(&amp;quot;Input the data format as:Class_number,ID_number:    &amp;quot;);
            while((scanf(&amp;quot;%d,%d&amp;quot;, &amp;amp;tempClass, &amp;amp;tempID) != 2))&amp;#123;  //检查是否读取到有效值
                    while(getchar() != &amp;#39;\n&amp;#39;)&amp;#123;  //清除缓冲区中的所有字符
                    continue;
                    &amp;#125;
                    printf(&amp;quot;Error!Please input again!\n&amp;quot;);  //提示错误并要求重新输入
                    printf(&amp;quot;Input the data format as:Class_number,ID_number:    &amp;quot;);
                &amp;#125;
            SearchByID_num(Class[tempClass], tempID);
            break;
        case &amp;#39;3&amp;#39;:
            printf(&amp;quot;Input the data format as:Class_number,ID_number:    &amp;quot;);
            while((scanf(&amp;quot;%d,%d&amp;quot;, &amp;amp;tempClass, &amp;amp;tempID) != 2))&amp;#123;  //检查是否读取到有效值
                    while(getchar() != &amp;#39;\n&amp;#39;)&amp;#123;  //清除缓冲区中的所有字符
                    continue;
                    &amp;#125;
                    printf(&amp;quot;Error!Please input again!\n&amp;quot;);  //提示错误并要求重新输入
                    printf(&amp;quot;Input the data format as:Class_number,ID_number:    &amp;quot;);
                &amp;#125;
            Class[tempClass] = DeleteByID_num(Class[tempClass], tempID);
            break;
        case &amp;#39;4&amp;#39;:
            MergeList = StudentListNodeCreat(-1,0,0);  //为降序总表创建一个头结点
            MergeList = MergeStudentList(Class,MergeList);
            printf(&amp;quot;The list merged:\n&amp;quot;);
            PrintStudentList(MergeList);
            break;
        case &amp;#39;5&amp;#39;:
            ReverseList = StudentListNodeCreat(-1,0,0);  //为升序总表创建一个头结点
            ReverseList = ReverseStudentList(MergeList,ReverseList);
            printf(&amp;quot;The list reversed:\n&amp;quot;);
            PrintStudentList(ReverseList);
            break;
        case &amp;#39;6&amp;#39;:
            printf(&amp;quot;\nClass 0:\n&amp;quot;);
            PrintStudentList(Class[0]);
            printf(&amp;quot;\n&amp;quot;);
            printf(&amp;quot;\nClass 1:\n&amp;quot;);
            PrintStudentList(Class[1]);
            break;
        case &amp;#39;q&amp;#39;:
            exit(0);
        default:
            printf(&amp;quot;Error!Please input again!\n&amp;quot;);  //若用户输入选项以外的其他字符,提示输入错误并要求重新输入
            break;
        &amp;#125;
        printf(&amp;quot;\n                  ################################################################                  \n&amp;quot;);
        printf(&amp;quot;1.Insert_Descending  2.Search by ID_number  3.Delete by ID_number  4.Merge  5.Reverse  6.Print  q.Quit\n&amp;quot;);
        printf(&amp;quot;\n                  ################################################################                  \n&amp;quot;);
        printf(&amp;quot;Input your order:    &amp;quot;);
        &amp;#125;
    &amp;#125;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了满足基本要求外，鄙人还作贱自己添加了几个小小的功能：&lt;br&gt;1、程序只会读取输入的第一个字符作为指令，且程序在读到除以上字符外的其他字符时，都会提示用户重新输入，直至输入正确指令。&lt;br&gt;2、程序在读取输入时会通过scanf函数的返回值判断输入是否达到要求，若返回值错误，则会提示用户重新输入，直至输入格式完全正确，来提高程序的健壮性。&lt;br&gt;3、程序在每次读取输入之后都会清空缓冲区中的字符，避免存留字符对下一次的读取造成严重影响，可进一步防止程序崩溃。&lt;br&gt;4、在合并总表及翻转总表时，采用复制节点的方式，保证原表节点的信息不变，因此在合并或翻转后打印原表，也不会出现存放数据错误的现象。&lt;br&gt;5、在插入节点之后都会输出插入的节点信息，便于用户纠错并删除错误节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;敲黑板！！！数据结构非常非常非常地难，请反复反复反复练习。（&lt;del&gt;自己都做不到凭什么说别人。。。&lt;/del&gt; ）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/DataStructure/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/</guid>
            <title>第一章-人工智能的概述</title>
            <link>https://www.liangmeng.xyz/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/</link>
            <category term="人工智能" scheme="https://www.liangmeng.xyz/categories/ArtificialIntelligence/" />
            <category term="第一章-人工智能的概述" scheme="https://www.liangmeng.xyz/categories/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/" />
            <category term="笔记" scheme="https://www.liangmeng.xyz/tags/%E7%AC%94%E8%AE%B0/" />
            <category term="人工智能" scheme="https://www.liangmeng.xyz/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" />
            <pubDate>Sat, 23 Apr 2022 17:19:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;人工智能概述&#34;&gt;&lt;a href=&#34;#人工智能概述&#34; class=&#34;headerlink&#34; title=&#34;人工智能概述&#34;&gt;&lt;/a&gt;人工智能概述&lt;/h1&gt;&lt;h2 id=&#34;人工智能的定义&#34;&gt;&lt;a href=&#34;#人工智能的定义&#34; class=&#34;headerlink&#34; title=&#34;人工智能的定义&#34;&gt;&lt;/a&gt;人工智能的定义&lt;/h2&gt;&lt;h3 id=&#34;什么是智能&#34;&gt;&lt;a href=&#34;#什么是智能&#34; class=&#34;headerlink&#34; title=&#34;什么是智能&#34;&gt;&lt;/a&gt;什么是智能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自然智能：指人类和一些动物所具有的智力和行为能力。&lt;/li&gt;
&lt;li&gt;人类的自然智能（简称智能）：指人类在认识客观世界中，由思维过程和脑力活动所表现出的综合能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;智能的不同观点&#34;&gt;&lt;a href=&#34;#智能的不同观点&#34; class=&#34;headerlink&#34; title=&#34;智能的不同观点&#34;&gt;&lt;/a&gt;智能的不同观点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;思维理论：&lt;strong&gt;智能来源于思维活动，智能的核心是思维，人的一切知识都是思维的产物&lt;/strong&gt;。可望通过对思维规律和思维方法的研究来揭示智能的本质。&lt;/li&gt;
&lt;li&gt;知识阈值理论：&lt;strong&gt;智能取决于知识的数量及其可运用程度&lt;/strong&gt;。一个系统所具有的可运用知识越多，其智能就会越高。&lt;/li&gt;
&lt;li&gt;进化理论：智能取决于感知和行为，取决于对外界复杂环境的适应，智能不需要知识、不需要表示、不需要推理，&lt;strong&gt;智能可由逐步进化来实现&lt;/strong&gt;。（MIT，Brooks，人造机器虫研究）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;智能的层次结构&#34;&gt;&lt;a href=&#34;#智能的层次结构&#34; class=&#34;headerlink&#34; title=&#34;智能的层次结构&#34;&gt;&lt;/a&gt;智能的层次结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;高层智能：以大脑皮层（抑制中枢）为主，主要完成记忆、思维等活动。&lt;/li&gt;
&lt;li&gt;中层智能：以丘脑（间脑，感觉中枢）为主，主要完成感知活动。&lt;/li&gt;
&lt;li&gt;低层智能：以小脑、脊髓为主，主要完成动作反应活动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思维理论和知识阈值理论对应高层智能，而进化理论对应中层智能和低层智能&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;智能包含的能力&#34;&gt;&lt;a href=&#34;#智能包含的能力&#34; class=&#34;headerlink&#34; title=&#34;智能包含的能力&#34;&gt;&lt;/a&gt;智能包含的能力&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;感知能力：&lt;strong&gt;人类获得外界信息的基本途径&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;感知–动作方式：对简单、紧急的信息。&lt;/p&gt;
&lt;p&gt;感知–思维–动作方式：对复杂的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记忆和思维的能力：&lt;/p&gt;
&lt;p&gt;记忆：对感知到的外界信息和由思维产生的内部知识的&lt;strong&gt;存储&lt;/strong&gt;过程。&lt;/p&gt;
&lt;p&gt;思维：对已存储信息或知识的本质属性、内部规律的&lt;strong&gt;认识&lt;/strong&gt;过程。&lt;/p&gt;
&lt;p&gt;思维方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象思维（逻辑思维）：根据&lt;strong&gt;逻辑规则&lt;/strong&gt;对信息和知识进行处理的理性思维方式。&lt;/li&gt;
&lt;li&gt;形象思维（直感思维）：根据&lt;strong&gt;感性形象认识材料&lt;/strong&gt;对客观现象进行处理的一种思维方式。&lt;/li&gt;
&lt;li&gt;灵感思维（顿悟思维）：是一种显意识和潜意识相互作用的思维方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习和自适应能力：&lt;/p&gt;
&lt;p&gt;学习：&lt;strong&gt;是一个具有特定目的的知识获取过程，是人的一种本能&lt;/strong&gt;。不同人的学习方法、能力不同。&lt;/p&gt;
&lt;p&gt;自适应：&lt;strong&gt;是一种通过自我调节适应外界环境的过程，是人的一种本能&lt;/strong&gt;。不同人的适应能力不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行为能力：&lt;strong&gt;对感知的外界信息做出动作反应的能力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;信息来源：由感知直接获得的外界信息或经过思维加工后的信息。&lt;/p&gt;
&lt;p&gt;实现过程’：通过脊髓来控制，由语言、表情、体姿等来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是人工智能&#34;&gt;&lt;a href=&#34;#什么是人工智能&#34; class=&#34;headerlink&#34; title=&#34;什么是人工智能&#34;&gt;&lt;/a&gt;什么是人工智能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;学科的名称。&lt;/li&gt;
&lt;li&gt;人工方法实现的智能。&lt;/li&gt;
&lt;li&gt;计算机模拟实现的智能。&lt;/li&gt;
&lt;li&gt;人造的智能机器或系统。&lt;/li&gt;
&lt;li&gt;模仿、延伸以及扩展人的智能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人工智能典型的4种定义方法&#34;&gt;&lt;a href=&#34;#人工智能典型的4种定义方法&#34; class=&#34;headerlink&#34; title=&#34;人工智能典型的4种定义方法&#34;&gt;&lt;/a&gt;人工智能典型的4种定义方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类人思维方法（认知模型方法）：1978年贝尔曼，人工智能是那些与人的思维、决策、问题求解和学习等有关活动的自动化。&lt;/li&gt;
&lt;li&gt;类人行为方法（图灵测试方法）：1990年库兹韦勒，人工智能是一种创建机器的技艺，这种机器能够执行需要人的智能才能完成的功能。&lt;/li&gt;
&lt;li&gt;理性思维方法（思维法则方法）：1985年查尼艾克、麦克德莫特，人工智能是通过计算模型来进行心智能力研究的。&lt;/li&gt;
&lt;li&gt;理性行为方法（理性智能体方法）：1998年尼尔森，人工智能关心的是人工制品种的智能行为，即人工智能就是研究和建造理性智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理性思维方法与理性行为方法的关系：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;前者强调正确思维，后者强调合理行动。&lt;/li&gt;
&lt;li&gt;理性行为可以依据理性思维进行。&lt;/li&gt;
&lt;li&gt;理性行为不一定要依据理性思维进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人工智能的一般解释&#34;&gt;&lt;a href=&#34;#人工智能的一般解释&#34; class=&#34;headerlink&#34; title=&#34;人工智能的一般解释&#34;&gt;&lt;/a&gt;人工智能的一般解释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从能力的角度：人工智能是指&lt;strong&gt;用人工的方法在机器上实现的智能&lt;/strong&gt;，是智能机器所执行的通常与人类智能有关的功能，如判断、推理、证明、识别、感知、理解、设计、思考、规划、学习和问题求解等思维活动。&lt;/li&gt;
&lt;li&gt;从学科的角度：人工智能是&lt;strong&gt;一门研究如何构造智能机器或智能系统，去模拟、延伸和扩展人类智能的学科&lt;/strong&gt;，是计算机科学中涉及研究、设计和应用智能机器的一个分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人工智能的研究目标&#34;&gt;&lt;a href=&#34;#人工智能的研究目标&#34; class=&#34;headerlink&#34; title=&#34;人工智能的研究目标&#34;&gt;&lt;/a&gt;人工智能的研究目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1978年斯洛曼，三个主要目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对智能行为有效解释的理论分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解释人类智能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造具有智能的人工制品。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;远期目标：&lt;strong&gt;用自动机重现人类的思维过程和智能行为&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;揭示人类智能的根本机理，用智能机器去模拟、延伸和扩展人类的智能。涉及到脑科学、认知科学、计算机科学、系统科学、控制论等多种学科，并依赖于它们的共同发展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;近期目标：&lt;strong&gt;建造智能计算机代替人类的部分智力劳动&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;研究如何使现有的计算机更聪明，即使它能够运用知识去处理问题，能够模拟人类的智能行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;远期目标和近期目标的相互关系：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远期目标为近期目标指明了方向。&lt;/li&gt;
&lt;li&gt;近期目标则为远期目标奠定了理论和技术基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人工智能的发展简史&#34;&gt;&lt;a href=&#34;#人工智能的发展简史&#34; class=&#34;headerlink&#34; title=&#34;人工智能的发展简史&#34;&gt;&lt;/a&gt;人工智能的发展简史&lt;/h2&gt;&lt;h3 id=&#34;简史总结&#34;&gt;&lt;a href=&#34;#简史总结&#34; class=&#34;headerlink&#34; title=&#34;简史总结&#34;&gt;&lt;/a&gt;简史总结&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;人工智能的研究内容&#34;&gt;&lt;a href=&#34;#人工智能的研究内容&#34; class=&#34;headerlink&#34; title=&#34;人工智能的研究内容&#34;&gt;&lt;/a&gt;人工智能的研究内容&lt;/h2&gt;&lt;h3 id=&#34;研究内容&#34;&gt;&lt;a href=&#34;#研究内容&#34; class=&#34;headerlink&#34; title=&#34;研究内容&#34;&gt;&lt;/a&gt;研究内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如何获取知识？&lt;/li&gt;
&lt;li&gt;如何将获取的知识以计算机内部代码形式加以合理表示？&lt;/li&gt;
&lt;li&gt;如何运用知识进行推理，解决实际问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人工智能研究方法与途径&#34;&gt;&lt;a href=&#34;#人工智能研究方法与途径&#34; class=&#34;headerlink&#34; title=&#34;人工智能研究方法与途径&#34;&gt;&lt;/a&gt;人工智能研究方法与途径&lt;/h2&gt;&lt;h3 id=&#34;三大学派&#34;&gt;&lt;a href=&#34;#三大学派&#34; class=&#34;headerlink&#34; title=&#34;三大学派&#34;&gt;&lt;/a&gt;三大学派&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;符号主义：运用计算机科学的方法（逻辑演绎）。&lt;ul&gt;
&lt;li&gt;智能的基础是&lt;strong&gt;知识&lt;/strong&gt;，其核心是&lt;strong&gt;知识表示和知识推理&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知识可用符号表示，也可用符号进行推理&lt;/strong&gt;，因而可以建立基于知识的人类智能和机器智能的统一的理论体系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能模拟，构造能够模拟大脑功能的智能系统&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;联结主义：运用仿生学的方法（网络连接机制）。&lt;ul&gt;
&lt;li&gt;智能行为的基元是&lt;strong&gt;神经元&lt;/strong&gt;，而不是符号。&lt;/li&gt;
&lt;li&gt;思维过程是&lt;strong&gt;神经元的联结活动过程&lt;/strong&gt;，而不是符号运算过程，反对符号主义关于物理符号系统的假设。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构模拟，构造模拟大脑结构的神经网络系统&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为主义：运用进化论的思想（控制论和机器学习方法）。&lt;ul&gt;
&lt;li&gt;智能取决于&lt;strong&gt;感知和行动&lt;/strong&gt;，即“感知-动作”模型。&lt;/li&gt;
&lt;li&gt;智能不需要知识、不需要表示、不需要推理，人工智能可以像人类智能那样&lt;strong&gt;逐步进化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行为模拟，构造具有进化能力的智能系统&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人工智能的研究领域&#34;&gt;&lt;a href=&#34;#人工智能的研究领域&#34; class=&#34;headerlink&#34; title=&#34;人工智能的研究领域&#34;&gt;&lt;/a&gt;人工智能的研究领域&lt;/h2&gt;&lt;h3 id=&#34;研究领域&#34;&gt;&lt;a href=&#34;#研究领域&#34; class=&#34;headerlink&#34; title=&#34;研究领域&#34;&gt;&lt;/a&gt;研究领域&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;机器思维：&lt;strong&gt;推理（确定性推理、不确定性推理）和搜索（状态空间搜索、与&amp;#x2F;或树搜索、博弈树搜索）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;机器感知：计算机视觉、模式识别和自然语言处理。&lt;/li&gt;
&lt;li&gt;机器行为：智能控制&amp;#x2F;制造。&lt;/li&gt;
&lt;li&gt;机器学习：符号学习和神经学习。&lt;/li&gt;
&lt;li&gt;计算智能：神经计算、进化计算和模糊计算。&lt;/li&gt;
&lt;li&gt;分布智能：并行求解。&lt;/li&gt;
&lt;li&gt;智能系统：专家系统和智能决策支持系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人工智能的研究现状与发展方向&#34;&gt;&lt;a href=&#34;#人工智能的研究现状与发展方向&#34; class=&#34;headerlink&#34; title=&#34;人工智能的研究现状与发展方向&#34;&gt;&lt;/a&gt;人工智能的研究现状与发展方向&lt;/h2&gt;&lt;h3 id=&#34;研究现状&#34;&gt;&lt;a href=&#34;#研究现状&#34; class=&#34;headerlink&#34; title=&#34;研究现状&#34;&gt;&lt;/a&gt;研究现状&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多学科交叉研究&lt;/li&gt;
&lt;li&gt;多学派和多技术融合研究&lt;/li&gt;
&lt;li&gt;分布智能研究&lt;/li&gt;
&lt;li&gt;群体智能研究&lt;/li&gt;
&lt;li&gt;社会智能研究&lt;/li&gt;
&lt;li&gt;集成智能研究&lt;/li&gt;
&lt;li&gt;认知计算与情感计算研究&lt;/li&gt;
&lt;li&gt;智能系统与智能服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;发展方向&#34;&gt;&lt;a href=&#34;#发展方向&#34; class=&#34;headerlink&#34; title=&#34;发展方向&#34;&gt;&lt;/a&gt;发展方向&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;知识 + 数据 + 算法 + 算力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/StereotypedWriting/OperatingSystem/</guid>
            <title>八股文之操作系统</title>
            <link>https://www.liangmeng.xyz/StereotypedWriting/OperatingSystem/</link>
            <category term="八股文" scheme="https://www.liangmeng.xyz/categories/%E5%85%AB%E8%82%A1%E6%96%87/" />
            <category term="操作系统" scheme="https://www.liangmeng.xyz/categories/%E5%85%AB%E8%82%A1%E6%96%87/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <category term="笔记" scheme="https://www.liangmeng.xyz/tags/%E7%AC%94%E8%AE%B0/" />
            <category term="八股文" scheme="https://www.liangmeng.xyz/tags/%E5%85%AB%E8%82%A1%E6%96%87/" />
            <category term="操作系统" scheme="https://www.liangmeng.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <pubDate>Fri, 15 Apr 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简要概述一下什么是操作系统？&#34;&gt;&lt;a href=&#34;#简要概述一下什么是操作系统？&#34; class=&#34;headerlink&#34; title=&#34;简要概述一下什么是操作系统？&#34;&gt;&lt;/a&gt;简要概述一下什么是操作系统？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;操作系统是&lt;strong&gt;管理计算机硬件和软件资源&lt;/strong&gt;的计算机程序，提供一个计算机用户与计算机硬件系统之间的接口（向上对用户程序提供接口，向下接管硬件资源）。&lt;/li&gt;
&lt;li&gt;操作系统本质上也是一个软件，作为最接近硬件的&lt;strong&gt;系统软件，负责处理器管理、存储器管理、设备驱动管理、文件系统管理和提供用户接口。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;操作系统的分类有哪些？&#34;&gt;&lt;a href=&#34;#操作系统的分类有哪些？&#34; class=&#34;headerlink&#34; title=&#34;操作系统的分类有哪些？&#34;&gt;&lt;/a&gt;操作系统的分类有哪些？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;操作系统一般可分为&lt;strong&gt;批处理操作系统、分时操作系统和实时操作系统。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;若一个操作系统兼顾批处理和分时的功能，则称该系统为&lt;strong&gt;通用操作系统&lt;/strong&gt;，常见的通用操作系统有：Windows、Linux、MacOS等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;什么是内核态和用户态？&#34;&gt;&lt;a href=&#34;#什么是内核态和用户态？&#34; class=&#34;headerlink&#34; title=&#34;什么是内核态和用户态？&#34;&gt;&lt;/a&gt;什么是内核态和用户态？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;为了&lt;strong&gt;避免操作系统和关键数据被用户程序破坏&lt;/strong&gt;，将处理器的执行状态分为内核态和用户态。&lt;/li&gt;
&lt;li&gt;内核态是操作系统管理程序执行时所处的状态，&lt;strong&gt;能够执行包含特权指令在内的一切指令，能够访问系统内所有的存储空间。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用户态是用户程序执行时处理器所处的状态，&lt;strong&gt;不能执行特权指令，只能访问用户地址空间。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用户程序运行在用户态，操作系统内核运行在内核态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;如何实现内核态和用户态的切换？&#34;&gt;&lt;a href=&#34;#如何实现内核态和用户态的切换？&#34; class=&#34;headerlink&#34; title=&#34;如何实现内核态和用户态的切换？&#34;&gt;&lt;/a&gt;如何实现内核态和用户态的切换？&lt;/h1&gt;&lt;p&gt;处理器从用户态切换到内核态的方法有三种：&lt;strong&gt;系统调用、异常、外部中断。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统调用，操作系统的最小功能单位，是操作系统提供的&lt;strong&gt;用户接口，是软中断。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;异常，也叫做&lt;strong&gt;内中断，是由错误引起的&lt;/strong&gt;，如文件损坏、缺页故障等。&lt;/li&gt;
&lt;li&gt;外部中断，通过两根信号线来通知处理器&lt;strong&gt;外设的状态变化，是硬中断。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软中断和硬中断的区别与联系？&#34;&gt;&lt;a href=&#34;#软中断和硬中断的区别与联系？&#34; class=&#34;headerlink&#34; title=&#34;软中断和硬中断的区别与联系？&#34;&gt;&lt;/a&gt;软中断和硬中断的区别与联系？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;硬中断是有&lt;strong&gt;外设硬件&lt;/strong&gt;发出的，&lt;strong&gt;需要有中断控制器&lt;/strong&gt;的参与。其过程是外设侦测到变化，告知中断控制器，中断控制器通过CPU或内存的中断脚通CPU，然后&lt;strong&gt;硬件&lt;/strong&gt;进行程序计数器及堆栈寄存器的现场保存工作（引发上下文切换），并根据中断向量调用&lt;strong&gt;硬中断处理程序&lt;/strong&gt;进行中断处理。&lt;/li&gt;
&lt;li&gt;软中断则通常是由&lt;strong&gt;硬中断处理程序或者进程调度程序等软件程序&lt;/strong&gt;发出的中断信号，&lt;strong&gt;无需中断控制器&lt;/strong&gt;的参与，直接以一个CPU指令之形式指示&lt;strong&gt;CPU&lt;/strong&gt;进行程序计数器及堆栈寄存器之现场保存工作(亦会引发上下文切换)，并调用相应的&lt;strong&gt;软中断处理程序&lt;/strong&gt;进行中断处理(即我们通常所言之系统调用)。&lt;/li&gt;
&lt;li&gt;硬中断直接以硬件的方式引发，处理速度快。软中断以软件指令的方式引发，适合于对响应速度要求不是特别严格的场景。&lt;/li&gt;
&lt;li&gt;硬中断通过设置 CPU 的屏蔽位可进行屏蔽，软中断则由于是指令之方式给出，不能屏蔽（&lt;strong&gt;硬中断可以被屏蔽，软中断不可以被屏蔽&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;硬中断和软中断**均会引起上下文切换(进程&amp;#x2F;线程之切换)**，进程切换的过程是差不多的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;并发和并行的区别？&#34;&gt;&lt;a href=&#34;#并发和并行的区别？&#34; class=&#34;headerlink&#34; title=&#34;并发和并行的区别？&#34;&gt;&lt;/a&gt;并发和并行的区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;并发：宏观上看多个程序在同时运行，比如在单核CPU上的多任务，但微观上看程序的指令是&lt;strong&gt;交替运行&lt;/strong&gt;的，&lt;strong&gt;CPU在任何时刻最多只能同时运行一条指令&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;并行：严格意义上的同时运行，比如多核CPU，程序的指令是&lt;strong&gt;同时运行&lt;/strong&gt;的，&lt;strong&gt;CPU在任何时刻最多能够同时运行多条指令&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;并发&lt;strong&gt;不能&lt;/strong&gt;提高计算机的性能，而并行&lt;strong&gt;能够&lt;/strong&gt;提高计算机的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;什么是进程、线程、协程？&#34;&gt;&lt;a href=&#34;#什么是进程、线程、协程？&#34; class=&#34;headerlink&#34; title=&#34;什么是进程、线程、协程？&#34;&gt;&lt;/a&gt;什么是进程、线程、协程？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;进程：进程是&lt;strong&gt;系统进行资源分配和管理的基本单位&lt;/strong&gt;。每个进程都有自己&lt;strong&gt;独立的内存空间&lt;/strong&gt;，不同进程之间可以进行通信。由于进程比较重量，占据独立的内存，所以进程上下文的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对来说比较安全。&lt;/li&gt;
&lt;li&gt;线程：线程是进程的一个实体，是&lt;strong&gt;CPU调度和分派的基本单位&lt;/strong&gt;，它是比进程更小的能够独立运行的单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（栈、寄存器、程序计数器），但是它可&lt;strong&gt;与同属一个进程的其他线程共享进程所拥有的全部资源&lt;/strong&gt;。线程间的通信主要通过共享内存，上下文的切换开销比较少，但相比进程不够稳定，容易丢失数据。&lt;/li&gt;
&lt;li&gt;协程：协程是&lt;strong&gt;一种用户态的轻量级线程&lt;/strong&gt;，协程的&lt;strong&gt;调度完全由用户控制&lt;/strong&gt;。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方。在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则&lt;strong&gt;基本没有内核切换的开销，可以不加锁地访问全局变量&lt;/strong&gt;，所以上下文的切换非常快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;进程和线程的区别？&#34;&gt;&lt;a href=&#34;#进程和线程的区别？&#34; class=&#34;headerlink&#34; title=&#34;进程和线程的区别？&#34;&gt;&lt;/a&gt;进程和线程的区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个程序至少有一个进程，一个进程至少有一个线程。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从系统调度上看：进程是资源分配和管理的基本单位，线程是CPU调度和分派的基本单位。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从上下文切换上看：线程上下文的切换要比进程上下文的切换快得多。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从系统开销上看：创建或撤销进程时，系统都要为之分配或回收系统资源，如内存空间、I&amp;#x2F;O设备等，而创建或撤销线程时，系统只需要为之分配或回收少量资源，如栈、寄存器等，所以进程切换的开销要远大于线程切换的开销。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;协程和线程的区别？&#34;&gt;&lt;a href=&#34;#协程和线程的区别？&#34; class=&#34;headerlink&#34; title=&#34;协程和线程的区别？&#34;&gt;&lt;/a&gt;协程和线程的区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个线程可以有多个协程，一个进程也可以有多个协程。线程和进程都是同步机制，而协程是异步机制。&lt;/li&gt;
&lt;li&gt;协程是由程序自身控制的，没有线程切换的开销，执行效率非常高。&lt;/li&gt;
&lt;li&gt;协程不需要多线程的锁机制：在协程中控制共享资源不需要加锁，只需要判断状态即可，所以执行效率比多线程高很多。&lt;/li&gt;
&lt;li&gt;线程是抢占式的，而协程是非抢占式的，需要用户释放使用权切换到其他协程，因此同一时间只有一个协程拥有运行权，相当于单线程。&lt;/li&gt;
&lt;li&gt;协程不被操作系统内核管理，而完全由程序控制。线程是被分割的CPU资源，协程是组织好的代码流程，线程是协程的资源。但协程不会直接使用线程，协程直接利用的是执行器来关联任意线程或线程池。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;进程的基本操作有哪些？&#34;&gt;&lt;a href=&#34;#进程的基本操作有哪些？&#34; class=&#34;headerlink&#34; title=&#34;进程的基本操作有哪些？&#34;&gt;&lt;/a&gt;进程的基本操作有哪些？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;fork()创建子进程：&lt;strong&gt;fork()函数调用一次，返回两次，在父进程中返回子进程的PID，而在子进程中返回0&lt;/strong&gt;，可以利用这个特点来判断一个进程是父进程还是子进程。&lt;br&gt;（1）新创建子进程几乎但不完全与父进程相同：子进程得到与父进程用户级&lt;strong&gt;虚拟地址空间相同（但是独立的）一份副本&lt;/strong&gt;，包括代码和数据段、堆、共享库以及用户栈；子进程还获得与父进程所有&lt;strong&gt;打开文件的描述符相同的一份副本&lt;/strong&gt;，这意味着子进程可以读写父进程中任何打开的文件。&lt;br&gt;（2）父进程与子进程最大的区别在于它们的进程ID（PID）不同。&lt;/li&gt;
&lt;li&gt;exec()执行新程序：&lt;strong&gt;exec()函数可以替换当前进程的代码，执行一个新的程序，而不是继续执行当前程序&lt;/strong&gt;。exec()函数可以接受一个参数，这个参数是一个字符串，表示要执行的新程序的路径，如果参数是一个相对路径，那么它会被解析为当前进程的工作目录下的路径。&lt;/li&gt;
&lt;li&gt;wait()等待子进程结束：&lt;strong&gt;wait()函数可以等待子进程结束，并返回子进程的返回值。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;waitpid()等待子进程结束：&lt;strong&gt;waitpid()函数可以等待指定的子进程结束，并返回子进程的返回值。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;exit()退出当前进程：&lt;strong&gt;exit()函数可以退出当前进程，并返回一个整数。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/WrittenExamination/Honor_20220412/</guid>
            <title>荣耀20220412</title>
            <link>https://www.liangmeng.xyz/WrittenExamination/Honor_20220412/</link>
            <category term="企业笔试" scheme="https://www.liangmeng.xyz/categories/WrittenExamination/" />
            <category term="荣耀笔试题" scheme="https://www.liangmeng.xyz/categories/WrittenExamination/%E8%8D%A3%E8%80%80%E7%AC%94%E8%AF%95%E9%A2%98/" />
            <category term="牛客网" scheme="https://www.liangmeng.xyz/tags/%E7%89%9B%E5%AE%A2%E7%BD%91/" />
            <category term="荣耀" scheme="https://www.liangmeng.xyz/tags/%E8%8D%A3%E8%80%80/" />
            <category term="笔试" scheme="https://www.liangmeng.xyz/tags/%E7%AC%94%E8%AF%95/" />
            <category term="算法" scheme="https://www.liangmeng.xyz/tags/%E7%AE%97%E6%B3%95/" />
            <pubDate>Wed, 13 Apr 2022 22:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;笔试一共三道编程题，分数依次为100、200、300，需要按顺序依次完成，只有做完这一道题，才能进入下一道题，无法跳题，使用的是牛客网，允许跳出界面使用自己的IDE。&lt;/p&gt;
&lt;h1 id=&#34;题目一：字符串分割&#34;&gt;&lt;a href=&#34;#题目一：字符串分割&#34; class=&#34;headerlink&#34; title=&#34;题目一：字符串分割&#34;&gt;&lt;/a&gt;题目一：字符串分割&lt;/h1&gt;&lt;p&gt;给定一系列的字符串，字符串的个数为N，每个字符串的长度不超过100。长度小于8的字符串用零补足，长度大于等于8的字符串，按8位位一组的形式不断分割，最后剩余部分用零补足。&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;第一行包括一个整数N和N个原始字符串。&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;第一行包括分割后的字符串按字典序从小到大排列。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;/p&gt;
&lt;p&gt;2 abc 123456789&lt;/p&gt;
&lt;p&gt;输出示例：&lt;/p&gt;
&lt;p&gt;12345678 90000000 abc00000&lt;/p&gt;
&lt;h2 id=&#34;思路：&#34;&gt;&lt;a href=&#34;#思路：&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;这一题比较简单，只需要按照题目的描述做即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;inp = input().split()
n = int(inp[0])
ls = []
for i in range(1, n+1):
    string = inp[i]
    while len(string) &amp;gt; 8:
        ls.append(string[:8])
        string = string[8:]
    ls.append(string + &amp;quot;0&amp;quot;*(8-len(string)))
ls.sort()
print(&amp;quot; &amp;quot;.join(ls))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;题目二：蜜蜂采蜜&#34;&gt;&lt;a href=&#34;#题目二：蜜蜂采蜜&#34; class=&#34;headerlink&#34; title=&#34;题目二：蜜蜂采蜜&#34;&gt;&lt;/a&gt;题目二：蜜蜂采蜜&lt;/h1&gt;&lt;p&gt;平原上，一群蜜蜂离开蜂巢采蜜，要连续采集5片花丛后归巢。&lt;br&gt;已知5片花丛相对蜂巢的坐标，请你帮它们规划一下到访花丛的顺序，以使飞行总距离最短。&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;以蜂巢为平面坐标原点的5片花丛A、B、C、D、E的坐标，坐标值为整数。&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;从出发到返回蜂巢最短路径的长度取整值，取整办法为舍弃小数点后面的值。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;/p&gt;
&lt;p&gt;200 0 200 10 200 50 200 30 200 25&lt;/p&gt;
&lt;p&gt;输出示例：&lt;/p&gt;
&lt;p&gt;456&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;样例中的10个数，相邻两个分别为一组，表示一个花丛相对蜂巢的坐标：A(x1, y1)、B(x2, y2)、C(x3, y3)、D(x4, y4)、E(x5, y5)，分表代表x1,y1,x2,y2,x3,y3,x4,y4,x5,y5。&lt;/p&gt;
&lt;h2 id=&#34;说明：&#34;&gt;&lt;a href=&#34;#说明：&#34; class=&#34;headerlink&#34; title=&#34;说明：&#34;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;本题实际上是一道旅行商问题（TSP），经典的TSP可以描述为：一个商品推销员要去若干个城市推销商品，该推销员从一个城市出发，需要经过所有城市后，回到出发地。应如何选择行进路线，以使总的行程最短。从图论的角度来看，该问题实质是在一个带权完全无向图中，找一个权值最小的Hamilton回路。由于该问题的可行解是所有顶点的全排列，随着顶点数的增加，会产生组合爆炸，它是一个NP完全问题。&lt;/p&gt;
&lt;p&gt;常见的解法有暴力破解、深度优先遍历，动态规划等。&lt;/p&gt;
&lt;p&gt;高级的解法有模拟退火算法，遗传算法，粒子群算法、神经网络等&lt;/p&gt;
&lt;h2 id=&#34;思路一：&#34;&gt;&lt;a href=&#34;#思路一：&#34; class=&#34;headerlink&#34; title=&#34;思路一：&#34;&gt;&lt;/a&gt;思路一：&lt;/h2&gt;&lt;p&gt;暴力破解，求出五片花丛所有可能的到访顺序（全排列），取飞行总距离最短的路径即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from math import sqrt, floor
from xmlrpc.client import MAXINT
inp = list(map(int, input().split()))
mincost = MAXINT
ls = [(inp[i*2], inp[i*2+1]) for i in range(5)]
matrix = [[0 for i in range(5)] for j in range(5)]
for i in range(5):
    for j in range(5):
        matrix[i][j] = sqrt((ls[i][0]-ls[j][0])**2 + (ls[i][1]-ls[j][1])**2)

def Perm(nums, begin, end):
    global mincost, ls, matrix, path
    if begin &amp;gt;= end:
        cost = 0
        for i in range(4):
            cost += matrix[nums[i]][nums[i+1]]
        cost = cost + sqrt((ls[nums[0]][0]**2) + (ls[nums[0]][1]**2)) + sqrt((ls[nums[-1]][0]**2) + (ls[nums[-1]][1]**2))
        if cost &amp;lt; mincost:
            path = nums
            mincost = cost
        return
    else:
        for num in range(begin, end):
            nums[begin], nums[num] = nums[num], nums[begin]
            Perm(nums, begin+1, end)
            nums[begin], nums[num] = nums[num], nums[begin]

nums = [i for i in range(5)]
Perm(nums, 0, len(nums))
print(floor(mincost))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;思路二：&#34;&gt;&lt;a href=&#34;#思路二：&#34; class=&#34;headerlink&#34; title=&#34;思路二：&#34;&gt;&lt;/a&gt;思路二：&lt;/h2&gt;&lt;p&gt;采用深度优先遍历来寻找最短路径，并在遍历过程中通过不断剪枝来简化求解过程，广义上来讲也是全排列的一种。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from math import sqrt, floor
from xmlrpc.client import MAXINT

def DFS(u, cnt, cost):
    global mincost, matrix, visited
    if cost &amp;gt; mincost:
        return
    if cnt == 6:
        cost = cost + sqrt((ls[u][0]**2) + (ls[u][1]**2)) + sqrt((ls[0][0]**2) + (ls[0][1]**2))
        if cost &amp;lt; mincost:
            mincost = cost
    visited[u] = 1
    for v in range(6):
        if not visited[v]:
            DFS(v, cnt+1, cost + matrix[u][v])
    visited[u] = 0

inp = list(map(int, input().split()))
mincost = MAXINT
visited = [0 for i in range(6)]
ls = [(inp[i*2], inp[i*2+1]) for i in range(5)]
ls.insert(0, (0, 0))
matrix = [[0 for i in range(6)] for j in range(6)]
for i in range(6):
    for j in range(6):
        matrix[i][j] = sqrt((ls[i][0]-ls[j][0])**2 + (ls[i][1]-ls[j][1])**2)

DFS(0, 1, 0)
print(floor(mincost))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;惨痛经历&#34;&gt;&lt;a href=&#34;#惨痛经历&#34; class=&#34;headerlink&#34; title=&#34;惨痛经历&#34;&gt;&lt;/a&gt;惨痛经历&lt;/h1&gt;&lt;p&gt;因为邮件上写着系统开放时间为18:00-21:00（不同于美团写着笔试时间为16:00-18:00），所以我习惯性得以为笔试时间为三个小时，当我悠哉游哉地把第二题做完返回系统时，笔试已经结束了，因此只提交了第一题，直接人麻了。。。所以，各位小伙伴无论是在比赛还是在测试，一定先看好时间！！！当然，对于秒AK的大佬来说，时间根本不是事，那就当我没说。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/WrittenExamination/Honor_20220412/Honor_20220412/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/WrittenExamination/MeiTuan_20220409/</guid>
            <title>美团20220409</title>
            <link>https://www.liangmeng.xyz/WrittenExamination/MeiTuan_20220409/</link>
            <category term="企业笔试" scheme="https://www.liangmeng.xyz/categories/WrittenExamination/" />
            <category term="美团笔试题" scheme="https://www.liangmeng.xyz/categories/WrittenExamination/%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95%E9%A2%98/" />
            <category term="笔试" scheme="https://www.liangmeng.xyz/tags/%E7%AC%94%E8%AF%95/" />
            <category term="算法" scheme="https://www.liangmeng.xyz/tags/%E7%AE%97%E6%B3%95/" />
            <category term="赛码网" scheme="https://www.liangmeng.xyz/tags/%E8%B5%9B%E7%A0%81%E7%BD%91/" />
            <category term="美团" scheme="https://www.liangmeng.xyz/tags/%E7%BE%8E%E5%9B%A2/" />
            <pubDate>Sun, 10 Apr 2022 18:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;笔试一共五道编程题（四+一），一为专项编程题，估计不同岗位有题目不一样，使用的是赛码网，允许跳出界面使用自己的IDE。&lt;/p&gt;
&lt;p&gt;在此感谢&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlYm9ydHQ/dHlwZT1ibG9n&#34;&gt;筱羊冰冰&lt;/span&gt;提供的部分题目及题解。&lt;/p&gt;
&lt;h1 id=&#34;题目一：数圈游戏&#34;&gt;&lt;a href=&#34;#题目一：数圈游戏&#34; class=&#34;headerlink&#34; title=&#34;题目一：数圈游戏&#34;&gt;&lt;/a&gt;题目一：数圈游戏&lt;/h1&gt;&lt;p&gt;给定一个整数n，计算该整数含有的圆圈个数。数字0-9对应的圈数如下：&lt;br&gt;0: 1&lt;br&gt;1: 0&lt;br&gt;2: 0&lt;br&gt;3: 0&lt;br&gt;4: 0&lt;br&gt;5: 0&lt;br&gt;6: 1&lt;br&gt;7: 0&lt;br&gt;8: 2&lt;br&gt;9: 1&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行为一个整数n，表示数圈游戏的数字。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;60498&lt;br&gt;输出示例：&lt;br&gt;5&lt;/p&gt;
&lt;p&gt;限制：&lt;br&gt;80%的测试用例：n&amp;lt;&amp;#x3D;10000&lt;br&gt;100%的测试用例：n&amp;lt;&amp;#x3D;100000000&lt;/p&gt;
&lt;h2 id=&#34;思路：&#34;&gt;&lt;a href=&#34;#思路：&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;该题较为简单，一次遍历累加即可。&lt;/p&gt;
&lt;h1 id=&#34;题目二：士兵排队&#34;&gt;&lt;a href=&#34;#题目二：士兵排队&#34; class=&#34;headerlink&#34; title=&#34;题目二：士兵排队&#34;&gt;&lt;/a&gt;题目二：士兵排队&lt;/h1&gt;&lt;p&gt;给定一定数量的士兵，将士兵按照身高从小到大排列，身高相同者按照姓名的字典序从小到大排列。&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行为一个整数n，表示士兵的数量。&lt;br&gt;第二行为n个士兵的身高，单位为cm。&lt;br&gt;第三行为n个士兵的姓名。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;4&lt;br&gt;176 170 176 176&lt;br&gt;bamma tom alpha beta&lt;/p&gt;
&lt;p&gt;输出示例：&lt;br&gt;tom alpha bamma beta&lt;/p&gt;
&lt;p&gt;限制：&lt;br&gt;士兵身高 hi &amp;lt;&amp;#x3D; 300&lt;br&gt;士兵姓名长度 ni &amp;lt;&amp;#x3D; 20&lt;/p&gt;
&lt;h2 id=&#34;思路一：&#34;&gt;&lt;a href=&#34;#思路一：&#34; class=&#34;headerlink&#34; title=&#34;思路一：&#34;&gt;&lt;/a&gt;思路一：&lt;/h2&gt;&lt;p&gt;将每一个人的身高和名字按照 (身高，名字) 的格式存储，然后进行两次排序，先按照身高排序，再按照名字排序即可。（利用了python排序算法的稳定性！）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n = int(input())
heights = list(map(str, input().split()))
names = list(map(str, input().split()))
ls = []
for i in range(n):
    ls.append((heights[i], names[i]))
# lambda函数指定排序规则
ls.sort(key=lambda x:x[1])
ls.sort(key=lambda x:x[0])
for i in range(n):
    print(ls[i][1], end=&amp;#39; &amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;思路二：&#34;&gt;&lt;a href=&#34;#思路二：&#34; class=&#34;headerlink&#34; title=&#34;思路二：&#34;&gt;&lt;/a&gt;思路二：&lt;/h2&gt;&lt;p&gt;因为身高的限制为 hi &amp;lt;&amp;#x3D; 300，所以身高最高只能为三位数，那么我们可以把所有身高都通过补前置零的方式化为三位数，然后再与名字拼接成一个字符串，这样只需要一次排序就能够得出结果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n = int(input())
heights = list(map(str, input().split()))
names = list(map(str, input().split()))
for i in range(n):
    # str.zfill()自动填充
    heights[i] = heights[i].zfill(3) + names[i]
heights.sort()
for i in range(n):
    print(heights[i][3:], end=&amp;#39; &amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;题目三：路径搜索&#34;&gt;&lt;a href=&#34;#题目三：路径搜索&#34; class=&#34;headerlink&#34; title=&#34;题目三：路径搜索&#34;&gt;&lt;/a&gt;题目三：路径搜索&lt;/h1&gt;&lt;p&gt;给定一个地图，询问是否存在一条从起点到终点的直接通路。注意，通路是双向的。&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行包括两个整数n和m，分别表示地图上点的数量和通路的数量。&lt;br&gt;第二行包括m个整数，表示地图上通路的一端。&lt;br&gt;第三行包括m个整数，表示地图上通路的另一端。&lt;br&gt;第四行包括k个整数，表示询问的次数。&lt;br&gt;接下来的k行每行包括两个整数，分别表示起点和终点。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;4 5&lt;br&gt;1 2 1 3 1&lt;br&gt;2 3 3 4 4&lt;br&gt;4&lt;br&gt;1 3&lt;br&gt;2 4&lt;br&gt;2 1&lt;br&gt;3 2&lt;/p&gt;
&lt;p&gt;输出示例：&lt;br&gt;Yes&lt;br&gt;No&lt;br&gt;Yes&lt;br&gt;Yes&lt;/p&gt;
&lt;h2 id=&#34;思路：-1&#34;&gt;&lt;a href=&#34;#思路：-1&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;筱羊冰冰：上来就看错了，然后花了好久写了类似并查集的东西，然后用不上……&lt;br&gt;（果然大佬就是不一样，上来直接手撕并查集）&lt;br&gt;这道题只需要检查有无指定通路就行了，不过要特别注意查询范围，因为通路是双向的而且要求的是直接通路。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n, m = map(int, input().split())
lsu = list(map(int, input().split()))
lsv = list(map(int, input().split()))
k = int(input())
ways = set((lsu[i], lsv[i]) for i in range(m))
out = []
for _ in range(k):
    u, v = map(int, input().split())
    if (u, v) in ways or (v, u) in ways:
        out.append(&amp;#39;Yes&amp;#39;)
    else:
        out.append(&amp;#39;No&amp;#39;)
print(&amp;#39;\n&amp;#39;.join(out))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;题目四：井字棋&#34;&gt;&lt;a href=&#34;#题目四：井字棋&#34; class=&#34;headerlink&#34; title=&#34;题目四：井字棋&#34;&gt;&lt;/a&gt;题目四：井字棋&lt;/h1&gt;&lt;p&gt;给定一个2x2的棋盘和n中不同的颜色，要求每行每列均不能出现相同的颜色，计算总共有多少种填充方案。&lt;/p&gt;
&lt;p&gt;输入：&lt;br&gt;第一行包括一个整数n，表示颜色的数量。&lt;/p&gt;
&lt;p&gt;输出：&lt;br&gt;输出一个整数，表示有多少种填充方案。&lt;/p&gt;
&lt;p&gt;输入示例：&lt;br&gt;2&lt;/p&gt;
&lt;p&gt;输出示例：&lt;br&gt;2&lt;/p&gt;
&lt;p&gt;限制：&lt;br&gt;颜色的种类n &amp;lt;&amp;#x3D; 10&lt;/p&gt;
&lt;h2 id=&#34;思路：-2&#34;&gt;&lt;a href=&#34;#思路：-2&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;筱羊冰冰：有一说一，感觉就属这个题有意思吧。我当时看完，感觉就有一点像排列组合(业余玩家，不太清楚具体的类型)。&lt;br&gt;n种颜色，如果颜色足够(指大于四种)，我们其实也只能取出四种来操作，所以只需要一个&lt;br&gt;$$&lt;br&gt;C_n^4&lt;br&gt;$$&lt;br&gt;所以我们其实只需要考虑四种以内的情况。&lt;/p&gt;
&lt;p&gt;两种颜色：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;和&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;三种颜色：&lt;br&gt;我们自然可以想到，拿两种颜色就可以填上面的两种&lt;br&gt;$$&lt;br&gt;C_3^2 * 2&lt;br&gt;$$&lt;br&gt;然后，如果是三种颜色都要，有12种，肯定是有一个重复的，那么对角线重复就有两种情况，剩下的其实就是将三个数字填入三个位置，&lt;br&gt;$$&lt;br&gt;A_3^3&lt;br&gt;$$&lt;br&gt;就是6 + 6*2 &amp;#x3D; 18。&lt;/p&gt;
&lt;p&gt;到这里其实就应该明白了，我们只需要知道 i 种颜色有多少种即可，因为 i &amp;#x3D; 2, 3, 4，我们完全可以直接写出来，剩下的就是一个组合问题，再给出一个阶乘列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# ls[i]为i种颜色都使用，对应的可能数
# 四种颜色忘了说了，不过就是个A44
ls = [0, 0, 2, 12, 24]
# ls_jc[i] = i!
ls_jc = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
ret = 0
n = int(input())
if n &amp;lt;= 1:
    # 他在系统公告中，提示了0的问题
    ret = 0
elif n &amp;lt;= 4:
    for i in range(2, n+1):
        ret += ls[i] * ls_jc[n] // (ls_jc[i] * ls_jc[n-i])
        # 还有一个限制就是输出大小，这里原题目是有的
        ret %= 1000000007
else:
    for i in range(2, 5):
        ret += ls[i] * ls_jc[n] // (ls_jc[i] * ls_jc[n-i])
        ret %= 1000000007
print(ret)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;小插曲：&#34;&gt;&lt;a href=&#34;#小插曲：&#34; class=&#34;headerlink&#34; title=&#34;小插曲：&#34;&gt;&lt;/a&gt;小插曲：&lt;/h2&gt;&lt;p&gt;当时有一块写错了，然后跑出来只有27%，自己就去看了一下范围是小于等于十，那么案例至少有10个吧。&lt;br&gt;然后自己因为有边界检测，负数、0、1、2都能正确，那么至少对三个，反推出案例应该是11个，那么就是3往上有问题，所以将矛头对准了ls[3]，果然是算少了，改成12，啪的一下，很快就过了……&lt;/p&gt;
&lt;h1 id=&#34;题目五：堆积木&#34;&gt;&lt;a href=&#34;#题目五：堆积木&#34; class=&#34;headerlink&#34; title=&#34;题目五：堆积木&#34;&gt;&lt;/a&gt;题目五：堆积木&lt;/h1&gt;&lt;p&gt;给定一个已有的字符串和一个目标字符串，可以从右边删除一个字符，也可以往左边插入一个字符，删除和插入操作的次数没有限制，问最少操作多少次可以使已有字符串变成目标字符串。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;输入&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;原串长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 5 3 4 6&lt;/td&gt;
&lt;td&gt;原串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;目标串长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 1 5 3 4&lt;/td&gt;
&lt;td&gt;目标串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;思路：-3&#34;&gt;&lt;a href=&#34;#思路：-3&#34; class=&#34;headerlink&#34; title=&#34;思路：&#34;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;筱羊冰冰：这个题，其实看明白了就没那么难，其实就是找最长公共子序列。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from collections import deque
l_old = int(input())
old = input().split()
l_new = int(input())
new = input().split()
length = 0
# 这里没啥原因，就是deque的头插尾插都比较快，O(1)的
s1, s2 = deque(), deque()
judge = 0
while True:
    s1.append(old[length])
    s2.appendleft(new[-length-1])
    length += 1
    if s1 == s2:
        judge = 1
        break
    elif length == min(l_old, l_new):
        break
if judge:
    print(l_old+l_new - length*2)
else:
    print(l_old+l_new)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;重大失误&#34;&gt;&lt;a href=&#34;#重大失误&#34; class=&#34;headerlink&#34; title=&#34;重大失误&#34;&gt;&lt;/a&gt;重大失误&lt;/h2&gt;&lt;p&gt;上面的代码其实没考虑，如果有多对子串相同，要找出最长的……&lt;br&gt;不过感觉测试案例比较拉，所以显示还是ac了的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/WrittenExamination/MeiTuan_20220409/MeiTuan_20220409/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/LeetCode/%E9%9A%BE%E5%BA%A6%E7%AE%80%E5%8D%95/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
            <title>1-两数之和</title>
            <link>https://www.liangmeng.xyz/LeetCode/%E9%9A%BE%E5%BA%A6%E7%AE%80%E5%8D%95/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
            <category term="力扣题库" scheme="https://www.liangmeng.xyz/categories/LeetCode/" />
            <category term="难度简单" scheme="https://www.liangmeng.xyz/categories/LeetCode/%E9%9A%BE%E5%BA%A6%E7%AE%80%E5%8D%95/" />
            <category term="两数之和" scheme="https://www.liangmeng.xyz/categories/LeetCode/%E9%9A%BE%E5%BA%A6%E7%AE%80%E5%8D%95/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/" />
            <pubDate>Sun, 10 Apr 2022 16:52:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。&lt;/p&gt;
&lt;p&gt;你可以按任意顺序返回答案。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a href=&#34;#实例&#34; class=&#34;headerlink&#34; title=&#34;实例&#34;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;h3 id=&#34;实例1&#34;&gt;&lt;a href=&#34;#实例1&#34; class=&#34;headerlink&#34; title=&#34;实例1&#34;&gt;&lt;/a&gt;实例1&lt;/h3&gt;&lt;p&gt;输入：nums &amp;#x3D; [2,7,11,15], target &amp;#x3D; 9&lt;br&gt;输出：[0,1]&lt;br&gt;解释：因为 nums[0] + nums[1] &amp;#x3D;&amp;#x3D; 9 ，返回 [0, 1] 。&lt;/p&gt;
&lt;h3 id=&#34;实例2&#34;&gt;&lt;a href=&#34;#实例2&#34; class=&#34;headerlink&#34; title=&#34;实例2&#34;&gt;&lt;/a&gt;实例2&lt;/h3&gt;&lt;p&gt;输入：nums &amp;#x3D; [3,2,4], target &amp;#x3D; 6&lt;br&gt;输出：[1,2]&lt;/p&gt;
&lt;h3 id=&#34;实例3&#34;&gt;&lt;a href=&#34;#实例3&#34; class=&#34;headerlink&#34; title=&#34;实例3&#34;&gt;&lt;/a&gt;实例3&lt;/h3&gt;&lt;p&gt;输入：nums &amp;#x3D; [3,3], target &amp;#x3D; 6&lt;br&gt;输出：[0,1]&lt;/p&gt;
&lt;h1 id=&#34;提示&#34;&gt;&lt;a href=&#34;#提示&#34; class=&#34;headerlink&#34; title=&#34;提示&#34;&gt;&lt;/a&gt;提示&lt;/h1&gt;&lt;p&gt;（1）2 &amp;lt;&amp;#x3D; nums.length &amp;lt;&amp;#x3D; 104&lt;br&gt;（2）-109 &amp;lt;&amp;#x3D; nums[i] &amp;lt;&amp;#x3D; 109&lt;br&gt;（3）-109 &amp;lt;&amp;#x3D; target &amp;lt;&amp;#x3D; 109&lt;br&gt;（4）只会存在一个有效答案&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
            <title>学生成绩管理系统</title>
            <link>https://www.liangmeng.xyz/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
            <category term="C/CPP语言" scheme="https://www.liangmeng.xyz/categories/CCPP/" />
            <category term="学生成绩管理系统" scheme="https://www.liangmeng.xyz/categories/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/" />
            <category term="C语言" scheme="https://www.liangmeng.xyz/tags/C%E8%AF%AD%E8%A8%80/" />
            <category term="实验" scheme="https://www.liangmeng.xyz/tags/%E5%AE%9E%E9%AA%8C/" />
            <pubDate>Thu, 07 Apr 2022 14:43:36 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;相信很多同仁在大学学习编程的时候都会被老师要求动手敲出一个学生成绩管理系统或图书馆管理系统之类的程序吧。&lt;br&gt;&lt;strong&gt;不得不说，这个程序简直就是大多数初学者的恶梦，毕竟它的内容涉及到了整一个学期学到的所有知识。&lt;/strong&gt;&lt;br&gt;&lt;del&gt;况且，对于像我这种在大学前从来没接触过编程，也不知道代码是啥的绝对萌新来说，更是一次史诗级的灾难。&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你见过凌晨四点的教学楼吗？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;我见过，那时候我刚从里面出来。&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话不多说，说多了都是泪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实验要求我就不赘述了吧，无非就是录成绩、各种方式查成绩、名次排序、计算均分等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;还是直接上代码吧，大家都是爽快人！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define N 30
#define M 10
#define X 6

/*学生信息结构体，包括学号，姓名，各学科分数，总分，均分*/
typedef struct student
&amp;#123;
  long number;
  char name[M];
  int score[X];
  int stutotal;
  float stuaverage;
&amp;#125;STUDENT;/*对学生信息结构体取别名“STUDENT”*/

/*实现两个结构体的交换，注意，结构体是可以直接赋值的*/
void Swap(STUDENT *a,STUDENT *b)
&amp;#123;
  STUDENT temp;
  temp=*a;
  *a=*b;
  *b=temp;
&amp;#125;

/*由用户用键盘依次输入学生信息*/
void Input(STUDENT stu[],int n,int x)
&amp;#123;
    printf(&amp;quot;\n\n&amp;quot;);
    int i,j;
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        printf(&amp;quot;Number:\t&amp;quot;);
        scanf(&amp;quot;%ld&amp;quot;,&amp;amp;stu[i].number);
        getchar();/*清除缓冲区中的回车字符，防止被读入学生姓名*/
        printf(&amp;quot;Name:\t&amp;quot;);
        gets(stu[i].name);
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            do&amp;#123;
                printf(&amp;quot;Score %d:&amp;quot;,j+1);
                scanf(&amp;quot;%d&amp;quot;,&amp;amp;stu[i].score[j]);
            &amp;#125;while(stu[i].score[j]&amp;lt;0||stu[i].score[j]&amp;gt;100);/*防止录入异常成绩*/
        &amp;#125;
    &amp;#125;
&amp;#125;

/*计算各学科的总分和均分*/
void SubCalculate(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&amp;#123;
    int i,j;
    for(j=0;j&amp;lt;x;j++)
    &amp;#123;
        subtotal[j]=0;/*学科总成绩初始化为0*/
        for(i=0;i&amp;lt;n;i++)
        &amp;#123;
            subtotal[j]=subtotal[j]+stu[i].score[j];
        &amp;#125;
        subaverage[j]=(float)subtotal[j]/n;/*将整型数强转为浮点数后进行浮点数运算，确保数据的准确性*/
        printf(&amp;quot;(subject %d)Total:%d\t\tAverage:%6.2f\n&amp;quot;,j+1,subtotal[j],subaverage[j]);
    &amp;#125;
 &amp;#125;

/*计算每个学生的总分和均分*/
void StuCalculate(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j;
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        stu[i].stutotal=0;/*学生总成绩初始化为0*/
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            stu[i].stutotal=stu[i].stutotal+stu[i].score[j];
        &amp;#125;
        stu[i].stuaverage=(float)stu[i].stutotal/x;/*将整型数强转为浮点数后进行浮点数运算，确保数据的准确性*/
        printf(&amp;quot;(student %d)Total:%d\t\tAverage:%6.2f\n&amp;quot;,i+1,stu[i].stutotal,stu[i].stuaverage);
    &amp;#125;
&amp;#125;

/*将学生成绩按从高到低的顺序排列*/
void SortStuScoreUpdown(STUDENT stu[],int n)
&amp;#123;
    for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (stu[i].stutotal &amp;lt; stu[j].stutotal) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的总成绩小于后面的学生的总成绩，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*将学生成绩按从低到高的顺序排列*/
void SortStuScoreDownup(STUDENT stu[],int n)
&amp;#123;
        for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (stu[i].stutotal &amp;gt; stu[j].stutotal) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的总成绩大于后面的学生的总成绩，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*将学生学号按从小到大排列*/
void SortNumberDownup(STUDENT stu[],int n)
&amp;#123;
        for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (stu[i].number &amp;gt; stu[j].number) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的学号大于后面的学生的学号，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*将学生姓名按字典顺序排列*/
void SortName(STUDENT stu[],int n)
&amp;#123;
    for (int i = 0; i &amp;lt; n - 1; ++i)
    &amp;#123;
        for (int j = i + 1; j &amp;lt; n; ++j)
        &amp;#123;
            if (strcmp(stu[i].name,stu[j].name)&amp;gt;0) Swap(&amp;amp;stu[i], &amp;amp;stu[j]);/*如果前面的学生的字母序位大于后面的学生的字母序位，则交换两个学生信息结构体位置*/
        &amp;#125;
      &amp;#125;
&amp;#125;

/*按学号查找学生并输出学生信息*/
void SearchNumber(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j,flag=0;/*未找到学生时flag初始化为0*/
    long temp;
    printf(&amp;quot;Input the number:\t&amp;quot;);
    scanf(&amp;quot;%ld&amp;quot;,&amp;amp;temp);
    getchar();
    SortStuScoreUpdown(stu,n);/*将学生按照成绩从高到低排序以获得学生的排名情况*/
    for(i=0;i&amp;lt;n;i++)/*将录入的学生学号与待查学号进行一一比对*/
    &amp;#123;
        if(stu[i].number==temp)/*找到与待查学号一致的学号*/
        &amp;#123;
            flag=1;/*找到学号对应的学生时，flag被赋值为1*/
            printf(&amp;quot;Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n&amp;quot;);
            printf(&amp;quot;%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,i+1,stu[i].stutotal,stu[i].stuaverage);
            for(j=0;j&amp;lt;x;j++)
            &amp;#123;
                printf(&amp;quot;%4d&amp;quot;,stu[i].score[j]);
            &amp;#125;
            printf(&amp;quot;\n&amp;quot;);
            break;
        &amp;#125;
    &amp;#125;
    if(flag==0)/*未找到学号对应学生时，flag的值仍为0*/
    &amp;#123;
        printf(&amp;quot;\nNot find!\n&amp;quot;);
    &amp;#125;
&amp;#125;

/*按姓名查找学生并输出学生信息*/
void SearchName(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j,flag=0;/*未找到学生时flag初始化为0*/
    char tep[M];
    printf(&amp;quot;Input the name:\t&amp;quot;);
  scanf(&amp;quot; %s&amp;quot;,tep);
    SortStuScoreUpdown(stu,n);/*将学生按照成绩从高到低排序以获得学生的排名情况*/
    for(i=0;i&amp;lt;n;i++)/*将录入的学生姓名与待查姓名进行一一比对*/
    &amp;#123;
        if(strcmp(stu[i].name,tep)==0)/*找到与待查姓名字母顺序完全一致的姓名*/
        &amp;#123;
            flag=1;/*找到学号对应的学生时，flag被赋值为1*/
            printf(&amp;quot;Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n&amp;quot;);
            printf(&amp;quot;%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,i+1,stu[i].stutotal,stu[i].stuaverage);
            for(j=0;j&amp;lt;x;j++)
            &amp;#123;
                printf(&amp;quot;%4d&amp;quot;,stu[i].score[j]);
            &amp;#125;
            printf(&amp;quot;\n&amp;quot;);
            break;
        &amp;#125;
    &amp;#125;
    if(flag==0)/*未找到学号对应学生时，flag的值仍为0*/
    &amp;#123;
        printf(&amp;quot;\nNot find!\n&amp;quot;);
    &amp;#125;
&amp;#125;

/*统计并打印出各学科各阶段人数及占比*/
void Analysis(STUDENT stu[],int n,int x)
&amp;#123;
    int a[N]=&amp;#123;0&amp;#125;,b[N]=&amp;#123;0&amp;#125;,c[N]=&amp;#123;0&amp;#125;,d[N]=&amp;#123;0&amp;#125;,e[N]=&amp;#123;0&amp;#125;;
    int i,j;
    for(j=0;j&amp;lt;x;j++)
    &amp;#123;
        for(i=0;i&amp;lt;n;i++)
        &amp;#123;
            if    (100&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;90&amp;lt;=stu[i].score[j])    a[j]++;
            else if(89&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;80&amp;lt;=stu[i].score[j])    b[j]++;
            else if(79&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;70&amp;lt;=stu[i].score[j])    c[j]++;
            else if(69&amp;gt;=stu[i].score[j]&amp;amp;&amp;amp;60&amp;lt;=stu[i].score[j])    d[j]++;
            else                                                           e[j]++;
        &amp;#125;
    &amp;#125;
    for(j=0;j&amp;lt;x;j++)
    &amp;#123;
        printf(&amp;quot;Subject No.%d:\n&amp;quot;,j+1);
        printf(&amp;quot;Excellent:%d\tpercent:%.2f%%\n&amp;quot;,a[j],(float)100*a[j]/n);
        printf(&amp;quot;Good:     %d\tpercent:%.2f%%\n&amp;quot;,b[j],(float)100*b[j]/n);
        printf(&amp;quot;Medium:   %d\tpercent:%.2f%%\n&amp;quot;,c[j],(float)100*c[j]/n);
        printf(&amp;quot;Pass:     %d\tpercent:%.2f%%\n&amp;quot;,d[j],(float)100*d[j]/n);
        printf(&amp;quot;Failed:   %d\tpercent:%.2f%%\n&amp;quot;,e[j],(float)100*e[j]/n);
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
    printf(&amp;quot;\n&amp;quot;);
&amp;#125;

/*输出各学生的学生信息及各课程的总分和均分*/
void List(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&amp;#123;
    int i,j;
    printf(&amp;quot;Name:     \tNumber:      \tTotalscore:\tAveragescore:\tSub 1:Sub 2:Sub 3:Sub 4:Sub 5:Sub 6:\n&amp;quot;);
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        printf(&amp;quot;%-10s\t%-13ld\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            printf(&amp;quot;%6d&amp;quot;,stu[i].score[j]);
        &amp;#125;
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
     printf(&amp;quot;          \t             \t           \t           \t&amp;quot;);
     for(j=0;j&amp;lt;x;j++)
     &amp;#123;
      printf(&amp;quot;%6d&amp;quot;,subtotal[j]);
     &amp;#125;
      printf(&amp;quot;\n&amp;quot;);
      printf(&amp;quot;         \t             \t           \t          \t&amp;quot;);
      for(j=0;j&amp;lt;x;j++)
      &amp;#123;
          printf(&amp;quot;%6.2f&amp;quot;,subaverage[j]);
      &amp;#125;
&amp;#125;

/*打印姓名，学号，总分，均分及各学科的分数*/
void Print1(STUDENT stu[],int n,int x)
&amp;#123;
    int i,j;
    printf(&amp;quot;Name:     \tNumber:\t      Totalscore:\tAveragescore:\tSubjectscore:\n&amp;quot;);
    for(i=0;i&amp;lt;n;i++)
    &amp;#123;
        printf(&amp;quot;%-10s\t%-13ld\t%9d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
        for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            printf(&amp;quot;%-6d&amp;quot;,stu[i].score[j]);
        &amp;#125;
        printf(&amp;quot;\n&amp;quot;);
    &amp;#125;
&amp;#125;

/*打印各课程的总分和均分*/
void Print2(int subtotal[],float subaverage[],int x)
&amp;#123;
  int i;
  for(i=0;i&amp;lt;x;i++)
  &amp;#123;
    printf(&amp;quot;subtotal No.%d: %-6d\tsubaverage No.%d: %-6.2f\n&amp;quot;,i+1,subtotal[i],i+1,subaverage[i]);
  &amp;#125;
&amp;#125;

/*将信息写入文件并保存*/
void WritetoFile(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&amp;#123;
  FILE *fp;
  int i,j;
  if((fp=fopen(&amp;quot;score.txt&amp;quot;,&amp;quot;w&amp;quot;))==NULL)/*检验文件是否打开成功*/
  &amp;#123;
    printf(&amp;quot;Failure to open score.txt!\n&amp;quot;);
    exit(0);
  &amp;#125;
  fprintf(fp,&amp;quot;%d\t%d\n&amp;quot;,n,x);
  for(i=0;i&amp;lt;n;i++)
  &amp;#123;
    fprintf(fp,&amp;quot;%-10s\t%-13ld\t%11d\t%13.2f\t&amp;quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
     for(j=0;j&amp;lt;x;j++)
        &amp;#123;
            fprintf(fp,&amp;quot;%-6d\n&amp;quot;,stu[i].score[j]);
        &amp;#125;
  &amp;#125;
  for(j=0;j&amp;lt;x;j++)
  &amp;#123;
      fprintf(fp,&amp;quot;%d\t%f\n&amp;quot;,subtotal[j],subaverage[j]);
  &amp;#125;
  fclose(fp);
&amp;#125;

/*从文件中读取出信息*/
void ReadfromFile(STUDENT stu[],int subtotal[],float subaverage[],int *n,int *x)
&amp;#123;
  FILE *fp;
  int i,j;
  if((fp=fopen(&amp;quot;score.txt&amp;quot;,&amp;quot;r&amp;quot;))==NULL)/*检验文件是否打开成功*/
  &amp;#123;
    printf(&amp;quot;Failure to open score.txt!\n&amp;quot;);
    exit(0);
  &amp;#125;
   fscanf(fp,&amp;quot;%d\t%d\n&amp;quot;,n,x);
  for(i=0;i&amp;lt;*n;i++)
    &amp;#123;
      fscanf(fp,&amp;quot;%10s&amp;quot;,stu[i].name);
      fscanf(fp,&amp;quot;%13ld&amp;quot;,&amp;amp;stu[i].number);
      fscanf(fp,&amp;quot;%11d&amp;quot;,&amp;amp;stu[i].stutotal);
      fscanf(fp,&amp;quot;%f&amp;quot;,&amp;amp;stu[i].stuaverage);
      for(j=0;j&amp;lt;*x;j++)
      &amp;#123;
        fscanf(fp,&amp;quot;%6d&amp;quot;,&amp;amp;stu[i].score[j]);
      &amp;#125;
    &amp;#125;
    for(j=0;j&amp;lt;*x;j++)
    &amp;#123;
        fscanf(fp,&amp;quot;%d\t%f&amp;quot;,&amp;amp;subtotal[j],&amp;amp;subaverage[j]);
    &amp;#125;
    fclose(fp);
&amp;#125;

int main()
&amp;#123;
    int m,n,x;
    int subtotal[X];
    float subaverage[X];
    STUDENT stu[N];
    do&amp;#123;
        printf(&amp;quot;Input the total number of students:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);
        printf(&amp;quot;Input the total number of subjects:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);
    &amp;#125;while(n&amp;lt;=0||n&amp;gt;30||x&amp;lt;1||x&amp;gt;6);/*检测学生总人数及学科总数是否符合要求*/
 KG:printf(&amp;quot;\n\n1.Input record\n2.Calculate total and average score of every course\n3.Calculate total and average score of every student\n&amp;quot;);
      printf(&amp;quot;4.Sort in descending order by total score of every student\n5.Sort in ascending order by total score of every student\n&amp;quot;);
      printf(&amp;quot;6.Sort in ascending order by number\n7.Sort in dictionary order by name\n8.Search by number\n&amp;quot;);
      printf(&amp;quot;9.Search by name\n10.Statistic analysis for every course\n11.List record\n&amp;quot;);
      printf(&amp;quot;12.Write to a file\n13.Read from a file\n0.Exit\n\nPlease enter your choice:&amp;quot;);
      scanf(&amp;quot;%d&amp;quot;,&amp;amp;m);/*打印出菜单栏以供用户选择操作*/
    switch(m)/*利用switch语句实现菜单中的各个功能*/
    &amp;#123;
      case 1: Input(stu,n,x);
               break;
      case 2: SubCalculate(stu,subtotal,subaverage,n,x);
               break;
      case 3:StuCalculate(stu,n,x);
               break;
      case 4: SortStuScoreUpdown(stu,n);
               Print1(stu,n,x);
              break;
      case 5: SortStuScoreDownup(stu,n);
              Print1(stu,n,x);
             break;
      case 6: SortNumberDownup(stu,n);
              Print1(stu,n,x);
            break;
      case 7: SortName(stu,n);
              Print1(stu,n,x);
            break;
      case 8: SearchNumber(stu,n,x);
            break;
      case 9: SearchName(stu,n,x);
            break;
      case 10: Analysis(stu,n,x);
            break;
      case 11: List(stu,subtotal,subaverage,n,x);
            break;
      case 12:WritetoFile(stu,subtotal,subaverage,n,x);
            break;
      case 13:ReadfromFile(stu,subtotal,subaverage,&amp;amp;n,&amp;amp;x);
                Print1(stu,n,x);
                Print2(subtotal,subaverage,x);
            break;
      case 0: exit(0);
    &amp;#125;
   if(m!=0||m&amp;lt;0||m&amp;gt;13) goto KG;/*检测用户选择是否出错，并利用goto语句实现跳转*/
   return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上就是该实验的全部代码。（&lt;del&gt;毫无保留，直接裸奔！！！&lt;/del&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;实验数据我就不给了吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本人王者荣耀迷和KPL迷，实验数据全是英雄名和选手名（说实话，选手们的ID确实好听），估计助教在看实验的时候都笑出猪叫了。（&lt;del&gt;助教笑出猪叫？？？&lt;/del&gt; 啪，又来套娃！）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有相同兴趣的小伙伴们可以找我一起观赛掉分。&lt;del&gt;本人厨艺精湛，饭多管饱！！！&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/3.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;敲黑板！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果大佬们不幸看了我的代码，欢迎指导！！！（毕竟这时大一刚学的时候写的，估计bug一堆，很多代码也不是最优的）&lt;br&gt;如果萌新们不幸看了我的代码，欢迎交流！！！（如果你也备受这个实验困扰，希望这篇文章能够帮助到你）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后，有被学生成绩管理系统和图书馆管理系统折磨过的同仁，举个爪子示意一下，让我知道我并不孤单！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Wolf.jpg&#34; alt=&#34;Wolf&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/Hello-MyWorld/hello-world/</guid>
            <title>欢迎来到我的世界</title>
            <link>https://www.liangmeng.xyz/Hello-MyWorld/hello-world/</link>
            <category term="我的世界" scheme="https://www.liangmeng.xyz/categories/Hello-MyWorld/" />
            <category term="欢迎来到我的世界" scheme="https://www.liangmeng.xyz/categories/Hello-MyWorld/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/" />
            <category term="helloWorld" scheme="https://www.liangmeng.xyz/tags/helloWorld/" />
            <pubDate>Wed, 06 Apr 2022 22:56:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.liangmeng.xyz/CCPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
            <title>CPP语言基础</title>
            <link>https://www.liangmeng.xyz/CCPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
            <category term="C/CPP语言" scheme="https://www.liangmeng.xyz/categories/CCPP/" />
            <category term="CPP语言基础" scheme="https://www.liangmeng.xyz/categories/CCPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/" />
            <category term="CPP" scheme="https://www.liangmeng.xyz/tags/CPP/" />
            <category term="笔记" scheme="https://www.liangmeng.xyz/tags/%E7%AC%94%E8%AE%B0/" />
            <pubDate>Thu, 25 Mar 2021 19:45:16 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
    </channel>
</rss>
