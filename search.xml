<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CPP语言基础</title>
    <url>/CCPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C/CPP语言</category>
        <category>CPP语言基础</category>
      </categories>
      <tags>
        <tag>CPP</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章-人工智能的概述</title>
    <url>/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="人工智能概述"><a class="anchor" href="#人工智能概述">#</a> 人工智能概述</h1>
<h2 id="人工智能的定义"><a class="anchor" href="#人工智能的定义">#</a> 人工智能的定义</h2>
<h3 id="什么是智能"><a class="anchor" href="#什么是智能">#</a> 什么是智能</h3>
<ul>
<li>自然智能：指人类和一些动物所具有的智力和行为能力。</li>
<li>人类的自然智能（简称智能）：指人类在认识客观世界中，由思维过程和脑力活动所表现出的综合能力。</li>
</ul>
<h3 id="智能的不同观点"><a class="anchor" href="#智能的不同观点">#</a> 智能的不同观点</h3>
<ul>
<li>思维理论：<strong>智能来源于思维活动，智能的核心是思维，人的一切知识都是思维的产物</strong>。可望通过对思维规律和思维方法的研究来揭示智能的本质。</li>
<li>知识阈值理论：<strong>智能取决于知识的数量及其可运用程度</strong>。一个系统所具有的可运用知识越多，其智能就会越高。</li>
<li>进化理论：智能取决于感知和行为，取决于对外界复杂环境的适应，智能不需要知识、不需要表示、不需要推理，<strong>智能可由逐步进化来实现</strong>。（MIT，Brooks，人造机器虫研究）</li>
</ul>
<h3 id="智能的层次结构"><a class="anchor" href="#智能的层次结构">#</a> 智能的层次结构</h3>
<ul>
<li>高层智能：以大脑皮层（抑制中枢）为主，主要完成记忆、思维等活动。</li>
<li>中层智能：以丘脑（间脑，感觉中枢）为主，主要完成感知活动。</li>
<li>低层智能：以小脑、脊髓为主，主要完成动作反应活动。</li>
<li><strong>思维理论和知识阈值理论对应高层智能，而进化理论对应中层智能和低层智能</strong>。</li>
</ul>
<h3 id="智能包含的能力"><a class="anchor" href="#智能包含的能力">#</a> 智能包含的能力</h3>
<ul>
<li>
<p>感知能力：<strong>人类获得外界信息的基本途径</strong>。</p>
<p>感知 -- 动作方式：对简单、紧急的信息。</p>
<p>感知 -- 思维 -- 动作方式：对复杂的信息。</p>
</li>
<li>
<p>记忆和思维的能力：</p>
<p>记忆：对感知到的外界信息和由思维产生的内部知识的<strong>存储</strong>过程。</p>
<p>思维：对已存储信息或知识的本质属性、内部规律的<strong>认识</strong>过程。</p>
<p>思维方式：</p>
<ul>
<li>抽象思维（逻辑思维）：根据<strong>逻辑规则</strong>对信息和知识进行处理的理性思维方式。</li>
<li>形象思维（直感思维）：根据<strong>感性形象认识材料</strong>对客观现象进行处理的一种思维方式。</li>
<li>灵感思维（顿悟思维）：是一种显意识和潜意识相互作用的思维方式。</li>
</ul>
</li>
<li>
<p>学习和自适应能力：</p>
<p>学习：<strong>是一个具有特定目的的知识获取过程，是人的一种本能</strong>。不同人的学习方法、能力不同。</p>
<p>自适应：<strong>是一种通过自我调节适应外界环境的过程，是人的一种本能</strong>。不同人的适应能力不同。</p>
</li>
<li>
<p>行为能力：<strong>对感知的外界信息做出动作反应的能力</strong>。</p>
<p>信息来源：由感知直接获得的外界信息或经过思维加工后的信息。</p>
<p>实现过程’：通过脊髓来控制，由语言、表情、体姿等来实现。</p>
</li>
</ul>
<h3 id="什么是人工智能"><a class="anchor" href="#什么是人工智能">#</a> 什么是人工智能</h3>
<ul>
<li>学科的名称。</li>
<li>人工方法实现的智能。</li>
<li>计算机模拟实现的智能。</li>
<li>人造的智能机器或系统。</li>
<li>模仿、延伸以及扩展人的智能。</li>
</ul>
<h3 id="人工智能典型的4种定义方法"><a class="anchor" href="#人工智能典型的4种定义方法">#</a> 人工智能典型的 4 种定义方法</h3>
<ul>
<li>类人思维方法（认知模型方法）：1978 年贝尔曼，人工智能是那些与人的思维、决策、问题求解和学习等有关活动的自动化。</li>
<li>类人行为方法（图灵测试方法）：1990 年库兹韦勒，人工智能是一种创建机器的技艺，这种机器能够执行需要人的智能才能完成的功能。</li>
<li>理性思维方法（思维法则方法）：1985 年查尼艾克、麦克德莫特，人工智能是通过计算模型来进行心智能力研究的。</li>
<li>理性行为方法（理性智能体方法）：1998 年尼尔森，人工智能关心的是人工制品种的智能行为，即人工智能就是研究和建造理性智能体。</li>
<li><strong>理性思维方法与理性行为方法的关系：</strong>
<ul>
<li>前者强调正确思维，后者强调合理行动。</li>
<li>理性行为可以依据理性思维进行。</li>
<li>理性行为不一定要依据理性思维进行。</li>
</ul>
</li>
</ul>
<h3 id="人工智能的一般解释"><a class="anchor" href="#人工智能的一般解释">#</a> 人工智能的一般解释</h3>
<ul>
<li>从能力的角度：人工智能是指<strong>用人工的方法在机器上实现的智能</strong>，是智能机器所执行的通常与人类智能有关的功能，如判断、推理、证明、识别、感知、理解、设计、思考、规划、学习和问题求解等思维活动。</li>
<li>从学科的角度：人工智能是<strong>一门研究如何构造智能机器或智能系统，去模拟、延伸和扩展人类智能的学科</strong>，是计算机科学中涉及研究、设计和应用智能机器的一个分支。</li>
</ul>
<h3 id="人工智能的研究目标"><a class="anchor" href="#人工智能的研究目标">#</a> 人工智能的研究目标</h3>
<ul>
<li>
<p>1978 年斯洛曼，三个主要目标：</p>
<ul>
<li>
<p>对智能行为有效解释的理论分析。</p>
</li>
<li>
<p>解释人类智能。</p>
</li>
<li>
<p>构造具有智能的人工制品。</p>
</li>
</ul>
</li>
<li>
<p>远期目标：<strong>用自动机重现人类的思维过程和智能行为</strong>。</p>
<p>揭示人类智能的根本机理，用智能机器去模拟、延伸和扩展人类的智能。涉及到脑科学、认知科学、计算机科学、系统科学、控制论等多种学科，并依赖于它们的共同发展。</p>
</li>
<li>
<p>近期目标：<strong>建造智能计算机代替人类的部分智力劳动</strong>。</p>
<p>研究如何使现有的计算机更聪明，即使它能够运用知识去处理问题，能够模拟人类的智能行为。</p>
</li>
<li>
<p><strong>远期目标和近期目标的相互关系：</strong></p>
<ul>
<li>远期目标为近期目标指明了方向。</li>
<li>近期目标则为远期目标奠定了理论和技术基础。</li>
</ul>
</li>
</ul>
<h2 id="人工智能的发展简史"><a class="anchor" href="#人工智能的发展简史">#</a> 人工智能的发展简史</h2>
<h3 id="简史总结"><a class="anchor" href="#简史总结">#</a> 简史总结</h3>
<p><img data-src="/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/1.png" alt="1"></p>
<h2 id="人工智能的研究内容"><a class="anchor" href="#人工智能的研究内容">#</a> 人工智能的研究内容</h2>
<h3 id="研究内容"><a class="anchor" href="#研究内容">#</a> 研究内容</h3>
<ul>
<li>如何获取知识？</li>
<li>如何将获取的知识以计算机内部代码形式加以合理表示？</li>
<li>如何运用知识进行推理，解决实际问题？</li>
</ul>
<h2 id="人工智能研究方法与途径"><a class="anchor" href="#人工智能研究方法与途径">#</a> 人工智能研究方法与途径</h2>
<h3 id="三大学派"><a class="anchor" href="#三大学派">#</a> 三大学派</h3>
<ul>
<li>符号主义：运用计算机科学的方法（逻辑演绎）。
<ul>
<li>智能的基础是<strong>知识</strong>，其核心是<strong>知识表示和知识推理</strong>。</li>
<li><strong>知识可用符号表示，也可用符号进行推理</strong>，因而可以建立基于知识的人类智能和机器智能的统一的理论体系。</li>
<li><strong>功能模拟，构造能够模拟大脑功能的智能系统</strong>。</li>
</ul>
</li>
<li>联结主义：运用仿生学的方法（网络连接机制）。
<ul>
<li>智能行为的基元是<strong>神经元</strong>，而不是符号。</li>
<li>思维过程是<strong>神经元的联结活动过程</strong>，而不是符号运算过程，反对符号主义关于物理符号系统的假设。</li>
<li><strong>结构模拟，构造模拟大脑结构的神经网络系统</strong>。</li>
</ul>
</li>
<li>行为主义：运用进化论的思想（控制论和机器学习方法）。
<ul>
<li>智能取决于<strong>感知和行动</strong>，即 “感知 - 动作” 模型。</li>
<li>智能不需要知识、不需要表示、不需要推理，人工智能可以像人类智能那样<strong>逐步进化</strong>。</li>
<li><strong>行为模拟，构造具有进化能力的智能系统</strong>。</li>
</ul>
</li>
</ul>
<h2 id="人工智能的研究领域"><a class="anchor" href="#人工智能的研究领域">#</a> 人工智能的研究领域</h2>
<h3 id="研究领域"><a class="anchor" href="#研究领域">#</a> 研究领域</h3>
<ul>
<li>机器思维：<strong>推理（确定性推理、不确定性推理）和搜索（状态空间搜索、与 / 或树搜索、博弈树搜索）</strong>。</li>
<li>机器感知：计算机视觉、模式识别和自然语言处理。</li>
<li>机器行为：智能控制 / 制造。</li>
<li>机器学习：符号学习和神经学习。</li>
<li>计算智能：神经计算、进化计算和模糊计算。</li>
<li>分布智能：并行求解。</li>
<li>智能系统：专家系统和智能决策支持系统。</li>
</ul>
<h2 id="人工智能的研究现状与发展方向"><a class="anchor" href="#人工智能的研究现状与发展方向">#</a> 人工智能的研究现状与发展方向</h2>
<h3 id="研究现状"><a class="anchor" href="#研究现状">#</a> 研究现状</h3>
<ul>
<li>多学科交叉研究</li>
<li>多学派和多技术融合研究</li>
<li>分布智能研究</li>
<li>群体智能研究</li>
<li>社会智能研究</li>
<li>集成智能研究</li>
<li>认知计算与情感计算研究</li>
<li>智能系统与智能服务</li>
</ul>
<h3 id="发展方向"><a class="anchor" href="#发展方向">#</a> 发展方向</h3>
<ul>
<li>知识 + 数据 + 算法 + 算力。</li>
</ul>
<p><img data-src="/ArtificialIntelligence/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%A6%82%E8%BF%B0/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>第一章-人工智能的概述</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>栈与队列的应用</title>
    <url>/DataStructure/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><strong>本文中的两道题目都是鄙人数据结构课程里的作业，仅以此博客记录个人的解题过程。</strong></p>
<p><strong>问题一：利用栈来改变火车的行驶顺序。</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20200419164553496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt><br>
分析这个问题，N 列给定顺序的火车在经过火车站后行驶顺序发生了变化，那么可以想到，这些火车在进入火车站后，如果其出站的顺序较后，则可以在火车站中停靠，让行驶顺序较前的火车先出站，来达到更换火车行驶顺序的目的。这就可以联想到一个很重要的存储结构 —— 栈。<strong>栈的特点是 “后进先出”，把暂时不需要出站的火车压入栈中保存，把需要出站的火车从栈中弹出。</strong></p>
<p><strong>首先，定义两种数据类型：节点和链栈，分别来表示火车和火车站。</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200419171002982.png" alt></p>
<p><strong>问题的核心在于：何时将火车停靠在火车站中，何时停靠在火车站中的火车出站。</strong></p>
<p>如果，当前将要进站的火车刚好是当前需要出站的火车，该火车可以直接出站，不需要进栈保存，可以理解为进站后马上出站；<br>
如果当前将要进站的火车不是当前需要出站的火车，那么火车将进站停靠；<br>
<strong>另外要注意的是，在当前进站的火车匹配到当前需要出站的火车时，当前需要出站的火车将发生变更，此时火车站中停靠最前火车可能是当前将要出站的火车，所以要不断将火车站中停靠最前的火车与当前需要出站的火车进行匹配。</strong><br>
当所有匹配结束，即不再有火车满足出站条件时，如果火车站中没有停靠的火车，则火车的出站顺序成立；<br>
如果火车站中仍然有停靠的火车，则火车的出站顺序不成立。以下为该算法的代码：</p>
<pre><code>int SeqLegal(int in[], int out[], int num, Stack* S)&#123;
	int *Out_id = out;  //当前将要出站的列车序号
	StackNode* Node;
	Node = S-&gt;top-&gt;next;
	for(int i = 0; i &lt; num; i++)&#123;  //当前将要进站的列车序号与当前将要出站的列车序号相同，可以直接忽略，当前将要出站列车变更
		if(in[i] == *Out_id)&#123;
			Out_id++;
			while(!StackEmpty(S) &amp;&amp; GetTop(S) == *Out_id)&#123;  //如果栈不为空而且栈顶元素序号与当前将要出站列车序号相同，则弹出栈顶元素
				Pop(S);
				Node = S-&gt;top-&gt;Next;
				Out_id++;
			&#125;
		&#125;
		else&#123;
			Push(S, in[i]);  //当前将要进站的列车序号与当前将要出站的列车序号不相同，列车进栈保存，当前将要出站列车不变
		&#125;
	&#125;
	while(Node &amp;&amp; (Node-&gt;ID == *Out_id))&#123;  //比较栈顶元素序号与当前将要出站列车序号是否相同，相同则弹出栈顶元素，继续比较下一对序号，直至栈空或者序号不同
		Pop(S);
		Node = S-&gt;top-&gt;Next;
		Out_id++;
	&#125;
	if(StackEmpty(S))
		return 1;  //栈为空，列车出站序列可以完全匹配
	else
		return 0;  //栈非空，列车出站序列不能完全匹配
&#125;
</code></pre>
<p><img data-src="https://img-blog.csdnimg.cn/20200419172719890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>以示例的火车顺序为例:</p>
<p>火车 1 进站，其不为当前需要出站的火车，则将其停<br>
靠在火车站中。</p>
<p>火车 2 进站，其刚好为当前需要出站的火车，则火车 2 出站。<strong>当前需要出站火车变更为火车 4，与火车站中的火车 1 不匹配。</strong></p>
<p>火车 3 进站，停靠在火车站中。</p>
<p><strong>火车 4 进站，刚好为当前需要出站火车，则火车 4 出站，当前需要出站火车变更为 3，与火车站中停靠最前的火车 3 匹配，则火车 3 出站，当前需要出站的火车变更为 1，与火车站中停靠最前的火车 1 匹配，火车 1 出站。</strong></p>
<p>此时，火车全部进站和出站，火车站中无停靠火车，那么该出站序列成立。</p>
<p>再来分析另外一个例子：</p>
<p>进站火车序列为 1234，出站火车序列为 4231。</p>
<p>火车 1234 依次进站后，当前需要出站火车与停靠最前的火车 4 匹配，火车 4 出站。</p>
<p>当前出站需要出站火车变更为火车 2，而停靠最前火车为 3，两者不能匹配，此时剩余的全部火车都不能出站，那么该出站序列不成立。</p>
<p><strong>问题二：求解能够正确调整火车行驶顺序所需的最少轨道数量。</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20200419174327928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt><br>
分析这个问题，N 列给定顺序的火车在进入缓冲轨道后，其行驶顺序发生了变化。** 可以知道，先进入某一条缓冲轨道的火车将优先从出口行驶出来，即对于各缓冲轨道的火车，都满足 “先进先出” 的规则，那么我们可以联想到队列这一数据结构。** 将每一条缓冲轨道看成一个队列，轨道中的火车有序排队。</p>
<p><strong>先定义两种数据类型，节点和链队列，分别表示火车和缓冲轨道。</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200419175125145.png" alt="在这里插入图片描述"><br>
<strong>问题的核心在于：</strong></p>
<p><strong>一、要使火车在经过缓冲轨道后按序号从小到大的顺序行驶，再结合队列 “先进先出” 的要求，就需要在每条缓冲轨道中队前火车的序号小于队后火车的序号，即每条缓冲轨道中的火车序号呈升序排列。</strong></p>
<p><strong>二、再考虑求解轨道的最小数量。要使缓冲轨道数量最少，需要将每条缓冲轨道中的火车数量最大化，那么在选择火车轨道时，就要将火车放入与其序号差值最小的轨道。举个例子：</strong></p>
<p>如果已有两条轨道，分别有火车 4 和火车 2，又有火车 5 和火车 3 先后从入口进入，此时如果将火车 5 放入火车 2 的轨道，那么火车 3 只能进入新的无车轨道，因为在已有的两条轨道中末端火车的序号（分别为火车 4 和火车 5）均大于 3，此时缓冲轨道数量为 3；而如果将火车 5 放入火车 4 的轨道，那么就可以将火车 3 放入火车 2 的轨道，此时缓冲轨道数量为 2。</p>
<p>寻找最适合轨道的代码如下：</p>
<pre><code>int FindClosestQueue(Queue *RailQueue[],int UsedQueue,int CurTrain)&#123;
	int closestIdx = -1;  //最合适的轨道初始化为-1
	int Rear_Id;  //队尾元素
	int D_value[UsedQueue];  //记录当前火车序号与每个轨道队尾火车序号的差值
   	for(int i = 0; i &lt; UsedQueue; i++)  //遍历每个使用过的轨道
    	&#123;
        	if(CurTrain &gt; GetRear(RailQueue[i]))  //当前火车序号大于队尾火车序号
        	&#123;
           		Rear_Id = GetRear(RailQueue[i]);
            		D_value[i] = CurTrain - Rear_Id;  //记录两车的序号差值
       	 	&#125;
        	else&#123;
             		D_value[i] = 0;  //将差值记录为0，便于求得最小差值
        	&#125;
    	&#125;
    	for(int i = 0; i &lt; UsedQueue; i++)  //遍历差值数组，除0外差值记录最小的轨道为最适合轨道
    	&#123;
        	if(D_value[i] &gt; 0)  //如果差值记录大于0，该轨道为候选轨道
        	&#123;
            		if(closestIdx &lt; 0)  //之前未找到最适合轨道
            		&#123;
                		closestIdx = i;  //最适合轨道赋值为当前候选轨道
            		&#125;
            		else&#123;  //之前已找到最适合轨道
                		if(D_value[i] &lt; D_value[closestIdx])  //比较两个轨道的差值记录，如果当前候选轨道差值较小，将最适合轨道赋值为当前候选轨道
                		&#123;
                    			closestIdx = i;
               			&#125;
            		&#125;
        	&#125;
    	&#125;
    	return closestIdx;  //返回最适合轨道序号，不存在最适合轨道时返回-1
&#125;
</code></pre>
<p><img data-src="https://img-blog.csdnimg.cn/20200419180649391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt></p>
<p>然后将火车插入相应轨道，最终使用的轨道数量即为最小缓冲轨道数量：</p>
<pre><code>int MinBufferQueue(int out[], int num)&#123;
    	Queue *RailQueue[num]; //指针数组，记录各缓存轨道的火车，有与火车数相等的轨道数时一定可行
    	int closestIdx;
    	int UsedQueue = 0;  //已使用的队列数
   	int ArrangedTrain = 0;  //已安排的火车数
    	for(int i = 0; i &lt; num; i++)&#123;
        	RailQueue[i] = InitQueue();  //初始化火车队列
   	 &#125;
    	for(int i = 0; i &lt; num; i++)
    	&#123;
        	closestIdx = FindClosestQueue(RailQueue,UsedQueue,out[i]);  //寻找当前火车的最适合轨道
        	if(closestIdx == -1)  //不存在最适合轨道
        	&#123;
            		EnQueue(RailQueue[UsedQueue], out[i]);  //当前火车入队新火车轨道
            		UsedQueue++;  //已使用的队列数增加
            		ArrangedTrain++;  //已安排的火车数增加
        	&#125;
       		else  //存在最适合轨道
        	&#123;
            		EnQueue(RailQueue[closestIdx], out[i]);  //当前火车入队最适合轨道
            		ArrangedTrain++;  //已安排的火车数增加，已使用的队列数不变
        	&#125;
    	&#125;
    	return UsedQueue;  //返回已使用的队列数
&#125;
</code></pre>
<p><img data-src="https://img-blog.csdnimg.cn/20200419180827873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt></p>
<p><strong>敲黑板！！！萌新首次尝试撰写博客，文章内容涉及到的编程知识也非常基础，个人的代码能力也是比较有限，在此欢迎各位大佬交流指正。</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325183348308.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>栈与队列的应用</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
        <tag>队列</tag>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>学生成绩管理系统</title>
    <url>/CCPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>相信很多同仁在大学学习编程的时候都会被老师要求动手敲出一个学生成绩管理系统或图书馆管理系统之类的程序吧。<br>
<strong>不得不说，这个程序简直就是大多数初学者的恶梦，毕竟它的内容涉及到了整一个学期学到的所有知识。</strong><br>
<s>况且，对于像我这种在大学前从来没接触过编程，也不知道代码是啥的绝对萌新来说，更是一次史诗级的灾难。</s></p>
<p><strong>你见过凌晨四点的教学楼吗？</strong><br>
<strong>我见过，那时候我刚从里面出来。</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20210325191305561.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
<strong>话不多说，说多了都是泪。</strong></p>
<p>实验要求我就不赘述了吧，无非就是录成绩、各种方式查成绩、名次排序、计算均分等。</p>
<p><strong>还是直接上代码吧，大家都是爽快人！</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">30</span></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">10</span></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">X</span> <span class="token expression"><span class="token number">6</span></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">/* 学生信息结构体，包括学号，姓名，各学科分数，总分，均分 */</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">long</span> number<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">char</span> name<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">int</span> score<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">int</span> stutotal<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">float</span> stuaverage<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span>STUDENT<span class="token punctuation">;</span><span class="token comment">/* 对学生信息结构体取别名 “STUDENT”*/</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">/* 实现两个结构体的交换，注意，结构体是可以直接赋值的 */</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>STUDENT <span class="token operator">*</span>a<span class="token punctuation">,</span>STUDENT <span class="token operator">*</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  STUDENT temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/* 由用户用键盘依次输入学生信息 */</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">void</span> <span class="token function">Input</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>		<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 清除缓冲区中的回车字符，防止被读入学生姓名 */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>		<span class="token function">gets</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>			<span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>			    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Score %d:"</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>			    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>			<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 防止录入异常成绩 */</span></pre></td></tr><tr><td data-num="46"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">/* 计算各学科的总分和均分 */</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">void</span> <span class="token function">SubCalculate</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> subtotal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> subaverage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>		subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* 学科总成绩初始化为 0*/</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>			subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>		subaverage<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">;</span><span class="token comment">/* 将整型数强转为浮点数后进行浮点数运算，确保数据的准确性 */</span></pre></td></tr><tr><td data-num="62"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(subject %d)Total:%d\t\tAverage:%6.2f\n"</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>subaverage<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">/* 计算每个学生的总分和均分 */</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">void</span> <span class="token function">StuCalculate</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>		stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* 学生总成绩初始化为 0*/</span></pre></td></tr><tr><td data-num="73"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>			stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token operator">+</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>		stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token operator">/</span>x<span class="token punctuation">;</span><span class="token comment">/* 将整型数强转为浮点数后进行浮点数运算，确保数据的准确性 */</span></pre></td></tr><tr><td data-num="78"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(student %d)Total:%d\t\tAverage:%6.2f\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token comment">/* 将学生成绩按从高到低的顺序排列 */</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">void</span> <span class="token function">SortStuScoreUpdown</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal <span class="token operator">&lt;</span> stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果前面的学生的总成绩小于后面的学生的总成绩，则交换两个学生信息结构体位置 */</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>	  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">/* 将学生成绩按从低到高的顺序排列 */</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token keyword">void</span> <span class="token function">SortStuScoreDownup</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal <span class="token operator">></span> stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果前面的学生的总成绩大于后面的学生的总成绩，则交换两个学生信息结构体位置 */</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>	  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token comment">/* 将学生学号按从小到大排列 */</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token keyword">void</span> <span class="token function">SortNumberDownup</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">></span> stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果前面的学生的学号大于后面的学生的学号，则交换两个学生信息结构体位置 */</span></pre></td></tr><tr><td data-num="114"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>	  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token comment">/* 将学生姓名按字典顺序排列 */</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token keyword">void</span> <span class="token function">SortName</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果前面的学生的字母序位大于后面的学生的字母序位，则交换两个学生信息结构体位置 */</span></pre></td></tr><tr><td data-num="126"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>	  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="129"></td><td><pre></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token comment">/* 按学号查找学生并输出学生信息 */</span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token keyword">void</span> <span class="token function">SearchNumber</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* 未找到学生时 flag 初始化为 0*/</span></pre></td></tr><tr><td data-num="134"></td><td><pre>	<span class="token keyword">long</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the number:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>	<span class="token function">SortStuScoreUpdown</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 将学生按照成绩从高到低排序以获得学生的排名情况 */</span></pre></td></tr><tr><td data-num="139"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">/* 将录入的学生学号与待查学号进行一一比对 */</span></pre></td></tr><tr><td data-num="140"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token operator">==</span>temp<span class="token punctuation">)</span><span class="token comment">/* 找到与待查学号一致的学号 */</span></pre></td></tr><tr><td data-num="142"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>			flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/* 找到学号对应的学生时，flag 被赋值为 1*/</span></pre></td></tr><tr><td data-num="144"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="145"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>			<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>			<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* 未找到学号对应学生时，flag 的值仍为 0*/</span></pre></td></tr><tr><td data-num="155"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot find!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="158"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="159"></td><td><pre></pre></td></tr><tr><td data-num="160"></td><td><pre><span class="token comment">/* 按姓名查找学生并输出学生信息 */</span></pre></td></tr><tr><td data-num="161"></td><td><pre><span class="token keyword">void</span> <span class="token function">SearchName</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="162"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* 未找到学生时 flag 初始化为 0*/</span></pre></td></tr><tr><td data-num="164"></td><td><pre>	<span class="token keyword">char</span> tep<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the name:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %s"</span><span class="token punctuation">,</span>tep<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>	<span class="token function">SortStuScoreUpdown</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 将学生按照成绩从高到低排序以获得学生的排名情况 */</span></pre></td></tr><tr><td data-num="168"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">/* 将录入的学生姓名与待查姓名进行一一比对 */</span></pre></td></tr><tr><td data-num="169"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="170"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>tep<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* 找到与待查姓名字母顺序完全一致的姓名 */</span></pre></td></tr><tr><td data-num="171"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>			flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/* 找到学号对应的学生时，flag 被赋值为 1*/</span></pre></td></tr><tr><td data-num="173"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="175"></td><td><pre>			<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="176"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>			<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* 未找到学号对应学生时，flag 的值仍为 0*/</span></pre></td></tr><tr><td data-num="184"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot find!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="187"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="188"></td><td><pre></pre></td></tr><tr><td data-num="189"></td><td><pre><span class="token comment">/* 统计并打印出各学科各阶段人数及占比 */</span></pre></td></tr><tr><td data-num="190"></td><td><pre><span class="token keyword">void</span> <span class="token function">Analysis</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="191"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="192"></td><td><pre>	<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="194"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="195"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="196"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="197"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="198"></td><td><pre>		    <span class="token keyword">if</span>    <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">>=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token number">90</span><span class="token operator">&lt;=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="199"></td><td><pre>		    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token operator">>=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token number">80</span><span class="token operator">&lt;=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="200"></td><td><pre>		    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">79</span><span class="token operator">>=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token number">70</span><span class="token operator">&lt;=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="201"></td><td><pre>		    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">69</span><span class="token operator">>=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token number">60</span><span class="token operator">&lt;=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="202"></td><td><pre>		    <span class="token keyword">else</span>                                                           e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="203"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="204"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="205"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="206"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="207"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Subject No.%d:\n"</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="208"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Excellent:%d\tpercent:%.2f%%\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">100</span><span class="token operator">*</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="209"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Good:     %d\tpercent:%.2f%%\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">100</span><span class="token operator">*</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="210"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Medium:   %d\tpercent:%.2f%%\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">100</span><span class="token operator">*</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="211"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pass:     %d\tpercent:%.2f%%\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">100</span><span class="token operator">*</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="212"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed:   %d\tpercent:%.2f%%\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">100</span><span class="token operator">*</span>e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="213"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="214"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="215"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="216"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="217"></td><td><pre></pre></td></tr><tr><td data-num="218"></td><td><pre><span class="token comment">/* 输出各学生的学生信息及各课程的总分和均分 */</span></pre></td></tr><tr><td data-num="219"></td><td><pre><span class="token keyword">void</span> <span class="token function">List</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> subtotal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> subaverage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="220"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="222"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:     \tNumber:      \tTotalscore:\tAveragescore:\tSub 1:Sub 2:Sub 3:Sub 4:Sub 5:Sub 6:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="223"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="224"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="225"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10s\t%-13ld\t%11d\t%13.2f\t"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="226"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="227"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="228"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="229"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="230"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="231"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="232"></td><td><pre>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"          \t             \t           \t           \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="233"></td><td><pre>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="234"></td><td><pre>     <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6d"</span><span class="token punctuation">,</span>subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="237"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"         \t             \t           \t          \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="239"></td><td><pre>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="240"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6.2f"</span><span class="token punctuation">,</span>subaverage<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="243"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="244"></td><td><pre></pre></td></tr><tr><td data-num="245"></td><td><pre><span class="token comment">/* 打印姓名，学号，总分，均分及各学科的分数 */</span></pre></td></tr><tr><td data-num="246"></td><td><pre><span class="token keyword">void</span> <span class="token function">Print1</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="247"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="248"></td><td><pre>	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="249"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name:     \tNumber:\t      Totalscore:\tAveragescore:\tSubjectscore:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="250"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="251"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="252"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10s\t%-13ld\t%9d\t%13.2f\t"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="253"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="254"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="255"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-6d"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="256"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="257"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="258"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="259"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="260"></td><td><pre></pre></td></tr><tr><td data-num="261"></td><td><pre><span class="token comment">/* 打印各课程的总分和均分 */</span></pre></td></tr><tr><td data-num="262"></td><td><pre><span class="token keyword">void</span> <span class="token function">Print2</span><span class="token punctuation">(</span><span class="token keyword">int</span> subtotal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> subaverage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="263"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="264"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="265"></td><td><pre>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="266"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="267"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"subtotal No.%d: %-6d\tsubaverage No.%d: %-6.2f\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>subtotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>subaverage<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="268"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="269"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="270"></td><td><pre></pre></td></tr><tr><td data-num="271"></td><td><pre><span class="token comment">/* 将信息写入文件并保存 */</span></pre></td></tr><tr><td data-num="272"></td><td><pre><span class="token keyword">void</span> <span class="token function">WritetoFile</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> subtotal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> subaverage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="273"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="274"></td><td><pre>  FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="275"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="276"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"score.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">/* 检验文件是否打开成功 */</span></pre></td></tr><tr><td data-num="277"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="278"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failure to open score.txt!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="279"></td><td><pre>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="280"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="281"></td><td><pre>  <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%d\t%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="282"></td><td><pre>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="283"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="284"></td><td><pre>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%-10s\t%-13ld\t%11d\t%13.2f\t"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="285"></td><td><pre>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="286"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="287"></td><td><pre>            <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%-6d\n"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="288"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="289"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="290"></td><td><pre>  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="291"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="292"></td><td><pre>      <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%d\t%f\n"</span><span class="token punctuation">,</span>subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>subaverage<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="293"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="294"></td><td><pre>  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="295"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="296"></td><td><pre></pre></td></tr><tr><td data-num="297"></td><td><pre><span class="token comment">/* 从文件中读取出信息 */</span></pre></td></tr><tr><td data-num="298"></td><td><pre><span class="token keyword">void</span> <span class="token function">ReadfromFile</span><span class="token punctuation">(</span>STUDENT stu<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> subtotal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> subaverage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="299"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="300"></td><td><pre>  FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="301"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="302"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"score.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">/* 检验文件是否打开成功 */</span></pre></td></tr><tr><td data-num="303"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="304"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failure to open score.txt!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="305"></td><td><pre>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="306"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="307"></td><td><pre>   <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%d\t%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="308"></td><td><pre>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="309"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="310"></td><td><pre>      <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%10s"</span><span class="token punctuation">,</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="311"></td><td><pre>      <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%13ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="312"></td><td><pre>      <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%11d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stutotal<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="313"></td><td><pre>      <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stuaverage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="314"></td><td><pre>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token operator">*</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="315"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="316"></td><td><pre>        <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%6d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="317"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="318"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="319"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token operator">*</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="320"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="321"></td><td><pre>        <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%d\t%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>subtotal<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>subaverage<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="322"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="323"></td><td><pre>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="324"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="325"></td><td><pre></pre></td></tr><tr><td data-num="326"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="327"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="328"></td><td><pre>	<span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="329"></td><td><pre>	<span class="token keyword">int</span> subtotal<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="330"></td><td><pre>	<span class="token keyword">float</span> subaverage<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="331"></td><td><pre>	STUDENT stu<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="332"></td><td><pre>	<span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="333"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the total number of students:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="334"></td><td><pre>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="335"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the total number of subjects:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="336"></td><td><pre>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="337"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>n<span class="token operator">></span><span class="token number">30</span><span class="token operator">||</span>x<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>x<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 检测学生总人数及学科总数是否符合要求 */</span></pre></td></tr><tr><td data-num="338"></td><td><pre> KG<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n1.Input record\n2.Calculate total and average score of every course\n3.Calculate total and average score of every student\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="339"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4.Sort in descending order by total score of every student\n5.Sort in ascending order by total score of every student\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="340"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"6.Sort in ascending order by number\n7.Sort in dictionary order by name\n8.Search by number\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="341"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"9.Search by name\n10.Statistic analysis for every course\n11.List record\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="342"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"12.Write to a file\n13.Read from a file\n0.Exit\n\nPlease enter your choice:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="343"></td><td><pre>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 打印出菜单栏以供用户选择操作 */</span></pre></td></tr><tr><td data-num="344"></td><td><pre>    <span class="token keyword">switch</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment">/* 利用 switch 语句实现菜单中的各个功能 */</span></pre></td></tr><tr><td data-num="345"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="346"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">Input</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="347"></td><td><pre>               <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="348"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">SubCalculate</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>subtotal<span class="token punctuation">,</span>subaverage<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="349"></td><td><pre>               <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="350"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">StuCalculate</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="351"></td><td><pre>               <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="352"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token function">SortStuScoreUpdown</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="353"></td><td><pre>               <span class="token function">Print1</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="354"></td><td><pre>              <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="355"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token function">SortStuScoreDownup</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="356"></td><td><pre>              <span class="token function">Print1</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="357"></td><td><pre>             <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="358"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token function">SortNumberDownup</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="359"></td><td><pre>              <span class="token function">Print1</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="360"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="361"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token function">SortName</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="362"></td><td><pre>              <span class="token function">Print1</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="363"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="364"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token function">SearchNumber</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="365"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="366"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token function">SearchName</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="367"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="368"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token function">Analysis</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="369"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="370"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token function">List</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>subtotal<span class="token punctuation">,</span>subaverage<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="371"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="372"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span><span class="token function">WritetoFile</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>subtotal<span class="token punctuation">,</span>subaverage<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="373"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="374"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">13</span><span class="token operator">:</span><span class="token function">ReadfromFile</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>subtotal<span class="token punctuation">,</span>subaverage<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="375"></td><td><pre>                <span class="token function">Print1</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="376"></td><td><pre>                <span class="token function">Print2</span><span class="token punctuation">(</span>subtotal<span class="token punctuation">,</span>subaverage<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="377"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="378"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="379"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="380"></td><td><pre>   <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>m<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>m<span class="token operator">></span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> KG<span class="token punctuation">;</span><span class="token comment">/* 检测用户选择是否出错，并利用 goto 语句实现跳转 */</span></pre></td></tr><tr><td data-num="381"></td><td><pre>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="382"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以上就是该实验的全部代码。（<s>毫无保留，直接裸奔！！！</s> ）</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325193106921.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>实验数据我就不给了吧。</p>
<p><strong>本人王者荣耀迷和 KPL 迷，实验数据全是英雄名和选手名（说实话，选手们的 ID 确实好听），估计助教在看实验的时候都笑出猪叫了。（<s>助教笑出猪叫？？？</s> 啪，又来套娃！）</strong></p>
<p>有相同兴趣的小伙伴们可以找我一起观赛掉分。<s>本人厨艺精湛，饭多管饱！！！</s></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325194414574.jpg#pic_center" alt="在这里插入图片描述"></p>
<p><strong>敲黑板！！！</strong></p>
<p><strong>如果大佬们不幸看了我的代码，欢迎指导！！！（毕竟这时大一刚学的时候写的，估计 bug 一堆，很多代码也不是最优的）<br>
如果萌新们不幸看了我的代码，欢迎交流！！！（如果你也备受这个实验困扰，希望这篇文章能够帮助到你）</strong></p>
<p><strong>最后，有被学生成绩管理系统和图书馆管理系统折磨过的同仁，举个爪子示意一下，让我知道我并不孤单！</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/2021032519443410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>C/CPP语言</category>
        <category>学生成绩管理系统</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>排序查找及其应用</title>
    <url>/DataStructure/%E6%8E%92%E5%BA%8F%E6%9F%A5%E6%89%BE%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="题目一邮局兴建问题"><a class="anchor" href="#题目一邮局兴建问题">#</a> 题目一：邮局兴建问题</h2>
<p><strong>题目简述：</strong><br>
在一个小镇上准备要兴建邮局，需要把邮局建立在合适的位置，从而使得所有小镇居民去寄件和收取快递时行走的总路途最短。<br>
（1）距离计算采用曼哈顿距离公式<br>
 distance (p1, p2) = |p2.x − p1.x| + |p2.y − p1.y|<br>
（2）为了简化问题，允许邮局坐标和住户坐标重合</p>
<p><strong>输入格式：</strong><br>
第一行为住户数目，第二行开始为每个住户的坐标</p>
<p><strong>输出格式：</strong><br>
最短总距离</p>
<p><strong>输入示例 1：</strong><br>
3<br>
0 0<br>
0 4<br>
2 2</p>
<p><strong>输出示例 1：</strong><br>
6</p>
<p><strong>解释：</strong><br>
三个住户分别住在 (0, 0), (0, 4), (2, 2)，如图中的‘1’所标示的地方。<br>
当把邮局建在点 (0, 2) 时，如图中的‘X’所标示的地方<br>
最短的距离之和为 2+2+2=6。</p>
<p><img data-src="https://img-blog.csdnimg.cn/202107012015402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>输入示例 2：</strong><br>
6<br>
0 2<br>
0 4<br>
1 0<br>
1 2<br>
1 4<br>
2 2</p>
<p><strong>输出示例 2：</strong><br>
9</p>
<p><strong>解释：</strong><br>
六个住户分别住在 (0, 2), (0, 4), (1, 0),(1, 2), (1, 4), (2, 2)。<br>
当把邮局建在点 (1, 2) 时，最短的距离之和为 1+3+2+0+2+1=9。<br>
<img data-src="https://img-blog.csdnimg.cn/20210701201654985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="题目二邮递员年龄间隔"><a class="anchor" href="#题目二邮递员年龄间隔">#</a> 题目二：邮递员年龄间隔</h2>
<p><strong>题目简述：</strong><br>
邮局建立后，准备招收若干邮递员。邮递员年龄在 18 岁到 65 岁之间。<br>
现给出未排序的邮递员年龄的数组，求相邻年龄间隔的最大值。<br>
Tips: 邮递员数量小于等于 1000<br>
Tips: 要求时间复杂度和空间复杂度都为 O (n)</p>
<p><strong>输入示例：</strong><br>
4<br>
23 46 29 41</p>
<p><strong>输出示例：</strong><br>
12</p>
<p><strong>解释：</strong><br>
排序后为 [23, 29, 41, 46]，最大间隔值为 41-29=12。</p>
<h2 id="题目三街道归属问题"><a class="anchor" href="#题目三街道归属问题">#</a> 题目三：街道归属问题</h2>
<p><strong>题目简述：</strong><br>
一个邮递员负责一个街道的派送，一个街道由一个或一个以上的邮递员负责。<br>
现在向邮递员提问，邮递员不清楚其他街道的情况，只能回答有多少个邮递员和他负责同一条街道。不一定所有邮递员都会回答。根据邮递员的回答推断邮局最少有多少名邮递员。<br>
Tips: 邮递员数量小于等于 1000</p>
<p><strong>输入格式：</strong><br>
第一行为参与回答的邮递员数目 n，第二行为 n 个正整数，空格间隔。</p>
<p><strong>输出格式：</strong><br>
正整数，表示最少的邮递员数目。</p>
<p><strong>输入示例 1：</strong><br>
3<br>
1 1 2</p>
<p><strong>输出示例 1：</strong><br>
5</p>
<p><strong>解释：</strong><br>
两个邮递员说有 1 名同事和自己负责同一个街道，可以认为这两个邮递员属于同一个街道；<br>
第三名邮递员说有两名同事和自己负责同一个街道，说明他和前两名邮递员不负责同一条；<br>
所以邮局至少有 5 名邮递员。</p>
<p><strong>输入示例 2：</strong><br>
4<br>
1 1 2 2</p>
<p><strong>输出示例 2：</strong><br>
5</p>
<p><strong>解释：</strong><br>
两个邮递员说有 1 名同事和自己负责同一个街道，可以认为这两个邮递员属于同一个街道；<br>
 后面两名邮递员说有两名同事和自己负责同一个街道，说明他们和前两名邮递员不负责同一条；<br>
 所以邮局至少有 5 名邮递员。</p>
<h2 id="简要解析"><a class="anchor" href="#简要解析">#</a> 简要解析</h2>
<p>第一题考察的主要知识点就是排序。只需分别对所有的 x 坐标和 y 坐标进行排序，然后根据住户的数量为奇数还是偶数选择有序数组相应的中间值即可。</p>
<p>第二题考察的主要知识点也是排序，只需将邮递员的年龄进行排序，然后依次计算相邻快递员年龄的差并取最大值即可。</p>
<p>第三题考察的主要知识点也是排序，解题难度稍大。可以将快递员同事数量按照非递减的顺序排列，之后可以分为以下三种情况：<br>
①连续 n+1 个快递员都说自己有 n 个同事，那么这 n+1 个快递员属于同一街道。<br>
比如 2	2	 2，那么这三个快递员可以分配在同一街道。<br>
②连续 k 个快递员都说自己有 n 个同事（k＜n+1），那么这 k 个快递员属于同一街道，并且需要补上没有回答的 n-k+1 个快递员。<br>
比如 2	2，那么这两个快递员可以分配在同一街道，并且该街道有 1 名快递员没有参与回答。</p>
<p>③连续 k 个快递员都说自己有 n 个同事（k＞n+1），那么可以每次把连续的 n+1 个快递员按第一种方式处理，把最后剩下的 s 个快递员按第二种方式处理（s＜n+1）。</p>
<h2 id="求解代码"><a class="anchor" href="#求解代码">#</a> 求解代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxNum</span> <span class="token expression"><span class="token number">1000</span></span><span class="token comment">// 邮递员数量、住户数量的最大值</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MinNum</span> <span class="token expression"><span class="token number">0</span></span><span class="token comment">// 邮递员数量、住户数量的最小值</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxAge</span> <span class="token expression"><span class="token number">65</span></span><span class="token comment">// 邮递员年龄的最大值</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MinAge</span> <span class="token expression"><span class="token number">18</span></span><span class="token comment">// 邮递员年龄的最小值</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span></span><span class="token comment">// 返回 a、b 中的较大值</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MIN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span></span><span class="token comment">// 返回 a、b 中的较小值</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 交换数组中相应区段元素的位置，使枢轴元素到位，并返回其所在位置，此时在它前 (后) 面的元素均不大 (小) 于它</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">int</span> pivotkey<span class="token punctuation">;</span><span class="token comment">// 枢轴</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    pivotkey <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivotkey<span class="token punctuation">)</span><span class="token punctuation">)</span>high<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">// 找到比枢轴元素小的元素</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 将小的元素换到低端</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivotkey<span class="token punctuation">)</span><span class="token punctuation">)</span>low<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 找到比枢轴元素大的元素</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 将大的元素换到高端</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivotkey<span class="token punctuation">;</span><span class="token comment">// 枢轴元素到位</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token comment">// 返回枢轴元素所在位置</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 快速排序的递归形式，将数组中相应区段的元素按非递减的顺序排列</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">QSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">int</span> pivotkey<span class="token punctuation">;</span><span class="token comment">// 枢轴</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        pivotkey <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 枢轴元素的位置</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token function">QSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotkey<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对子数组进行快速排序</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token function">QSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivotkey<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对子数组进行快速排序</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// 快速排序算法</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">QSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数对数组进行排序</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// 求解邮局与所有住户之间的最小总距离</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">int</span> <span class="token function">MinTotalDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> X<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> Y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始最小总距离为 0</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token comment">// 住户数量为 0</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 x 坐标数组按非递减顺序排列</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>Y<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 y 坐标数组按非递减顺序排列</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        temp <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//n 为奇数时有序数组中间值的下标，即满足取得最小距离的邮局的位置的 x 坐标和 y 坐标在数组中的下标</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        temp <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//n 为偶数是有序数组中间值的下标，即满足取得最小距离的邮局的位置的 x 坐标和 y 坐标在数组中的下标</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        distance <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">-</span> X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>Y<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">-</span> Y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最小总距离等于邮局和所有住户之间 x 坐标及 y 坐标的差值的绝对值之和</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">return</span> distance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// 求解按年龄排列的相邻两个邮递员之间的最大年龄差</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">int</span> <span class="token function">MaximumGap</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始最大年龄差为 0</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 邮递员数量为 0</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 当只有一个邮递员时，最大年龄差为 - 1</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将年龄数组按非递减顺序排列</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        Max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不断更新最大年龄差</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token keyword">return</span> Max<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token comment">// 求解邮局中邮递员数量的最小值</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">int</span> <span class="token function">GetMinPostman</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token keyword">int</span> pNumber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 初始数量为 0</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> flag<span class="token punctuation">;</span><span class="token comment">//flag 标志能否将邮递员安排在同一街道</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token comment">// 参与回答的邮递员的数量为 0</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将同事数量数组按非递减顺序排列</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token comment">// 遍历同事数量数组</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 同事数量</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token comment">// 同事数量大于 0</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 遍历当前元素之后的 temp 个元素，判断能否将其安排在同一街道</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> temp<span class="token punctuation">)</span><span class="token comment">// 存在同事数量不等的元素</span></pre></td></tr><tr><td data-num="97"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 不能将其安排在同一街道</span></pre></td></tr><tr><td data-num="99"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// 停止遍历</span></pre></td></tr><tr><td data-num="100"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment">// 邮递员可以安排在同一街道</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>            pNumber <span class="token operator">+=</span> <span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 邮递员数量增加 temp+1 个，即该街道有 temp+1 个邮递员</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            i <span class="token operator">+=</span> <span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下一遍历位置 = 当前遍历位置 + temp + 1，即跨过同一街道中的 temp+1 个邮递员</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>        <span class="token keyword">else</span><span class="token comment">// 邮递员不能安排在同一街道</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>            pNumber <span class="token operator">+=</span> <span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//j 表示邮递员数量相等的街道的个数，且每个街道有 temp+1 个邮递员</span></pre></td></tr><tr><td data-num="111"></td><td><pre>            i <span class="token operator">+=</span> j<span class="token punctuation">;</span><span class="token comment">// 下一遍历位置 = 当前遍历位置 + j，即跨过 j 个含有相同数量的邮递员的街道</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>pNumber <span class="token operator">></span> MinNum <span class="token operator">&amp;&amp;</span> pNumber <span class="token operator">&lt;=</span> MaxNum<span class="token punctuation">)</span><span class="token operator">?</span> pNumber <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token comment">// 输入数据方式</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token keyword">void</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n1.Manual input  2.File input  else.Quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input your choice:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> choice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="125"></td><td><pre></pre></td></tr><tr><td data-num="126"></td><td><pre><span class="token comment">// 重新选择功能</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token keyword">void</span> <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>order<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDo you want to reselect a function(Y/N)?  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre></pre></td></tr><tr><td data-num="136"></td><td><pre><span class="token comment">// 邮局与所有居民之间的最小总距离</span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token keyword">char</span> <span class="token function">Task_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="138"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//n 表示住户的数量</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token keyword">char</span> choice<span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token char">'N'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>    <span class="token function">Input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 选择输入数据的方式</span></pre></td></tr><tr><td data-num="142"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="143"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="145"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput the number of households(%d-%d,else to quit):  "</span><span class="token punctuation">,</span> MinNum<span class="token punctuation">,</span> MaxNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="147"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">>=</span> MinNum <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> MaxNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="148"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>                <span class="token keyword">int</span> X<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 坐标数组，用于保存住户的 x 坐标和 y 坐标</span></pre></td></tr><tr><td data-num="151"></td><td><pre>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="152"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the No.%02d household coordinates(x,y):  "</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre>                    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The minimum total distance is %d.\n"</span><span class="token punctuation">,</span> <span class="token function">MinTotalDistance</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数求解最小总距离</span></pre></td></tr><tr><td data-num="158"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput the number of households(%d-%d,else to quit):  "</span><span class="token punctuation">,</span> MinNum<span class="token punctuation">,</span> MaxNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>            <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="163"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n(Filename: 5_1_input.in)\nThe results are as follows:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步修改文件名</span></pre></td></tr><tr><td data-num="164"></td><td><pre>            <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"5_1_input.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">>=</span> MinNum <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> MaxNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="166"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>                <span class="token keyword">int</span> X<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 坐标数组，用于保存住户的 x 坐标和 y 坐标</span></pre></td></tr><tr><td data-num="168"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="169"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="170"></td><td><pre>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">// 文件数据不足</span></pre></td></tr><tr><td data-num="171"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Insufficient data.Please check the data in the file.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>                        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="175"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %02d: The minimum total distance is %d.\n"</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">MinTotalDistance</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数求解最小总距离</span></pre></td></tr><tr><td data-num="177"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="178"></td><td><pre>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>        <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="181"></td><td><pre>            <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>    <span class="token keyword">return</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="185"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="186"></td><td><pre></pre></td></tr><tr><td data-num="187"></td><td><pre><span class="token comment">// 按年龄排列的相邻两个邮递员之间的最大年龄差 MinAge 18// 邮递员年龄的最小值</span></pre></td></tr><tr><td data-num="188"></td><td><pre><span class="token keyword">char</span> <span class="token function">Task_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="189"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="190"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">// 邮递员数量</span></pre></td></tr><tr><td data-num="191"></td><td><pre>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="192"></td><td><pre>    <span class="token keyword">char</span> choice<span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token char">'N'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>    <span class="token function">Input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 选择输入数据的方式</span></pre></td></tr><tr><td data-num="194"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="195"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="196"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="197"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="198"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput the number of postmen(%d-%d,else to quit):  "</span><span class="token punctuation">,</span> MinNum<span class="token punctuation">,</span> MaxNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="199"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">>=</span> MinNum <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> MaxNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="200"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="201"></td><td><pre>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="202"></td><td><pre>                <span class="token keyword">int</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 年龄数组，用于保存邮递员的年龄</span></pre></td></tr><tr><td data-num="203"></td><td><pre>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="204"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="205"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="206"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the age of the No.%02d postman(%d-%d):  "</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> MinAge<span class="token punctuation">,</span> MaxAge<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="207"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MinAge <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> MaxAge<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="208"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="209"></td><td><pre>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="210"></td><td><pre>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Out of range.Input again:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="211"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="212"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="213"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum age difference is %d.\n"</span><span class="token punctuation">,</span> <span class="token function">MaximumGap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数求解最大年龄差</span></pre></td></tr><tr><td data-num="214"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput the number of postmen(%d-%d,else to quit):  "</span><span class="token punctuation">,</span> MinNum<span class="token punctuation">,</span> MaxNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="215"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="216"></td><td><pre>            <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="217"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="218"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="219"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n(Filename: 5_2_input.in)The results are as follows:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步修改文件名</span></pre></td></tr><tr><td data-num="220"></td><td><pre>            <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"5_2_input.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">>=</span> MinNum <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> MaxNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="222"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="223"></td><td><pre>                <span class="token keyword">int</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 快递员年龄数组</span></pre></td></tr><tr><td data-num="224"></td><td><pre>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="225"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="226"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MinAge <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> MaxAge<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="227"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="228"></td><td><pre>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">// 文件数据不足</span></pre></td></tr><tr><td data-num="229"></td><td><pre>                        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="230"></td><td><pre>                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Insufficient data.Please check the data in the file.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 文件数据不足</span></pre></td></tr><tr><td data-num="231"></td><td><pre>                            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="232"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="233"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="234"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %02d: The maximum age difference is %d.\n"</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">MaximumGap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数求解最大年龄差</span></pre></td></tr><tr><td data-num="236"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="237"></td><td><pre>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="239"></td><td><pre>        <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="240"></td><td><pre>            <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="243"></td><td><pre>    <span class="token keyword">return</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="244"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="245"></td><td><pre></pre></td></tr><tr><td data-num="246"></td><td><pre><span class="token comment">// 邮局中邮递员数量的最小值</span></pre></td></tr><tr><td data-num="247"></td><td><pre><span class="token keyword">char</span> <span class="token function">Task_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="248"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="249"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//n 表示参与回答的邮递员的数量</span></pre></td></tr><tr><td data-num="250"></td><td><pre>    <span class="token keyword">char</span> choice<span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token char">'N'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="251"></td><td><pre>    <span class="token function">Input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 选择输入数据的方式</span></pre></td></tr><tr><td data-num="252"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="253"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="254"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="255"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="256"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput the number of the answering postmen(>0,else to quit):  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="257"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="258"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="259"></td><td><pre>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="260"></td><td><pre>                <span class="token keyword">int</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 同事数量数组，用于保存邮递员所在街道内的同事数量</span></pre></td></tr><tr><td data-num="261"></td><td><pre>                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="262"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="263"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="264"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the answer of the NO.%02d postman:  "</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="265"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MinNum <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> MaxNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="266"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="267"></td><td><pre>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="268"></td><td><pre>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Out of range.Input again:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="269"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="270"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="271"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(Effective range: %d-%d)The minimum number of postmen is %d.\n"</span><span class="token punctuation">,</span> MinNum<span class="token punctuation">,</span> MaxNum<span class="token punctuation">,</span> <span class="token function">GetMinPostman</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数求解邮递员的最小数量</span></pre></td></tr><tr><td data-num="272"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput the number of the answering postmen(>0,else to quit):  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="273"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="274"></td><td><pre>            <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="275"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="276"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="277"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n(Filename: 5_3_input.in)The results are as follows:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步修改文件名</span></pre></td></tr><tr><td data-num="278"></td><td><pre>            <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"5_3_input.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="279"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="280"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="281"></td><td><pre>                <span class="token keyword">int</span> nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 同事数量数组，用于保存邮递员所在街道内的同事数量</span></pre></td></tr><tr><td data-num="282"></td><td><pre>                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="283"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="284"></td><td><pre>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MinNum <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> MaxNum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="285"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="286"></td><td><pre>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">// 文件数据不足</span></pre></td></tr><tr><td data-num="287"></td><td><pre>                        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="288"></td><td><pre>                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Insufficient data.Please check the data in the file.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 文件数据不足</span></pre></td></tr><tr><td data-num="289"></td><td><pre>                            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="290"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="291"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="292"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="293"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %02d: (Effective range: %d-%d)The minimum number of postmen is %d.\n"</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> MinNum<span class="token punctuation">,</span> MaxNum<span class="token punctuation">,</span> <span class="token function">GetMinPostman</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用函数求解邮递员的最小数量</span></pre></td></tr><tr><td data-num="294"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="295"></td><td><pre>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="296"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="297"></td><td><pre>        <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="298"></td><td><pre>            <span class="token function">Continue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="299"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="300"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="301"></td><td><pre>    <span class="token keyword">return</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="302"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="303"></td><td><pre></pre></td></tr><tr><td data-num="304"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="305"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="306"></td><td><pre>    <span class="token keyword">char</span> choice<span class="token punctuation">,</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="307"></td><td><pre>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="308"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.Get the minimum total distance between the post office and all residents\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="309"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2.Get the maximum age difference between two adjacent postmen arranged by age\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="310"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3.Get the minimum number of postmen in the post office           else.Quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="311"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input your choice:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="312"></td><td><pre>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 选择功能</span></pre></td></tr><tr><td data-num="313"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="314"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="315"></td><td><pre>            <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="316"></td><td><pre>                    order <span class="token operator">=</span> <span class="token function">Task_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="317"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="318"></td><td><pre>            <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="319"></td><td><pre>                    order <span class="token operator">=</span> <span class="token function">Task_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="320"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="321"></td><td><pre>            <span class="token keyword">case</span> <span class="token char">'3'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="322"></td><td><pre>                    order <span class="token operator">=</span> <span class="token function">Task_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="323"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="324"></td><td><pre>            <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="325"></td><td><pre>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="326"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="327"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>order <span class="token operator">==</span> <span class="token char">'Y'</span> <span class="token operator">||</span> order <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Y 或 y 表示重新选择功能</span></pre></td></tr><tr><td data-num="328"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="329"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>敲黑板！！！排序和搜索非常常用，需要清楚地知道每一种排序方法和搜索方法的逻辑、代码、时间复杂度、空间复杂度等。</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210702150108347.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>排序查找及其应用</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>实验</tag>
        <tag>排序</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>线性结构及其应用</title>
    <url>/DataStructure/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>结束了大一上 C 语言的学习，脱离了被学生成绩管理系统支配的恐惧，开始来学习 <strong><s>万恶的</s></strong> 数据结构。</p>
<p>依稀记得当时为了做这个实验，我早早地吃完晚饭，守在电脑前，打开了 <strong>CodeBlocks、百度搜索（<s>懂的都懂！！！</s> ）、QQ 和微信（<s>哈哈，信我，真的只是为了与外界取得联系！！！</s> ），面前还摆着 C 语言课本和数结构课本，</strong> 真的是正襟危坐，紧张刺激。</p>
<p>这里说明一下，去年因为疫情的影响，全部在家上网课，而且数据结构实验课是在晚上。</p>
<p><strong>等等，晚上？这不是变相让我们决战到天亮吗？？？</strong></p>
<p>果然，老师诚不负我。曾天真地以为可以永远告别学生成绩管理系统了，好家伙，它又给我回来了！！！（<strong>原地死亡</strong>）</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325205121464.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>实验要求如下：<br>
学期结束，辅导员需要收集两个班级的同学的 C 语言课程成绩。请你为辅导员做一个成绩录入统计，帮助辅导员更好地工作。（<s><strong>请问你分钱给我吗？没有凭什么将你的快乐建立在我的痛苦之上？</strong></s> ）</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325205324686.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>（1）成绩信息录入 —— 线性表的建立与遍历<br>
操作 1：初始化空表<br>
操作 2：按成绩降序插入所有同学的学号、班级信息和成绩到各自班级链表<br>
操作 3：查找 / 删除，若对应班级链表中无该同学信息，则输出无法找到<br>
操作 4：信息输出，线性表的遍历<br>
（2）信息汇总<br>
信息统计：将同学们的成绩合并到总表<br>
（3）建表翻转<br>
将总表中信息翻转到新表中</p>
<p>算了，还是写吧。<br>
<strong>但请你记住，我不是在帮你，我只是想改变世界！！！</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325205332494.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>下面奉上鄙人的拙劣的代码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 定义学生信息节点</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> ID_num<span class="token punctuation">;</span>  <span class="token comment">// 学号</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> Class_num<span class="token punctuation">;</span>  <span class="token comment">// 班级</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> C_score<span class="token punctuation">;</span>  <span class="token comment">// 分数</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span>STUDENTNODE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 建立学生信息节点，返回指向该节点的指针</span></pre></td></tr><tr><td data-num="13"></td><td><pre>STUDENTNODE<span class="token operator">*</span> <span class="token function">StudentListNodeCreat</span><span class="token punctuation">(</span><span class="token keyword">int</span> Class_num<span class="token punctuation">,</span> <span class="token keyword">int</span> ID_num<span class="token punctuation">,</span> <span class="token keyword">int</span> C_score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    p <span class="token operator">=</span> <span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>STUDENTNODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 给新建节点分配存储空间</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    p<span class="token operator">-></span>ID_num <span class="token operator">=</span> ID_num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    p<span class="token operator">-></span>Class_num <span class="token operator">=</span> Class_num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    p<span class="token operator">-></span>C_score <span class="token operator">=</span> C_score<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 指针初始化为 NULL</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 在已有的成绩降序链表中插入新建学生信息节点，并保持链表成绩仍为降序</span></pre></td></tr><tr><td data-num="25"></td><td><pre>STUDENTNODE<span class="token operator">*</span> <span class="token function">Insert_Descending</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>head<span class="token punctuation">,</span> STUDENTNODE <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    p <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    q <span class="token operator">=</span> node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 链表下一节点存在</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>C_score<span class="token punctuation">)</span> <span class="token operator">></span> q<span class="token operator">-></span>C_score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 若下一节点的成绩大于插入节点的成绩</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 继续向下搜索</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 若下一节点的成绩小于或等于插入节点的成绩</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 搜索至链表末端时，将节点插入末端</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// 根据学号搜索学生信息，若有，则输出成绩，若没有，输出没有该学生信息</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">void</span> <span class="token function">SearchByID_num</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> ID_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    p <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 下一节点存在</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>ID_num<span class="token punctuation">)</span> <span class="token operator">!=</span> ID_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 若下一节点的学号不等于搜索的学号</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 继续向下搜索</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"It is    &#123; Class_number: %d, ID_number: %d, C_score: %3d &#125;\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>next<span class="token operator">-></span>Class_num<span class="token punctuation">,</span> p<span class="token operator">-></span>next<span class="token operator">-></span>ID_num<span class="token punctuation">,</span> p<span class="token operator">-></span>next<span class="token operator">-></span>C_score<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匹配到相应学号时</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This class has no such student as ID_number = %d\n"</span><span class="token punctuation">,</span> ID_num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 搜索至链表末端时，返回没有相应学生信息</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// 根据学号删除学生相关信息</span></pre></td></tr><tr><td data-num="65"></td><td><pre>STUDENTNODE<span class="token operator">*</span> <span class="token function">DeleteByID_num</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> ID_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    p <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 下一节点存在</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>ID_num<span class="token punctuation">)</span> <span class="token operator">!=</span> ID_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 若下一节点的学号不等于搜索的学号</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 继续向下搜索</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 匹配到相应学号时</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 将 p 的指针指向下一节点存放的指针所指向的地址</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放内存</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This class has no such student as ID_number = %d\n"</span><span class="token punctuation">,</span> ID_num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 搜索至链表末端时，返回没有相应学生信息</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment">// 复制参数节点</span></pre></td></tr><tr><td data-num="88"></td><td><pre>STUDENTNODE<span class="token operator">*</span> <span class="token function">NodeCopy</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>newnode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    newnode <span class="token operator">=</span> <span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>STUDENTNODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为新节点分配空间复制各部分的值，指针初始化为 NULL</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    newnode<span class="token operator">-></span>Class_num <span class="token operator">=</span> node<span class="token operator">-></span>Class_num<span class="token punctuation">;</span>  <span class="token comment">// 复制各部分的值指针初始化为 NULL</span></pre></td></tr><tr><td data-num="92"></td><td><pre>    newnode<span class="token operator">-></span>ID_num <span class="token operator">=</span> node<span class="token operator">-></span>ID_num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>    newnode<span class="token operator">-></span>C_score <span class="token operator">=</span> node<span class="token operator">-></span>C_score<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    newnode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 指针初始化为 NULL</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token keyword">return</span> newnode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token comment">// 将两个班级的成绩表合并为一个新的总表，表中成绩仍按降序处理，同时不破坏原有分表</span></pre></td></tr><tr><td data-num="99"></td><td><pre>STUDENTNODE<span class="token operator">*</span> <span class="token function">MergeStudentList</span><span class="token punctuation">(</span>STUDENTNODE<span class="token operator">*</span> heads<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> STUDENTNODE <span class="token operator">*</span>MergeList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 参数为待合并分表和合并总表头结点的指针</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>copynode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>    p <span class="token operator">=</span> heads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>    q <span class="token operator">=</span> heads<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    r <span class="token operator">=</span> MergeList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 当两个指针指向的节点同时存在时，比较两节点的成绩</span></pre></td></tr><tr><td data-num="105"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>C_score<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>C_score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//p 指针指向节点的成绩大于或等于 q 指针指向节点的成绩</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            copynode <span class="token operator">=</span> <span class="token function">NodeCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 复制 p 指针指向的节点，该节点为满足条件的待插入节点</span></pre></td></tr><tr><td data-num="107"></td><td><pre>            r<span class="token operator">-></span>next <span class="token operator">=</span> copynode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>            copynode <span class="token operator">=</span> <span class="token function">NodeCopy</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 复制 q 指针指向的节点，该节点为满足条件的待插入节点</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            r<span class="token operator">-></span>next <span class="token operator">=</span> copynode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>            r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 当 p 指针指向节点存在，即分表还未遍历时，依次插入所有节点</span></pre></td></tr><tr><td data-num="119"></td><td><pre>        copynode <span class="token operator">=</span> <span class="token function">NodeCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>        r<span class="token operator">-></span>next <span class="token operator">=</span> copynode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 当 q 指针指向节点存在，即分表还未遍历时，依次插入所有节点</span></pre></td></tr><tr><td data-num="125"></td><td><pre>        copynode <span class="token operator">=</span> <span class="token function">NodeCopy</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>        r<span class="token operator">-></span>next <span class="token operator">=</span> copynode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>        r <span class="token operator">=</span> r<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>    <span class="token keyword">return</span> MergeList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="132"></td><td><pre></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token comment">// 将总表逆序排列，即表中成绩按升序处理，同时不破坏原有总表</span></pre></td></tr><tr><td data-num="134"></td><td><pre>STUDENTNODE<span class="token operator">*</span> <span class="token function">ReverseStudentList</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>MergeList<span class="token punctuation">,</span>STUDENTNODE <span class="token operator">*</span>ReverseList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 参数为待逆序总表和逆序总表头结点的指针</span></pre></td></tr><tr><td data-num="135"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>newnode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>    p <span class="token operator">=</span> MergeList<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>    q <span class="token operator">=</span> ReverseList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 依次遍历并复制每一个节点，不断将复制形成的节点插入到头结点与第一个节点之间，最终达到逆序的效果</span></pre></td></tr><tr><td data-num="139"></td><td><pre>        newnode <span class="token operator">=</span> <span class="token function">NodeCopy</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 复制当前节点</span></pre></td></tr><tr><td data-num="140"></td><td><pre>        newnode<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 将复制形成的节点插入头结点与第一个节点之间</span></pre></td></tr><tr><td data-num="141"></td><td><pre>        q<span class="token operator">-></span>next <span class="token operator">=</span> newnode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="142"></td><td><pre>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>    <span class="token keyword">return</span> ReverseList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="145"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="146"></td><td><pre></pre></td></tr><tr><td data-num="147"></td><td><pre><span class="token comment">// 打印单个学生节点信息</span></pre></td></tr><tr><td data-num="148"></td><td><pre><span class="token keyword">void</span> <span class="token function">PrintStudentNode</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>    p <span class="token operator">=</span> node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&#123; Class_number: %d, ID_number: %d, C_score: %3d&#125;\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>Class_num<span class="token punctuation">,</span> p<span class="token operator">-></span>ID_num<span class="token punctuation">,</span> p<span class="token operator">-></span>C_score<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="153"></td><td><pre></pre></td></tr><tr><td data-num="154"></td><td><pre><span class="token comment">// 打印整个学生信息表</span></pre></td></tr><tr><td data-num="155"></td><td><pre><span class="token keyword">void</span> <span class="token function">PrintStudentList</span><span class="token punctuation">(</span>STUDENTNODE <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>    STUDENTNODE <span class="token operator">*</span>p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>    p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="158"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&#123; Class_number: %d, ID_number: %d, C_score: %3d &#125;"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>Class_num<span class="token punctuation">,</span> p<span class="token operator">-></span>ID_num<span class="token punctuation">,</span> p<span class="token operator">-></span>C_score<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"->\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存在后继节点，则以 "->" 来表示</span></pre></td></tr><tr><td data-num="163"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="164"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThat's all\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="166"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="167"></td><td><pre></pre></td></tr><tr><td data-num="168"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="169"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="170"></td><td><pre>    <span class="token keyword">int</span> n_student<span class="token punctuation">;</span>  <span class="token comment">// 学生个数</span></pre></td></tr><tr><td data-num="171"></td><td><pre>    <span class="token keyword">char</span> order<span class="token punctuation">;</span>      <span class="token comment">// 用户选择</span></pre></td></tr><tr><td data-num="172"></td><td><pre>    <span class="token keyword">int</span> tempClass<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>    <span class="token keyword">int</span> tempID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre>    <span class="token keyword">int</span> tempScore<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="175"></td><td><pre>    STUDENTNODE<span class="token operator">*</span> tempNode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>    STUDENTNODE<span class="token operator">*</span> MergeList<span class="token punctuation">;</span>  <span class="token comment">// 降序总表头指针</span></pre></td></tr><tr><td data-num="177"></td><td><pre>    STUDENTNODE<span class="token operator">*</span> ReverseList<span class="token punctuation">;</span>  <span class="token comment">// 升序总表头指针</span></pre></td></tr><tr><td data-num="178"></td><td><pre>    STUDENTNODE<span class="token operator">*</span> Class<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">StudentListNodeCreat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">StudentListNodeCreat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 为两个班级分表创建头结点</span></pre></td></tr><tr><td data-num="179"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                  ################################################################                  \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.Insert_Descending  2.Search by ID_number  3.Delete by ID_number  4.Merge  5.Reverse  6.Print  q.Quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                  ################################################################                  \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input your order:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 检查是否读取到有效值</span></pre></td></tr><tr><td data-num="184"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 查看用户指令</span></pre></td></tr><tr><td data-num="185"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="186"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"How many student do you want to input?    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="187"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 清除缓冲区中的所有字符</span></pre></td></tr><tr><td data-num="188"></td><td><pre>                <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="189"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="190"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n_student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 检查是否读取到有效值</span></pre></td></tr><tr><td data-num="191"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span>n_student <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="192"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the data format as Class_number,ID_number,C_score:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 清除缓冲区中的所有字符</span></pre></td></tr><tr><td data-num="194"></td><td><pre>                    <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="195"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="196"></td><td><pre>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempClass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempID<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempScore<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 检查是否读取到有效值</span></pre></td></tr><tr><td data-num="197"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 清除缓冲区中的所有字符</span></pre></td></tr><tr><td data-num="198"></td><td><pre>                    <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="199"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="200"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error!Please input again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提示错误并要求重新输入</span></pre></td></tr><tr><td data-num="201"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the data format as Class_number,ID_number,C_score:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="202"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="203"></td><td><pre>                tempNode <span class="token operator">=</span> <span class="token function">StudentListNodeCreat</span><span class="token punctuation">(</span>tempClass<span class="token punctuation">,</span> tempID<span class="token punctuation">,</span> tempScore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新建学生信息节点</span></pre></td></tr><tr><td data-num="204"></td><td><pre>                Class<span class="token punctuation">[</span>tempClass<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Insert_Descending</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span>tempClass<span class="token punctuation">]</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将新建节点按降序插入班级表中</span></pre></td></tr><tr><td data-num="205"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is the node you have inserted:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="206"></td><td><pre>                <span class="token function">PrintStudentNode</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出插入的学生节点信息</span></pre></td></tr><tr><td data-num="207"></td><td><pre>                n_student<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="208"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="209"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="210"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="211"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the data format as:Class_number,ID_number:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="212"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempClass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempID<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 检查是否读取到有效值</span></pre></td></tr><tr><td data-num="213"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 清除缓冲区中的所有字符</span></pre></td></tr><tr><td data-num="214"></td><td><pre>                    <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="215"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="216"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error!Please input again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提示错误并要求重新输入</span></pre></td></tr><tr><td data-num="217"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the data format as:Class_number,ID_number:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="218"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="219"></td><td><pre>            <span class="token function">SearchByID_num</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span>tempClass<span class="token punctuation">]</span><span class="token punctuation">,</span> tempID<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="220"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'3'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="222"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the data format as:Class_number,ID_number:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="223"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempClass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tempID<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 检查是否读取到有效值</span></pre></td></tr><tr><td data-num="224"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 清除缓冲区中的所有字符</span></pre></td></tr><tr><td data-num="225"></td><td><pre>                    <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="226"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="227"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error!Please input again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提示错误并要求重新输入</span></pre></td></tr><tr><td data-num="228"></td><td><pre>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input the data format as:Class_number,ID_number:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="229"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="230"></td><td><pre>            Class<span class="token punctuation">[</span>tempClass<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">DeleteByID_num</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span>tempClass<span class="token punctuation">]</span><span class="token punctuation">,</span> tempID<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="231"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="232"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'4'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="233"></td><td><pre>            MergeList <span class="token operator">=</span> <span class="token function">StudentListNodeCreat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为降序总表创建一个头结点</span></pre></td></tr><tr><td data-num="234"></td><td><pre>            MergeList <span class="token operator">=</span> <span class="token function">MergeStudentList</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span>MergeList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The list merged:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre>            <span class="token function">PrintStudentList</span><span class="token punctuation">(</span>MergeList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="237"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'5'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="239"></td><td><pre>            ReverseList <span class="token operator">=</span> <span class="token function">StudentListNodeCreat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为升序总表创建一个头结点</span></pre></td></tr><tr><td data-num="240"></td><td><pre>            ReverseList <span class="token operator">=</span> <span class="token function">ReverseStudentList</span><span class="token punctuation">(</span>MergeList<span class="token punctuation">,</span>ReverseList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The list reversed:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>            <span class="token function">PrintStudentList</span><span class="token punctuation">(</span>ReverseList<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="243"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="244"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'6'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="245"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nClass 0:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="246"></td><td><pre>            <span class="token function">PrintStudentList</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="247"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="248"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nClass 1:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="249"></td><td><pre>            <span class="token function">PrintStudentList</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="250"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="251"></td><td><pre>        <span class="token keyword">case</span> <span class="token char">'q'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="252"></td><td><pre>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="253"></td><td><pre>        <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="254"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error!Please input again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 若用户输入选项以外的其他字符，提示输入错误并要求重新输入</span></pre></td></tr><tr><td data-num="255"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="256"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="257"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                  ################################################################                  \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="258"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.Insert_Descending  2.Search by ID_number  3.Delete by ID_number  4.Merge  5.Reverse  6.Print  q.Quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="259"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                  ################################################################                  \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="260"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input your order:    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="261"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="262"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="263"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="264"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>欸，我不就闭关了一会，怎么大家都睡了啊？？？</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20210325205557863.gif#pic_center" alt="在这里插入图片描述"></p>
<p>除了满足基本要求外，鄙人还作贱自己添加了几个小小的功能：<br>
1、程序只会读取输入的第一个字符作为指令，且程序在读到除以上字符外的其他字符时，都会提示用户重新输入，直至输入正确指令。<br>
2、程序在读取输入时会通过 scanf 函数的返回值判断输入是否达到要求，若返回值错误，则会提示用户重新输入，直至输入格式完全正确，来提高程序的健壮性。<br>
3、程序在每次读取输入之后都会清空缓冲区中的字符，避免存留字符对下一次的读取造成严重影响，可进一步防止程序崩溃。<br>
4、在合并总表及翻转总表时，采用复制节点的方式，保证原表节点的信息不变，因此在合并或翻转后打印原表，也不会出现存放数据错误的现象。<br>
5、在插入节点之后都会输出插入的节点信息，便于用户纠错并删除错误节点。</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325210529490.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
<strong>敲黑板！！！数据结构非常非常非常地难，请反复反复反复练习。（<s>自己都做不到凭什么说别人。。。</s> ）</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210325210704926.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>线性结构及其应用</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>实验</tag>
        <tag>数组</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>RLC串联谐振电路</title>
    <url>/Electrotechnics/RLC%E4%B8%B2%E8%81%94%E8%B0%90%E6%8C%AF%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="实验目的"><a class="anchor" href="#实验目的">#</a> 实验目的</h2>
<p>(1)	通过实验进一步理解 RLC 串联电路的频率特性；<br>
(2)	了解串联谐振的现象，研究电路参数对串联谐振电路的影响；<br>
(3)	理解串联谐振电路的选频特性及应用，掌握谐振曲线的测量方法；<br>
(4)	学会使用仿真实验平台查看电压和电流在不同频率表下的波形，并且根据波形找到发生串联谐振时的频率。<br>
(5)	学会通过仿真实验平台来分析不同频率、不同阻值情况下电压和电流波形的变化情况。</p>
<h2 id="实验原理"><a class="anchor" href="#实验原理">#</a> 实验原理</h2>
<p>(1) RLC 串联谐振原理：在 RLC 串联电路中，当外加角频率为 ω 的正弦电压 U 时，电路中的电流为 I，即 I=U/(R^'+j (ωL-1/ωC) )，式中，R^'=R+r，r 为线圈电阻。当 ωL=1/ωC 时，电路发生串联谐振，谐振频率为 f_0=1/(2π√LC)，	该式即为产生串联谐振顶点条件。可见，改变 L、C 或电源频率 f 都可以实现谐振。本实验通过改变外加电压的频率来使电路达到谐振。<br>
(2) 原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601214801596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实验过程与原始数据"><a class="anchor" href="#实验过程与原始数据">#</a> 实验过程与原始数据</h2>
<ol>
<li>验证串联谐振电路<br>
 (1) 实验过程：在画布中插入一个电阻 R、一个电感 L、一个电容 C、一个电源 U，再将电阻赋为 51Ω、电感赋为 10mH、电容赋为 0.022μF、电源赋为交流 250mV（幅值）。然后设置仿真频率范围，再查看电阻的电压波形和电流波形在不同频率下的变化情况，找到电压和电流同相位时的所对应的频率，即为该电路的串联谐振频率。之后将电源的频率调整为发生串联谐振时的频率，重新运行电路，测出电压和电流等相关参数，并计算品质因数。<br>
(2) 原始数据（U = 250mV（幅值））：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601214949213.png" alt="在这里插入图片描述"></li>
<li>测量串联谐振曲线<br>
 (1)	实验过程：先将电阻的阻值赋为 100Ω，同时将电源的频率设定为某一特定值，然后运行电路图，测量电压和电流等相关参数，并计算品质因数。重复上述过程。之后再讲电阻的阻值赋为 510Ω，再重复上述过程。<br>
(2)	原始数据：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215137285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601215149575.png" alt="在这里插入图片描述"></li>
<li>用示波器观察 RLC 串联谐振电路的波形<br>
 (1)	实验过程：将电源的频率赋为串联谐振频率，然后运行电路图，查看并记录电压和电流的波形。之后更换电源的频率，重复上述过程。<br>
(2)	原始数据：串联谐振频率为 10.7kHz，低频为 5kHz，高频为 20kHz。</li>
</ol>
<h2 id="实验结果及分析"><a class="anchor" href="#实验结果及分析">#</a> 实验结果及分析</h2>
<ol>
<li>验证串联谐振电路<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215233796.png" alt="在这里插入图片描述"><br>
 (2)	分析：当电路发生串联谐振时，电容和电感的电压近似相等，此时电路中的电流达到最大值。</li>
<li>测量串联谐振曲线<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215310673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601215323478.png" alt="在这里插入图片描述"><br>
 (2)	分析：<br>
①无论是电阻的阻值如何变化，电压和电流的波形在不同频率下的变化情况相同，即串联谐振频率的大小与电阻无关，且在发生串联谐振时，电压和电流取得最大值。<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215344226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601215349545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
②电路的品质因数随着电阻的增大而减小。<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215418257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
③Q 值越大，通用串联谐振曲线的形状越尖锐，电路的选择性越好。<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215459941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>用示波器观察 RLC 串联谐振电路的波形<br>
实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601215538222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/2021060121555242.png" alt="在这里插入图片描述"></li>
</ol>
<h2 id="思考题"><a class="anchor" href="#思考题">#</a> 思考题</h2>
<p>(1)①电压和电流同相位；<br>
②电容和电感的电压大小相等；<br>
③电路中电压和电流达到最大值。</p>
<h2 id="实验体会与建议"><a class="anchor" href="#实验体会与建议">#</a> 实验体会与建议</h2>
<p>(1)	体会：通过这次实验，我学会了如何使用仿真实验平台来查看电压和电流在不同频率下的波形并根据波形找到串联谐振频率，还掌握了通过仿真实验平台来分析不同频率、不通过阻值情况下电压和电流的波形变化情况。而且，这次实验使我对串联谐振的原理以及发生串联谐振时电路具有的特征的理解更加深刻，并熟练掌握了判断电路发生了串联谐振的方法。在此之外，我对串联谐振电路的相关参数的理论计算也变得更加熟练。<br>
(2)	建议：课前尽可能明确课程目标及实验要求，以防课上花费较长时间在修改和统一实验操作上。</p>
<p><strong>敲黑板！！！</strong></p>
<p><strong>叠加定理与戴维南定理 / RLC 串联谐振电路 / 单管交流电压放大电路 / 集成放大器的应用完整实验报告</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTkzMjI4OTY="> https://download.csdn.net/download/KissMoon_/19322896</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210601215936285.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>电工与电子技术</category>
        <category>RLC串联谐振电路</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>电工与电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的世界</title>
    <url>/Hello-MyWorld/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
      <categories>
        <category>我的世界</category>
        <category>欢迎来到我的世界</category>
      </categories>
      <tags>
        <tag>helloWorld</tag>
      </tags>
  </entry>
  <entry>
    <title>树形结构及其应用</title>
    <url>/DataStructure/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><strong>以前，我总以为，树象征着生命，象征的生机；<br>
后来，我遇到了那个它，我才知道，树会让你死亡，还是死无全尸的那种。。。</strong></p>
<p><strong>你以为的树：</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20210328211127278.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>实际中的树：</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20210328211138237.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
<strong>好家伙，先序后序中序，后序先序中序，中序后序先序，绕死一个算一个！！！</strong></p>
<p>话不多说，题来（<s>如果我被绑架了我就眨眨眼</s> ）</p>
<p>题目 1：<br>
<strong>按先序序列建立二叉树，并输出该二叉树的中序遍历和后序遍历</strong><br>
输入：<br>
先序序列：ABDH##I##E##CF#J##G##（# 表示空）<br>
输出：<br>
中序序列：HDIBEAFJCG<br>
 后序序列： HIDEBJFGCA<br>
 注意：当只输入一个 #时，需返回空二叉树<br>
图解：<br>
<img data-src="https://img-blog.csdnimg.cn/20210327174243293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
题目 2：<br>
<strong>给定一棵二叉树的后序和中序遍历序列，构造该二叉树，并输出该二叉树的前序遍历</strong><br>
输入：<br>
后序序列： 3424321<br>
 中序序列： 3241423<br>
 输出：<br>
前序序列： 1234243<br>
 注意：当输入的后序和中序遍历序列不能够构造出二叉树时，应输出：Unable to build a binary tree，这里的不能构造二叉树包括序列长度不一致、序列所含字符不一致以及不能够构造一棵二叉树等。<br>
图解：<br>
<img data-src="https://img-blog.csdnimg.cn/20210327174544249.png#pic_center" alt="在这里插入图片描述"><br>
题目 3：<br>
<strong>给定一棵二叉树，返回该二叉树的叶子节点数和宽度</strong><br>
输入：<br>
二叉树根节点：T<br>
 输出：<br>
二叉树的叶子节点数：5<br>
 二叉树的宽度：4<br>
 图解：<br>
<img data-src="https://img-blog.csdnimg.cn/20210327175202498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
题目 4：<br>
<strong>给定两棵二叉树，判断两棵二叉树是否等价。等价输出 1，否则输出 0</strong><br>
 输入：<br>
二叉树根节点：T<br>
 输出：<br>
图 1：1<br>
 图 2：0<br>
 图解：<br>
<img data-src="https://img-blog.csdnimg.cn/20210327175421252.png#pic_center" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210327175429512.png#pic_center" alt="在这里插入图片描述"></p>
<p>想必很多小伙伴们看完题后嗖嗖嗖地就把代码敲出来了吧（<strong>是我不配</strong>），就让我独自承受脱发的痛苦吧。</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210328211919930.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">21</span>  </span><span class="token comment">// 后序序列和中序序列字符的最大个数为 N-1</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> FLAG<span class="token punctuation">;</span> <span class="token comment">// 标识能否由后序序列和中序序列建立二叉树，能为 1，否为 0</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">char</span> data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span>TreeNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span>  <span class="token comment">// 定义树节点的结构体</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 函数功能：先序建立二叉树，并返回指向该二叉树的指针</span></pre></td></tr><tr><td data-num="16"></td><td><pre>BiTree <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    BiTree bt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">char</span> data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            bt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 字符 #表示节点为空</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            bt <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>bt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OVERFLOW\n!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            bt<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token comment">// 树根</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            bt<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先序建立左子树</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            bt<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先序建立右子树</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> bt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// 函数功能：先序遍历二叉树</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 访问节点</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先序遍历左子树</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先序遍历右子树</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// 函数功能：中序遍历二叉树</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历左子树</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 访问节点</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历右子树</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// 函数功能：后序遍历二叉树</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">void</span> <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 后序遍历左子树</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 后序遍历右子树</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 访问节点</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment">// 判断能否根据后序序列和中序序列构造二叉树，此函数的判定内容为后序序列和中序序列所含的字符是否相同</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token comment">// 说明：如果后序序列和中序序列能构造二叉树，那么其递归的左子树和右子树所含字符始终相同，当有任意一对左右子树含有不同字符时，输入的序列不能构成二叉树</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">void</span> <span class="token function">Judge</span><span class="token punctuation">(</span><span class="token keyword">char</span> post<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> in<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strchr</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 后序序列含有中序序列所不含有的字符，不能构成二叉树</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>            FLAG <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// 中序序列含有后序序列所不含有的字符，不能构成二叉树</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strchr</span><span class="token punctuation">(</span>post<span class="token punctuation">,</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            FLAG <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token comment">// 函数功能：根据后序序列与中序序列构造二叉树，并返回指向该二叉树的指针</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token comment">// 参数说明：post [] 为后序序列，in [] 为中序序列，num 为字符个数</span></pre></td></tr><tr><td data-num="102"></td><td><pre>BiTree <span class="token function">PostInCreate</span><span class="token punctuation">(</span><span class="token keyword">char</span> post<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> in<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    BiTree bt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> num_left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num_right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>    <span class="token keyword">char</span> post_left<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in_left<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> post_right<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in_right<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>    <span class="token function">Judge</span><span class="token punctuation">(</span>post<span class="token punctuation">,</span> in<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断后序序列和前序序列能否构成二叉树</span></pre></td></tr><tr><td data-num="108"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> FLAG<span class="token punctuation">)</span>  <span class="token comment">// 序列不为空且能够构成二叉树</span></pre></td></tr><tr><td data-num="109"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>        bt <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        bt<span class="token operator">-></span>data <span class="token operator">=</span> post<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 树根为后序序列的最后一个字符</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> bt<span class="token operator">-></span>data<span class="token punctuation">)</span>  <span class="token comment">// 求出树根在中序序列中的位置</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>        num_left <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 左子树的节点个数</span></pre></td></tr><tr><td data-num="118"></td><td><pre>        num_right <span class="token operator">=</span> num<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 右子树的节点个数</span></pre></td></tr><tr><td data-num="119"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_left<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="120"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>            post_left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 左子树的后序序列</span></pre></td></tr><tr><td data-num="122"></td><td><pre>            in_left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 左子树的中序序列</span></pre></td></tr><tr><td data-num="123"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>            post_right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> post<span class="token punctuation">[</span>num<span class="token operator">-</span>num_right<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 右子树的后序序列</span></pre></td></tr><tr><td data-num="127"></td><td><pre>            in_right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>num<span class="token operator">-</span>num_right<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 右子树的中序序列</span></pre></td></tr><tr><td data-num="128"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>        bt<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">PostInCreate</span><span class="token punctuation">(</span>post_left<span class="token punctuation">,</span> in_left<span class="token punctuation">,</span> num_left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据后序序列与中序序列构造左子树</span></pre></td></tr><tr><td data-num="130"></td><td><pre>        bt<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">PostInCreate</span><span class="token punctuation">(</span>post_right<span class="token punctuation">,</span> in_right<span class="token punctuation">,</span> num_right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据后序序列与中序序列构造右子树</span></pre></td></tr><tr><td data-num="131"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>    <span class="token keyword">return</span> bt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="134"></td><td><pre></pre></td></tr><tr><td data-num="135"></td><td><pre><span class="token comment">// 函数功能：计算并返回叶子节点的数量</span></pre></td></tr><tr><td data-num="136"></td><td><pre><span class="token keyword">int</span> <span class="token function">CountLeafSum</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span>  <span class="token comment">// 空树</span></pre></td></tr><tr><td data-num="139"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">// 只含树根节点</span></pre></td></tr><tr><td data-num="141"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="142"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">CountLeafSum</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">CountLeafSum</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 叶子节点的数量等于左子树叶子节点的数量 + 右子树叶子结点的数量</span></pre></td></tr><tr><td data-num="143"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="144"></td><td><pre></pre></td></tr><tr><td data-num="145"></td><td><pre><span class="token comment">// 函数功能：计算并返回二叉树的高度</span></pre></td></tr><tr><td data-num="146"></td><td><pre><span class="token keyword">int</span> <span class="token function">CountHeight</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>    <span class="token keyword">int</span> ldepth<span class="token punctuation">,</span> rdepth<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span>  <span class="token comment">// 空树</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">// 只含树根节点</span></pre></td></tr><tr><td data-num="152"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>    ldepth <span class="token operator">=</span> <span class="token function">CountHeight</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左子树的高度</span></pre></td></tr><tr><td data-num="154"></td><td><pre>    rdepth <span class="token operator">=</span> <span class="token function">CountHeight</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 右子树的高度</span></pre></td></tr><tr><td data-num="155"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ldepth <span class="token operator">></span> rdepth <span class="token operator">?</span> ldepth <span class="token operator">:</span> rdepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 二叉树的高度是其左子树和右子树中较高的一个子树的高度加 1</span></pre></td></tr><tr><td data-num="156"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre><span class="token comment">// 函数功能：求出一个二叉树每一层的节点数量</span></pre></td></tr><tr><td data-num="159"></td><td><pre><span class="token comment">// 参数说明：数组 count [] 记录每一层的节点数</span></pre></td></tr><tr><td data-num="160"></td><td><pre><span class="token keyword">void</span> <span class="token function">GetWidth</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> LEVEL<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="161"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">Queue</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>        BiTree Node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="164"></td><td><pre>        <span class="token keyword">int</span> level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>    <span class="token punctuation">&#125;</span>Q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span>  <span class="token comment">// 空树，直接返回</span></pre></td></tr><tr><td data-num="168"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="170"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>        Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>Node <span class="token operator">=</span> T<span class="token punctuation">;</span>  <span class="token comment">// 队头为树根</span></pre></td></tr><tr><td data-num="172"></td><td><pre>        Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 树根的层级为 1</span></pre></td></tr><tr><td data-num="173"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">&lt;=</span> rear<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="174"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="175"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>Node<span class="token operator">-></span>lchild<span class="token punctuation">)</span>  <span class="token comment">// 队头树根的左子树存在</span></pre></td></tr><tr><td data-num="176"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>                Q<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>Node <span class="token operator">=</span> Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>Node<span class="token operator">-></span>lchild<span class="token punctuation">;</span>  <span class="token comment">// 队尾插入左子树的树根</span></pre></td></tr><tr><td data-num="178"></td><td><pre>                Q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">=</span> Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 左子树树根的层级为当前树根的层级加 1</span></pre></td></tr><tr><td data-num="179"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>Node<span class="token operator">-></span>rchild<span class="token punctuation">)</span>  <span class="token comment">// 队头树根的右子树存在</span></pre></td></tr><tr><td data-num="181"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>                Q<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>Node <span class="token operator">=</span> Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>Node<span class="token operator">-></span>rchild<span class="token punctuation">;</span>  <span class="token comment">// 队尾插入右子树的树根</span></pre></td></tr><tr><td data-num="183"></td><td><pre>                Q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">=</span> Q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 右子树树根的层级为当前树根的层级加 1</span></pre></td></tr><tr><td data-num="184"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>            front<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 队头指针下移</span></pre></td></tr><tr><td data-num="186"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="187"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rear<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="188"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="189"></td><td><pre>            LEVEL<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Node<span class="token operator">-></span>data<span class="token punctuation">;</span>  <span class="token comment">// 层序遍历</span></pre></td></tr><tr><td data-num="190"></td><td><pre>            LEVEL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 记录节点个数</span></pre></td></tr><tr><td data-num="191"></td><td><pre>            count<span class="token punctuation">[</span>Q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历整个队列，统计各层级的节点数</span></pre></td></tr><tr><td data-num="192"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="194"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="195"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="196"></td><td><pre></pre></td></tr><tr><td data-num="197"></td><td><pre><span class="token comment">// 函数功能：判断两树是否等价，是返回 1，否返回 0</span></pre></td></tr><tr><td data-num="198"></td><td><pre><span class="token comment">// 参数说明：T1: 第一棵二叉树，T2: 第二棵二叉树</span></pre></td></tr><tr><td data-num="199"></td><td><pre><span class="token keyword">int</span> <span class="token function">IsEquivalent</span><span class="token punctuation">(</span>BiTree T1<span class="token punctuation">,</span> BiTree T2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="200"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="201"></td><td><pre>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="202"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>T2<span class="token punctuation">)</span>  <span class="token comment">// 两棵树均为空树</span></pre></td></tr><tr><td data-num="203"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="204"></td><td><pre>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="205"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="206"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>T1 <span class="token operator">&amp;&amp;</span> T2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>T1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>T2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 一棵为空树，另一棵不为空树</span></pre></td></tr><tr><td data-num="207"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="208"></td><td><pre>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="209"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="210"></td><td><pre>    <span class="token keyword">else</span>  <span class="token comment">// 两棵树均不为空树</span></pre></td></tr><tr><td data-num="211"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="212"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>data <span class="token operator">==</span> T2<span class="token operator">-></span>data<span class="token punctuation">)</span>  <span class="token comment">// 节点信息相同</span></pre></td></tr><tr><td data-num="213"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="214"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsEquivalent</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>lchild<span class="token punctuation">,</span> T2<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 左子树等价</span></pre></td></tr><tr><td data-num="215"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="216"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsEquivalent</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>rchild<span class="token punctuation">,</span> T2<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 右子树等价</span></pre></td></tr><tr><td data-num="217"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="218"></td><td><pre>                    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="219"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="220"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="222"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="223"></td><td><pre>    <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="224"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="225"></td><td><pre></pre></td></tr><tr><td data-num="226"></td><td><pre><span class="token comment">// 任务 1：实现二叉树的先序、中序、后序遍历</span></pre></td></tr><tr><td data-num="227"></td><td><pre><span class="token keyword">void</span> <span class="token function">Task1</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="228"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="229"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nStart task (1) Create Tree in PreOrder\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="230"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="231"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="232"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PreOrderTraverse:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="233"></td><td><pre>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="234"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"InOrderTraverse:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="237"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PostOrderTraverse:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="239"></td><td><pre>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="240"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>    <span class="token keyword">else</span>  <span class="token comment">// 空树</span></pre></td></tr><tr><td data-num="243"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="244"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The BiTree is NULL!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="245"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="246"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="247"></td><td><pre></pre></td></tr><tr><td data-num="248"></td><td><pre><span class="token comment">// 任务 2：根据后序序列和中序序列构造二叉树，当这两个序列不能构造二叉树时，输出 "Can not build a BiTree!"</span></pre></td></tr><tr><td data-num="249"></td><td><pre>BiTree <span class="token function">Task2</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="250"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="251"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nStart task (2) Input the postOrder and inOrder Sequence ,Then build the tree\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="252"></td><td><pre>    <span class="token keyword">char</span> post<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 后序序列</span></pre></td></tr><tr><td data-num="253"></td><td><pre>    <span class="token keyword">char</span> in<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 中序序列</span></pre></td></tr><tr><td data-num="254"></td><td><pre>    <span class="token keyword">int</span> postlen<span class="token punctuation">,</span> inlen<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="255"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="256"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input the postorder sequence(less than %d nodes):  "</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="257"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="258"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="259"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input the inorder sequence(less than %d nodes):  "</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="260"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="261"></td><td><pre>    postlen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="262"></td><td><pre>    inlen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="263"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>postlen <span class="token operator">!=</span> inlen<span class="token punctuation">)</span>  <span class="token comment">// 序列长度不同，不能构造二叉树</span></pre></td></tr><tr><td data-num="264"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="265"></td><td><pre>        FLAG <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="266"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="267"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="268"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="269"></td><td><pre>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token function">PostInCreate</span><span class="token punctuation">(</span>post<span class="token punctuation">,</span> in<span class="token punctuation">,</span> postlen<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归构造二叉树</span></pre></td></tr><tr><td data-num="270"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span>  <span class="token comment">// 能够构造二叉树</span></pre></td></tr><tr><td data-num="271"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="272"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PreOrderTraverse:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="273"></td><td><pre>            <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先序遍历二叉树</span></pre></td></tr><tr><td data-num="274"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="275"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="276"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="277"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>FLAG<span class="token punctuation">)</span>  <span class="token comment">// 不能构造二叉树</span></pre></td></tr><tr><td data-num="278"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="279"></td><td><pre>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 空树</span></pre></td></tr><tr><td data-num="280"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can not build a BiTree!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="281"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="282"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">*</span>T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="283"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="284"></td><td><pre></pre></td></tr><tr><td data-num="285"></td><td><pre><span class="token comment">// 任务 3：计算并打印二叉树的叶子节点个数、高度、宽度</span></pre></td></tr><tr><td data-num="286"></td><td><pre><span class="token keyword">void</span> <span class="token function">Task3</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="287"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="288"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nStart task (3) ------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="289"></td><td><pre>    <span class="token keyword">int</span> maxwidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 树的宽度，初始化为 0</span></pre></td></tr><tr><td data-num="290"></td><td><pre>    <span class="token keyword">int</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="291"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="292"></td><td><pre>    <span class="token keyword">int</span> count<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="293"></td><td><pre>    <span class="token keyword">char</span> LEVEL<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="294"></td><td><pre>    height <span class="token operator">=</span> <span class="token function">CountHeight</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 树的高度</span></pre></td></tr><tr><td data-num="295"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number of leaf nodes of the tree is:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="296"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">CountLeafSum</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印叶子节点的数量</span></pre></td></tr><tr><td data-num="297"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The height of the tree is:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="298"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印树的高度</span></pre></td></tr><tr><td data-num="299"></td><td><pre>    <span class="token function">GetWidth</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> count<span class="token punctuation">,</span> LEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="300"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="301"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="302"></td><td><pre></pre></td></tr><tr><td data-num="303"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxwidth<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="304"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="305"></td><td><pre>            maxwidth <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="306"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="307"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="308"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LevelOrderTraverse:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="309"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>LEVEL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="310"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="311"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The BiTree is NULL!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="312"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="313"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> LEVEL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="314"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="315"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> LEVEL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="316"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="317"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="318"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="319"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe No.%2d level has %d nodes."</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="320"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="321"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe width of the tree is:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="322"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> maxwidth<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印树的宽度</span></pre></td></tr><tr><td data-num="323"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="324"></td><td><pre></pre></td></tr><tr><td data-num="325"></td><td><pre><span class="token comment">// 任务 4：判断两个二叉树是否等价</span></pre></td></tr><tr><td data-num="326"></td><td><pre><span class="token keyword">void</span> <span class="token function">Task4</span><span class="token punctuation">(</span>BiTree T1<span class="token punctuation">,</span>BiTree T2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="327"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="328"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nStart task (4) Are two Bitrees equivalent?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="329"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(Equal: 1    Unequal: 0)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="330"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Their relationship is %d.\n\n"</span><span class="token punctuation">,</span><span class="token function">IsEquivalent</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="331"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="332"></td><td><pre></pre></td></tr><tr><td data-num="333"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="334"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="335"></td><td><pre>    BiTree Bt1<span class="token punctuation">,</span> Bt2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="336"></td><td><pre>    <span class="token keyword">char</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="337"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.Create BiTree_one with PRE    2.Create BiTree_two with POST and IN\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="338"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3.Count BiTree_one    4.Count BiTree_two    5.Judge whether they are equal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="339"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input your order(q to quit):  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="340"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="341"></td><td><pre>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="342"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>order<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="343"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="344"></td><td><pre>            <span class="token keyword">case</span><span class="token char">'1'</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Create BiTree_one in PreOrder(less than %d nodes):  "</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="345"></td><td><pre>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="346"></td><td><pre>                    Bt1<span class="token operator">=</span><span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="347"></td><td><pre>                    <span class="token function">Task1</span><span class="token punctuation">(</span>Bt1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="348"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="349"></td><td><pre>            <span class="token keyword">case</span><span class="token char">'2'</span><span class="token operator">:</span>FLAG <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="350"></td><td><pre>                    <span class="token function">Task2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bt2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="351"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="352"></td><td><pre>            <span class="token keyword">case</span><span class="token char">'3'</span><span class="token operator">:</span><span class="token function">Task3</span><span class="token punctuation">(</span>Bt1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="353"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="354"></td><td><pre>            <span class="token keyword">case</span><span class="token char">'4'</span><span class="token operator">:</span><span class="token function">Task3</span><span class="token punctuation">(</span>Bt2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="355"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="356"></td><td><pre>            <span class="token keyword">case</span><span class="token char">'5'</span><span class="token operator">:</span><span class="token function">Task4</span><span class="token punctuation">(</span>Bt1<span class="token punctuation">,</span> Bt2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="357"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="358"></td><td><pre>            <span class="token keyword">default</span><span class="token operator">:</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="359"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="360"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="361"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput your order(q to quit):  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="362"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="363"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="364"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210327175926301.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
虽然说这里有 4 个题目，但还是要把它们封装成一个程序，并且可以通过循环来让程序能够反复实现我们所需的功能（<strong>要是提交 4 个程序给老师，我怕是不想活了</strong>）</p>
<p><strong>敲黑板！！！</strong><br>
<strong>可能很多人都觉得我发这些实验有用吗，都没什么干货，题也不分析，知识点也不总结，就给出题干代码来骗赞。。。</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20210328213802918.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>你这么说我就不乐意了（<s>还是蛮赞同的</s> *），发题主要是为了看到这篇文章的小伙伴们能够动脑动手敲一敲，在不懂的地方可以参考一下我的代码（<s>帮我找找 bug 呀</s> ），里面也有部分解析（<s>我承认确实是部分</s> ），知识点啥的呢以后会分点细讲的（<s>手动单曲循环《后来》</s> ），所以还请大家多多包涵和支持，共同进步啊！！！</strong><br>
<img data-src="https://img-blog.csdnimg.cn/20210328214024165.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>​</p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>树形结构及其应用</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>实验</tag>
        <tag>树</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>单管交流电压放大电路</title>
    <url>/Electrotechnics/%E5%8D%95%E7%AE%A1%E4%BA%A4%E6%B5%81%E7%94%B5%E5%8E%8B%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="实验目的"><a class="anchor" href="#实验目的">#</a> 实验目的</h2>
<p>(1)	掌握晶体管放大电路静态工作点的调试方法。<br>
(2)	了解静态工作点的改变对放大电路性能的影响。<br>
(3)	了解饱和失真和截止失真对放大电路输出电压波形的影响。<br>
(4)	进一步熟悉仿真实验平台的各种基本操作。</p>
<h2 id="实验原理"><a class="anchor" href="#实验原理">#</a> 实验原理</h2>
<p>(1)	实验原理：单管交流电压放大电路的最典型电路是共发射极分压偏置式交流电压放大电路，原理图如下。在原理图中，晶体管为非线性元件，要使放大器不产生非线性失真，就必须建立一个合适的静态工作点，使晶体管工作在放大区。若 Q 点过低（IB 小，则 IC 小，UCE 大），晶体管进入截止区，产生截止失真；Q 点过高（IB、IC 大，UCE 小），晶体管将进入饱和区，产生饱和失真。调节基极电阻 RP 即可调整静态工作点。电压放大倍数为<br>
<img data-src="https://img-blog.csdnimg.cn/20210601220449802.png" alt="在这里插入图片描述"><br>
 (2)	原理图：<br>
<img data-src="https://img-blog.csdnimg.cn/2021060122051847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实验过程与原始数据"><a class="anchor" href="#实验过程与原始数据">#</a> 实验过程与原始数据</h2>
<ol>
<li>调整静态工作点<br>
 (1)	实验过程：先根据 UCE=1/2VCC 计算出电阻 RP 阻值的大致范围，然后将电阻 RP 进行赋值，运行电路图，不断对电阻 RP 的阻值进行微小调整，直至出现符合要求的静态工作点。<br>
(2)	原始数据：<br>
RB1=20kΩ，RB2=20kΩ，RC=2.4kΩ，RE=1kΩ，C1=10μF，C2=10μF，CE=47μF，VCC=12V，Ui=10mV（有效值），频率 f=1kHz<br>
<img data-src="https://img-blog.csdnimg.cn/20210601220558523.png" alt="在这里插入图片描述"></li>
<li>测量电压放大倍数<br>
 (1)	实验过程：当静态工作点测量完毕之后，保持静态工作点不变，接通信号源。在画布中插入一个电阻 RL，开始时 RL 无需接入电路，即 RL=∞，运行电路图，测量 UO 并计算 Au；然后将 RL 接入电路，其阻值分别赋为 10kΩ 和 1k 欧姆，重复上述过程。<br>
(2)	原始数据：<br>
RB1=20kΩ，RB2=20kΩ，RC=2.4kΩ，RE=1kΩ，RP=44.67kΩ，C1=10μF，C2=10μF，CE=47μF，VCC=12V，Ui=10mV（幅值），频率 f=1kHz<br>
<img data-src="https://img-blog.csdnimg.cn/2021060122062057.png" alt="在这里插入图片描述"></li>
<li>观测静态工作点对输出电压波形的影响<br>
 (1)	实验过程：<br>
①	最佳静态工作点的情况：调节 RP，使静态工作点在最佳位置时，观察输出电压波形；然后断开信号源，测量 UBE、UCE、VB 的电压值以及 IB、IC 的电流值。<br>
②	饱和失真的情况：将 RP 的阻值逐渐减小，输入信号保持不变，观察输出电压波形，使波形出现饱和失真。然后断开信号源，测量 UBE、UCE、VB 的电压值以及 IB、IC 的电流值。<br>
③	输入信号增大的情况：输入信号 Ui=10mV，频率 f=1kHz，调节 RP，使之达到最佳静态工作点。然后逐渐增大 Ui，观察输出电压波形，使输出电压波形同时出现饱和失真和截止失真，测量 UBE、UCE、VB 的电压值以及 IB、IC 的电流值。<br>
(2)	原始数据：<br>
RB1=20kΩ，RB2=20kΩ，RC=2.4kΩ，RE=1kΩ，C1=10μF，C2=10μF，CE=47μF，VCC=12V</li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/20210601220741694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
四、实验结果及分析</p>
<ol>
<li>调整静态工作点<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601220810184.png" alt="在这里插入图片描述"></li>
<li>测量电压放大倍数<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601220830736.png" alt="在这里插入图片描述"><br>
 (2)	分析：电压放大倍数 Au 随着负载阻值 RL 的减小而减小。<br>
<img data-src="https://img-blog.csdnimg.cn/20210601220842469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>观测静态工作点对输出电压波形的影响<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601220908135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
 (2)	分析：输入信号合适时，如果静态工作点过高，会出现饱和失真，如果静态工作点过低，会出现截止失真；静态工作点合适时，如果输入信号的幅值过大，则会导致电路同时出现饱和失真和截止失真。</li>
</ol>
<h2 id="思考题"><a class="anchor" href="#思考题">#</a> 思考题</h2>
<p>(1)	晶体管的静态工作点不合适。Q 点过低时会导致截止失真，Q 点过高时会导致饱和失真。可以通过调整 RB 的阻值来获得最佳静态工作点。<br>
(2)	增大负载 RL 的阻值。</p>
<h2 id="实验体会与建议"><a class="anchor" href="#实验体会与建议">#</a> 实验体会与建议</h2>
<p>(1)	体会：在本次实验中，我学会了如何寻找放大电路的最佳静态工作点，并测量和计算最佳静态工作点时电路的各项参数；另外，我还学会了测量并分析电压放大倍数随着负载阻值的改变时产生的变化情况；最后，我还进一步理解了产生饱和失真和截止失真的条件以及两种失真对电路输出电压波形的影响。本次实验是对放大电路的综合考量，极大地增强了我对放大电路的原理及原理图、失真产生条件、输出电压特性、电压电流放大倍数等方面的理解。<br>
(2)	建议：在本次实验中，一些原理和步骤较难理解，而且在操作上不易实现，希望能够在正式实验之前能够对实验过程中可能出现的重点难点问题进行相应的提示和指导。</p>
<p><strong>敲黑板！！！</strong></p>
<p><strong>叠加定理与戴维南定理 / RLC 串联谐振电路 / 单管交流电压放大电路 / 集成放大器的应用完整实验报告</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTkzMjI4OTY="> https://download.csdn.net/download/KissMoon_/19322896</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210601221106858.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>电工与电子技术</category>
        <category>单管交流电压放大电路</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>电工与电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>集成运算放大器的应用</title>
    <url>/Electrotechnics/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="实验目的"><a class="anchor" href="#实验目的">#</a> 实验目的</h2>
<p>(1)	掌握集成运算放大器的基本运算功能及正确使用。<br>
(2)	掌握集成运算放大器常用单元电路的设计和调试方法。<br>
(3)	掌握在仿真实验平台中导入和调试新元件的方法。</p>
<h2 id="实验原理"><a class="anchor" href="#实验原理">#</a> 实验原理</h2>
<ol>
<li>实验原理<br>
集成运算放大器是由高开环电压放大倍数的多级直接耦合放大器组成。从工作原理上，集成运算放大器可分为线性应用和非线性应用两个方面。在线性工作区内，其输出电压 uo 与输入电压 ui 的线性放大的关系为 uo=Auo（u+-u-）=Auoui，由于集成运算放大器的放大倍数 Auo 高达 104~107，若使 uo 为有限值，必须引入深度负反馈，使线性区加宽，构成集成运算放大器的线性运算电路。<br>
在工程应用情况下，将集成运放视为理想运放，就是将集成运放的各项技术指标理想化，满足下列条件的运算放大器称为理想运放，即<br>
 (1) 开环电压放大倍数 Auo=∞<br>
(2) 输入阻抗 ri=∞<br>
(3) 输出阻抗 ro=0<br>
 (4) 带宽 fBW=∞<br>
(5) 失调与漂移均为零<br>
理想运放工作在线性区的分析依据是，输入端的虚短（u+=u-），输入端的虚断（i+=i-=0）和输入端的虚地（同相端接地时，u-=0）。<br>
理想运放工作在非线性区的分析依据是：<br>
u+&gt;u-, uo=+UOM          u-&gt;u+, uo=-UOM</li>
<li>原理图<br>
 (1)	电压跟随器，原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221504560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
 (2)	反向比例运算电路，原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221520539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>(3)	同向比例运算电路，原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221537472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
 (4)	减法器的设计，原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221601987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
 (5)	电压比较器，原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221621297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
 (6)	矩形波发生器，原理图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221637847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实验过程与原始数据"><a class="anchor" href="#实验过程与原始数据">#</a> 实验过程与原始数据</h2>
<ol>
<li>电压跟随器<br>
 (1)	实验过程：在画布中插入三个电压源和一个理想运放，将输入电压 ui 设置为直流 1V，然后按照原理图将各元件连接起来。运行电路图并测量输出电压 uo。<br>
(2)	原始数据：ui=1V<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221710662.png" alt="在这里插入图片描述"></li>
<li>反向比例运算电路<br>
 (1)	实验过程：在画布中插入三个电压源、一个理想运放和三个电阻，将 R1 赋为 20kΩ，R2 赋为 16.667kΩ，RF 赋为 100kΩ，然后按照原理图将各元件连接起来。不断改变输入电压 ui，运行电路图并测量输出电压 uo。<br>
(2)	原始数据：R1=20kΩ，R2=16.667kΩ，RF=100kΩ<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221728721.png" alt="在这里插入图片描述"></li>
<li>同向比例运算电路<br>
 (1)	实验过程：在画布中插入三个电压源、一个理想运放和三个电阻，将<br>
 R1 赋为 20kΩ，R2 赋为 16.667kΩ，RF 赋为 100kΩ，然后按照原理图将各元件连接起来。不断改变输入电压 ui，运行电路图并测量输出电压 uo。<br>
(2)	原始数据：R1=20kΩ，R2=16.667kΩ，RF=100kΩ<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221744385.png" alt="在这里插入图片描述"></li>
<li>减法器的设计<br>
 (1)	实验过程：在画布中插入四个电压源、一个理想运放和四个电阻，将 R1 赋为 10kΩ，R2 赋为 10kΩ，R3 赋为 100kΩ，RF 赋为 100kΩ，然后按照原理图将各元件连接起来。不断改变输入电压 ui1 和 ui2，运行电路图并测量输出电压 uo。该减法器可实现关系式 uo=10（ui2-ui1）。<br>
(2)	原始数据：R1=10kΩ，R2=10kΩ，R3=100Kω,RF=100kΩ<br>
<img data-src="https://img-blog.csdnimg.cn/2021060122180757.png" alt="在这里插入图片描述"></li>
<li>电压比较器<br>
 (1)	实验过程：在画布中插入三个电源、一个理想运放和两个电阻，将 R1 赋为 10kΩ，R2 赋为 10kΩ，ui 赋为交流 1V，频率为 1kHz，然后按照原理图将各元件连接起来。运行电路图，画出输出电压 uo 的波形和传输特性。<br>
(2)	原始数据：R1=10kΩ,R2=10kΩ,ui=1V，频率为 1kHz<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221824228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>矩形波发生器<br>
 (1)	实验过程：在画布中插入两个电源、一个理想运放、一个电容和四个电阻，按照原理图将各元件连接起来。不断改变 R1、R2、R3、RF 的阻值和 C 的容抗，运行电路并测量输出电压的周期、频率和幅度。<br>
(2)	原始数据：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221842497.png" alt="在这里插入图片描述"></li>
</ol>
<h2 id="实验结果及分析"><a class="anchor" href="#实验结果及分析">#</a> 实验结果及分析</h2>
<ol>
<li>电压跟随器<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221904795.png" alt="在这里插入图片描述"><br>
 (2)	分析：输出电压 uo 等于输入电压 ui，即电压跟随器不具有放大效应。</li>
<li>反向比例运算电路<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221918182.png" alt="在这里插入图片描述"><br>
 (2)	分析：在一定范围内，输出电压和输入电压满足 uo=-5ui，即输出电压与输入电压成正比，且其相位相反。当 ui 超过某一定值时，uo 不再增大。</li>
<li>同向比例运算电路<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221938255.png" alt="在这里插入图片描述"><br>
 (2)	分析：在一定范围内，输出电压与输入电压满足 uo=6ui，即输出电压与输入电压成正比，且其相位相同。当 ui 超过一定值时，uo 不再增大。</li>
<li>减法器的设计<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601221953204.png" alt="在这里插入图片描述"><br>
 (2)	分析：在一定范围内，输出电压与输入电压满足 uo=10（ui2-ui1），即输出电压与输入电压的差值成正比。当差值超过一定值时，uo 不再增大。</li>
<li>电压比较器<br>
 (1)	实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601222004269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601222009349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>矩形波发生器<br>
 (1)	实验结果<br>
<img data-src="https://img-blog.csdnimg.cn/20210601222021793.png" alt="在这里插入图片描述"></li>
</ol>
<h2 id="思考题"><a class="anchor" href="#思考题">#</a> 思考题</h2>
<p>(1)	不能。因为输出电压的幅值受到供能直流电源电压的限制，即输出电压的最大值不超过供能直流电源的电压。<br>
(2)	可将两个二极管串联在运放的正、负电源电路中，如果正接负、负接正，则二极管不导通，运放不工作，从而保护运放。电路图如下：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601222039316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实验体会与建议"><a class="anchor" href="#实验体会与建议">#</a> 实验体会与建议</h2>
<ol>
<li>体会：在本次实验中我掌握了多种集成运算放大电路的原理和常用单元电路的设计和调试方法，且能够利用仿真实验平台分析输出电压的波形和传输特性。另外，通过这次实验，我对集成运算放大电路的理论分析更加清晰准确，进一步提高了我对电路各项参数进行理论计算的能力。</li>
<li>本次实验难度中等偏易，且其对电路分析的能力要求不够高，可以适当提升实验难度。</li>
</ol>
<p><strong>敲黑板！！！</strong></p>
<p><strong>叠加定理与戴维南定理 / RLC 串联谐振电路 / 单管交流电压放大电路 / 集成放大器的应用完整实验报告</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTkzMjI4OTY="> https://download.csdn.net/download/KissMoon_/19322896</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210601222244974.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>电工与电子技术</category>
        <category>集成运算放大器的应用</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>电工与电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>叠加定理与戴维南定理</title>
    <url>/Electrotechnics/%E5%8F%A0%E5%8A%A0%E5%AE%9A%E7%90%86%E4%B8%8E%E6%88%B4%E7%BB%B4%E5%8D%97%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h2 id="实验目的"><a class="anchor" href="#实验目的">#</a> 实验目的</h2>
<p>(1)	学习和掌握常用电工电子仪器仪表使用方法；<br>
(2)	掌握电流、电压参考方向的含义及其应用；<br>
(3)	通过实验验证并加深对叠加定理、戴维南定理的理解；<br>
(4)	了解戴维南定理是化简复杂电路的一种有效方法；<br>
(5)	学习并熟练掌握仿真实验软件的基本操作。</p>
<h2 id="实验原理"><a class="anchor" href="#实验原理">#</a> 实验原理</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210601120506702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601120543324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601120601656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实验过程与原始数据"><a class="anchor" href="#实验过程与原始数据">#</a> 实验过程与原始数据</h2>
<p>（1）叠加定理<br>
实验过程：在画布中插入一个电压源 US，一个电流源 IS，两个电阻 R1 和 R2；将 US 的电压值置为 10V，IS 的电流值置为 20mA，R1 的阻值置为 220Ω，R2 的阻值置为 100Ω；用导线将各元件连接起来，然后接地。</p>
<ol>
<li>当 US，IS 共同作用时，直接运行电路图，然后测量各支路电流和电阻元件两端的电压值。</li>
<li>当电压源 US 单独作用时，保持电压源 US 的电压值不变，将电流源 IS 的电流值置为 0，然后运行电路图，再测量各支路电流和电阻元件两端的电压值。</li>
<li>当电流源 IS 单独作用时，将电流源 IS 的电流值恢复为 20mA，电压源 US 的电压值置为 0，然后运行电路图，再测量各支路电流和电阻元件两端的电压值。<br>
初始数据：电压源 US=10V，直流电流源 IS=20mA，电阻 R1=220Ω，R2=100Ω<br>
 理论值计算结果如下（V/mA）：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601120718798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
（2）戴维南定理<br>
实验过程：在画布中插入两个电压源 US 和 UOC，一个电流源 IS，六个电阻 R1、R2、R3、RS、RL1、RL2；将 US 的电压值置为 10V，IS 的电流值置为 20mA，R1 的阻值置为 510Ω，R2 的阻值置为 220Ω，R3 的阻值置为 100Ω；用导线将元件 US、IS、R1、R2、R3、RL1 和 UOC、RS 和 RL2 分别连接，然后各自接地；</li>
<li>测量有源一端口网络的等效电路参数：将 RL1 与 ab 端断开，然后运行电路图，测量出 ab 端开路电压，将电压源 UOC 的电压值置为该开路电压的值。在画布中插入一个电压源 UO，将其电压值置为 10V，并用导线将其与 ab 两端连接起来，然后运行电路图，测量出端口电流 IO，计算出等效内阻，将电阻 RS 的阻值置为该等效内阻。</li>
<li>测量有缘一端口网络的外特性：用将 RL 与 ab 端连接起来，然后多次调节 RL1 和 RL2 的阻值，该过程需保证两者阻值相等，然后运行电路图，测量出通过 RL1 和 RL2 的电流及 RL1 和 RL2 两端电压。<br>
初始数据：US=10V，IS=20mA，R1=510Ω，R2=220Ω，R3=100Ω，RL 是 0~10kΩ 的可调电阻<br>
理论值计算结果及初始设定测量值如下（V/mA）：</li>
</ol>
<ol>
<li>线性含源一端口电阻网络等效电路参数测试<br>
<img data-src="https://img-blog.csdnimg.cn/20210601120750414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>含源一端口网络及等效电路外特性测试<br>
<img data-src="https://img-blog.csdnimg.cn/20210601120820376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h2 id="实验结果及分析"><a class="anchor" href="#实验结果及分析">#</a> 实验结果及分析</h2>
<p>（1）叠加定理<br>
实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601120908506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
分析：<br>
①	无论是理论值还是测量值，对于电压和电流这两个参数，都满足：US、IS 共同作用时产生的响应等于 US 和 IS 单独作用时产生的响应的代数和，即叠加定理成立。<br>
<img data-src="https://img-blog.csdnimg.cn/20210601120923341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
②	无论是 US、IS 共同作用，还是 US 和 IS 单独作用，对于表中任一参数，测量值与理论值近似相等，验证了叠加定理用于理论计算的正确性。<br>
（2）戴维南定理<br>
 1）线性含源一端口电阻网络等效电路参数测试<br>
实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601120944365.png" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210601121011979.png" alt="在这里插入图片描述"><br>
分析：等效电路端口电压的测量值与等效电路开路电压计算值相等，且采用两种不同的电阻测量方法时，等效电路等效内阻的测量值都与等效电路等效内阻计算值相等，验证了戴维南定理的正确性。<br>
2）含源一端口网络及等效电路外特性测试<br>
实验结果：<br>
<img data-src="https://img-blog.csdnimg.cn/20210601121033779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
分析：<br>
①	当外电路电阻减小时，外电路电流增大，而端口电压减小，即该等效电路与外电路满足闭合电路欧姆定律。<br>
<img data-src="https://img-blog.csdnimg.cn/20210601121045279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
②	无论外电路电阻如何变化，外电路电流及端口电压的测量值始终与理论值相等，说明即使外电路发生变化，戴维南定理也始终成立。</p>
<h2 id="思考题"><a class="anchor" href="#思考题">#</a> 思考题</h2>
<p>(1)	US、IS 共同作用时的功率为 P1 = U1×I1 = （-5.500×25.000）J = -137.500J<br>
P2 = U2×I2 = （4.500×45.000）J = 202.500J<br>
US 单独作用时的功率为 P，1 = U，1×I，1 = （-6.875×31.250）J = -214.844J<br>
P，2 = U，2×I，2 = （3.125×31.250）J = 97.656J<br>
IS 单独作用时的功率为 P，，1 = U，，1×I，，1 = （1.375×-6.250）J = -8.594J<br>
P，，2 = U，，2×I，，2 = （1.375×13.750）J = 18.906J<br>
 易得 P，1 + P，，1 ≠ P1，P，2 + P，，2 ≠ P2<br>
 则电阻上的功率不符合叠加定理</p>
<h2 id="实验体会与建议"><a class="anchor" href="#实验体会与建议">#</a> 实验体会与建议</h2>
<ol>
<li>体会：①实验中，通过使用仿真实验平台对叠加定理和戴维南定理进行实验验证，我已经掌握了运用该平台模拟电路实验的基本操作，并且对两个定理的原理理解更加深刻，能够熟练运用相关原理来解决电路问题。②通过对思考题的分析解答，认识到了电阻的功率不满足叠加定理，避免了错误使用叠加定理的情况③提高了分析问题的全面性和逻辑思考的缜密性，同时也增强了我的耐心及专注度。</li>
<li>建议：①指导书及实验报告中有些说法较难理解，希望能够用一种更为通俗易懂的方式表达操作要求。②鉴于仿真实验平台的语言是英语，且学生对元件的英语名称不够熟悉，在平台中寻找所需元件或者其等效元件时较为困难，建议在实验要求中给出所需元件或其等效元件仿真实验平台中英文名称。</li>
</ol>
<p><strong>敲黑板！！！</strong></p>
<p><strong>叠加定理与戴维南定理 / RLC 串联谐振电路 / 单管交流电压放大电路 / 集成放大器的应用完整实验报告</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTkzMjI4OTY="> https://download.csdn.net/download/KissMoon_/19322896</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210601220105288.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>电工与电子技术</category>
        <category>叠加定理与戴维南定理</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>电工与电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>四阶龙格-库塔方法</title>
    <url>/NumericalAnalysis/%E5%9B%9B%E9%98%B6%E9%BE%99%E6%A0%BC-%E5%BA%93%E5%A1%94%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="四阶龙格-库塔runge-kutta方法"><a class="anchor" href="#四阶龙格-库塔runge-kutta方法">#</a> 四阶龙格 - 库塔（Runge-Kutta）方法</h1>
<h2 id="方法摘要"><a class="anchor" href="#方法摘要">#</a> 方法摘要</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224918843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="待求问题"><a class="anchor" href="#待求问题">#</a> 待求问题</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224949269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/2021042922500855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/2021042922502658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225040433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序流程"><a class="anchor" href="#程序流程">#</a> 程序流程</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429225105122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序代码"><a class="anchor" href="#程序代码">#</a> 程序代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*Matlab 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>function Result = Runge_Kutta (a, b, alpha, N, f, has_x, has_y)</pre></td></tr><tr><td data-num="3"></td><td><pre>    x0 = a;</pre></td></tr><tr><td data-num="4"></td><td><pre>    y0 = alpha;</pre></td></tr><tr><td data-num="5"></td><td><pre>    h = (b-a)/N;</pre></td></tr><tr><td data-num="6"></td><td><pre>    X = zeros (N, 1);</pre></td></tr><tr><td data-num="7"></td><td><pre>    Y = zeros (N, 1);</pre></td></tr><tr><td data-num="8"></td><td><pre>    if (has_x == 0 &amp;&amp; has_y == 1)</pre></td></tr><tr><td data-num="9"></td><td><pre>        for n = 1:N</pre></td></tr><tr><td data-num="10"></td><td><pre>            K1 = h*subs (f, symvar (f), y0);</pre></td></tr><tr><td data-num="11"></td><td><pre>            K2 = h*subs (f, symvar (f), y0+1/2*K1);</pre></td></tr><tr><td data-num="12"></td><td><pre>            K3 = h*subs (f, symvar (f), y0+1/2*K2);</pre></td></tr><tr><td data-num="13"></td><td><pre>            K4 = h*subs (f, symvar (f), y0+K3);</pre></td></tr><tr><td data-num="14"></td><td><pre>            X (n) = x0+h;</pre></td></tr><tr><td data-num="15"></td><td><pre>            Y (n) = y0+(K1+2*K2+2*K3+K4)/6;</pre></td></tr><tr><td data-num="16"></td><td><pre>            x0 = X (n);</pre></td></tr><tr><td data-num="17"></td><td><pre>            y0 = Y (n);</pre></td></tr><tr><td data-num="18"></td><td><pre>        end</pre></td></tr><tr><td data-num="19"></td><td><pre>    elseif (has_x == 1 &amp;&amp; has_y == 0)</pre></td></tr><tr><td data-num="20"></td><td><pre>        for n = 1:N</pre></td></tr><tr><td data-num="21"></td><td><pre>            K1 = h*subs (f, symvar (f), x0);</pre></td></tr><tr><td data-num="22"></td><td><pre>            K2 = h*subs (f, symvar (f), x0+h/2);</pre></td></tr><tr><td data-num="23"></td><td><pre>            K3 = h*subs (f, symvar (f), x0+h/2);</pre></td></tr><tr><td data-num="24"></td><td><pre>            K4 = h*subs (f, symvar (f), x0+h);</pre></td></tr><tr><td data-num="25"></td><td><pre>            X (n) = x0+h;</pre></td></tr><tr><td data-num="26"></td><td><pre>            Y (n) = y0+(K1+2*K2+2*K3+K4)/6;</pre></td></tr><tr><td data-num="27"></td><td><pre>            x0 = X (n);</pre></td></tr><tr><td data-num="28"></td><td><pre>            y0 = Y (n);</pre></td></tr><tr><td data-num="29"></td><td><pre>        end</pre></td></tr><tr><td data-num="30"></td><td><pre>    elseif (has_x == 1 &amp;&amp; has_y == 1)</pre></td></tr><tr><td data-num="31"></td><td><pre>        for n = 1:N</pre></td></tr><tr><td data-num="32"></td><td><pre>            K1 = h*subs (f, symvar (f), [x0, y0]);</pre></td></tr><tr><td data-num="33"></td><td><pre>            K2 = h*subs (f, symvar (f), [x0+h/2, y0+1/2*K1]);</pre></td></tr><tr><td data-num="34"></td><td><pre>            K3 = h*subs (f, symvar (f), [x0+h/2, y0+1/2*K2]);</pre></td></tr><tr><td data-num="35"></td><td><pre>            K4 = h*subs (f, symvar (f), [x0+h, y0+K3]);</pre></td></tr><tr><td data-num="36"></td><td><pre>            X (n) = x0+h;</pre></td></tr><tr><td data-num="37"></td><td><pre>            Y (n) = y0+(K1+2*K2+2*K3+K4)/6;</pre></td></tr><tr><td data-num="38"></td><td><pre>            x0 = X (n);</pre></td></tr><tr><td data-num="39"></td><td><pre>            y0 = Y (n);</pre></td></tr><tr><td data-num="40"></td><td><pre>        end</pre></td></tr><tr><td data-num="41"></td><td><pre>    else</pre></td></tr><tr><td data-num="42"></td><td><pre>        Result = 'No independent variables!';</pre></td></tr><tr><td data-num="43"></td><td><pre>        return;</pre></td></tr><tr><td data-num="44"></td><td><pre>    end</pre></td></tr><tr><td data-num="45"></td><td><pre>    Result = [X,Y];</pre></td></tr><tr><td data-num="46"></td><td><pre>end*/</pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">/*C 语言程序</span></pre></td></tr><tr><td data-num="48"></td><td><pre>#include &lt;stdio.h></pre></td></tr><tr><td data-num="49"></td><td><pre>#include &lt;stdlib.h></pre></td></tr><tr><td data-num="50"></td><td><pre>#include &lt;math.h></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>int n;</pre></td></tr><tr><td data-num="53"></td><td><pre>double a, b, fa;</pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>double f (double x, double y) &#123; return -y * y; &#125;</pre></td></tr><tr><td data-num="56"></td><td><pre>double f_(double x) &#123; return 1.0 / (x + 1.0); &#125;</pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>int main () &#123;</pre></td></tr><tr><td data-num="59"></td><td><pre>    scanf ("% lf% lf% lf% d", &amp;a, &amp;b, &amp;fa, &amp;n);</pre></td></tr><tr><td data-num="60"></td><td><pre>    double x = a, y = fa, h = (b - a) /n;</pre></td></tr><tr><td data-num="61"></td><td><pre>    for (int i = 1; i &lt;= n; i++) &#123;</pre></td></tr><tr><td data-num="62"></td><td><pre>        double k1 = h * f (x, y);</pre></td></tr><tr><td data-num="63"></td><td><pre>        double k2 = h * f (x + h / 2, y + k1 / 2);</pre></td></tr><tr><td data-num="64"></td><td><pre>        double k3 = h * f (x + h / 2, y + k2 / 2);</pre></td></tr><tr><td data-num="65"></td><td><pre>        double k4 = h * f (x + h, y + k3);</pre></td></tr><tr><td data-num="66"></td><td><pre>        x += h;</pre></td></tr><tr><td data-num="67"></td><td><pre>        y += 1.0 / 6.0 * (k1 + 2 * k2 + 2 * k3 + k4);</pre></td></tr><tr><td data-num="68"></td><td><pre>        printf ("%.2lf\t% lf\t%.2lf\n", x, y, fabs (f_(x) - y));</pre></td></tr><tr><td data-num="69"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="70"></td><td><pre>    return 0;</pre></td></tr><tr><td data-num="71"></td><td><pre>&#125;*/</pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429225314667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/2021042922532258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225329845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225342867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225353271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225401789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225410276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429225415226.png" alt="在这里插入图片描述"></p>
<h3 id="newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载"><a class="anchor" href="#newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载">#</a> Newton/Gauss/Lagrange/Runge-Kutta 实验内容 + 方法指导 + Matlab 脚本 + Matlab 函数 + Matlab 运行报告 + C 程序 + 实验报告，一键下载：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTgyNDQ0MTk=">https://download.csdn.net/download/KissMoon_/18244419</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210429225501168.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数值分析原理</category>
        <category>四阶龙格-库塔方法</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>数值分析原理</tag>
        <tag>四阶龙格-库塔法</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>拉格朗日插值</title>
    <url>/NumericalAnalysis/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h1 id="拉格朗日lagrange插值"><a class="anchor" href="#拉格朗日lagrange插值">#</a> 拉格朗日（Lagrange）插值</h1>
<h2 id="方法概要"><a class="anchor" href="#方法概要">#</a> 方法概要</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429223807959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="待求问题"><a class="anchor" href="#待求问题">#</a> 待求问题</h2>
<h3 id="1拉格朗日插值多项式的次数n越大越好吗"><a class="anchor" href="#1拉格朗日插值多项式的次数n越大越好吗">#</a> 1. 拉格朗日插值多项式的次数 n 越大越好吗？</h3>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224041269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="2插值区间越小越好吗"><a class="anchor" href="#2插值区间越小越好吗">#</a> 2. 插值区间越小越好吗？</h3>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224115175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3内插比外推更可靠吗"><a class="anchor" href="#3内插比外推更可靠吗">#</a> 3. 内插比外推更可靠吗？</h3>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224235554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224249795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序流程"><a class="anchor" href="#程序流程">#</a> 程序流程</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224323619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序代码"><a class="anchor" href="#程序代码">#</a> 程序代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*Matlab 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>function Result = Lagrange (n, x_in, a, b, f)</pre></td></tr><tr><td data-num="3"></td><td><pre>    h = (b-a)/n;</pre></td></tr><tr><td data-num="4"></td><td><pre>    M = zeros (n+1, 2);</pre></td></tr><tr><td data-num="5"></td><td><pre>    i = 0;</pre></td></tr><tr><td data-num="6"></td><td><pre>    while i &lt;= n</pre></td></tr><tr><td data-num="7"></td><td><pre>        xi = a+i*h;</pre></td></tr><tr><td data-num="8"></td><td><pre>        yi = subs (f, symvar (f), xi);</pre></td></tr><tr><td data-num="9"></td><td><pre>        M (i+1, 1) = xi;</pre></td></tr><tr><td data-num="10"></td><td><pre>        M (i+1, 2) = yi;</pre></td></tr><tr><td data-num="11"></td><td><pre>        i = i+1;</pre></td></tr><tr><td data-num="12"></td><td><pre>    end</pre></td></tr><tr><td data-num="13"></td><td><pre>    y = 0.0;</pre></td></tr><tr><td data-num="14"></td><td><pre>    k = 1;</pre></td></tr><tr><td data-num="15"></td><td><pre>    while k &lt;= n+1</pre></td></tr><tr><td data-num="16"></td><td><pre>       l = 1.0;</pre></td></tr><tr><td data-num="17"></td><td><pre>       for j = 1:k-1</pre></td></tr><tr><td data-num="18"></td><td><pre>           l = l*(x_in - M (j, 1))/(M (k, 1) - M (j, 1));</pre></td></tr><tr><td data-num="19"></td><td><pre>       end</pre></td></tr><tr><td data-num="20"></td><td><pre>       for j = k+1:n+1</pre></td></tr><tr><td data-num="21"></td><td><pre>           l = l*(x_in - M (j, 1))/(M (k, 1) - M (j, 1));</pre></td></tr><tr><td data-num="22"></td><td><pre>       end</pre></td></tr><tr><td data-num="23"></td><td><pre>       y = y + l*M (k, 2);</pre></td></tr><tr><td data-num="24"></td><td><pre>       k = k+1;</pre></td></tr><tr><td data-num="25"></td><td><pre>    end</pre></td></tr><tr><td data-num="26"></td><td><pre>    Result = [x_in, y];</pre></td></tr><tr><td data-num="27"></td><td><pre>end*/</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">/*C 语言程序</span></pre></td></tr><tr><td data-num="30"></td><td><pre>#include &lt;stdio.h></pre></td></tr><tr><td data-num="31"></td><td><pre>#include &lt;stdlib.h></pre></td></tr><tr><td data-num="32"></td><td><pre>#include &lt;math.h></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>#define N1 3   //n amount</pre></td></tr><tr><td data-num="35"></td><td><pre>#define N2 4   //x amount</pre></td></tr><tr><td data-num="36"></td><td><pre>#define N3 20  //n max</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>int Ns [N1] = &#123;5, 10, 20&#125;;</pre></td></tr><tr><td data-num="39"></td><td><pre>double x [N2] = &#123;-0.95, -0.05, 0.05, 0.95&#125;;</pre></td></tr><tr><td data-num="40"></td><td><pre>double l = -1.0;</pre></td></tr><tr><td data-num="41"></td><td><pre>double r = 1.0;</pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>double X (int k, int n) &#123;</pre></td></tr><tr><td data-num="44"></td><td><pre>    double h = (r - l) /n;</pre></td></tr><tr><td data-num="45"></td><td><pre>    return l + k * h;</pre></td></tr><tr><td data-num="46"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>double Y (double x) &#123; return 1 / (1 + x * x); &#125;</pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>int main () &#123;</pre></td></tr><tr><td data-num="51"></td><td><pre>    for (int i = 0; i &lt; N2; i++) printf ("\tx=%.2lf", x [i]);</pre></td></tr><tr><td data-num="52"></td><td><pre>    printf ("\n");</pre></td></tr><tr><td data-num="53"></td><td><pre>    for (int i = 0; i &lt; N1; i++) &#123;</pre></td></tr><tr><td data-num="54"></td><td><pre>        double a [N3 + 1], b [N3 + 1];</pre></td></tr><tr><td data-num="55"></td><td><pre>        int n = Ns [i];</pre></td></tr><tr><td data-num="56"></td><td><pre>        for (int k = 0; k &lt;= n; k++) &#123;</pre></td></tr><tr><td data-num="57"></td><td><pre>            a [k] = X (k, n);  //x</pre></td></tr><tr><td data-num="58"></td><td><pre>            b [k] = Y (a [k]);  //y</pre></td></tr><tr><td data-num="59"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="60"></td><td><pre>        printf ("n=% d", n);</pre></td></tr><tr><td data-num="61"></td><td><pre>        for (int p = 0; p &lt; N2; p++) &#123;</pre></td></tr><tr><td data-num="62"></td><td><pre>            double y = 0.0;</pre></td></tr><tr><td data-num="63"></td><td><pre>            for (int k = 0; k &lt;= n; k++) &#123;</pre></td></tr><tr><td data-num="64"></td><td><pre>                double l = 1.0;</pre></td></tr><tr><td data-num="65"></td><td><pre>                for (int j = 0; j &lt;= n; j++) &#123;</pre></td></tr><tr><td data-num="66"></td><td><pre>                    if (j != k) l *= (x [p] - a [j]) / (a [k] - a [j]);</pre></td></tr><tr><td data-num="67"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num="68"></td><td><pre>                y += l * b [k];</pre></td></tr><tr><td data-num="69"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num="70"></td><td><pre>            printf ("\t%.6lf", y);</pre></td></tr><tr><td data-num="71"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="72"></td><td><pre>        printf ("\n");</pre></td></tr><tr><td data-num="73"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="74"></td><td><pre>    printf ("Actual");</pre></td></tr><tr><td data-num="75"></td><td><pre>    for (int p = 0; p &lt; N2; p++) printf ("\t%.6lf", Y (x [p]));</pre></td></tr><tr><td data-num="76"></td><td><pre>    return 0;</pre></td></tr><tr><td data-num="77"></td><td><pre>&#125;*/</pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224528979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224536287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224545708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224552838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224600555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224607351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224613979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429224620853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载"><a class="anchor" href="#newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载">#</a> Newton/Gauss/Lagrange/Runge-Kutta 实验内容 + 方法指导 + Matlab 脚本 + Matlab 函数 + Matlab 运行报告 + C 程序 + 实验报告，一键下载：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTgyNDQ0MTk=">https://download.csdn.net/download/KissMoon_/18244419</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210429224646843.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数值分析原理</category>
        <category>拉格朗日插值</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>数值分析原理</tag>
        <tag>算法</tag>
        <tag>拉格朗日插值法</tag>
      </tags>
  </entry>
  <entry>
    <title>高斯列主元消去法</title>
    <url>/NumericalAnalysis/%E9%AB%98%E6%96%AF%E5%88%97%E4%B8%BB%E5%85%83%E6%B6%88%E5%8E%BB%E6%B3%95/</url>
    <content><![CDATA[<h1 id="高斯gauss列主元消去法"><a class="anchor" href="#高斯gauss列主元消去法">#</a> 高斯（Gauss）列主元消去法</h1>
<h2 id="方法概要"><a class="anchor" href="#方法概要">#</a> 方法概要</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429221918286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="待求问题"><a class="anchor" href="#待求问题">#</a> 待求问题</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429222104408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210429222133787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/20210429222149344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序流程"><a class="anchor" href="#程序流程">#</a> 程序流程</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429222227470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序代码"><a class="anchor" href="#程序代码">#</a> 程序代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*Matlab 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>function Result = Gauss (n, A, b)</pre></td></tr><tr><td data-num="3"></td><td><pre>    for k = 1:n-1</pre></td></tr><tr><td data-num="4"></td><td><pre>        max = abs (A (k, k));</pre></td></tr><tr><td data-num="5"></td><td><pre>        p = k;</pre></td></tr><tr><td data-num="6"></td><td><pre>        for j = k+1:n</pre></td></tr><tr><td data-num="7"></td><td><pre>            if (abs (A (j, k)) > max)</pre></td></tr><tr><td data-num="8"></td><td><pre>                max = abs (A (j, k));</pre></td></tr><tr><td data-num="9"></td><td><pre>                p = j;</pre></td></tr><tr><td data-num="10"></td><td><pre>            end</pre></td></tr><tr><td data-num="11"></td><td><pre>        end</pre></td></tr><tr><td data-num="12"></td><td><pre>        if (A (p, k) == 0)</pre></td></tr><tr><td data-num="13"></td><td><pre>            Result = 'Singular matrix!';</pre></td></tr><tr><td data-num="14"></td><td><pre>            return;</pre></td></tr><tr><td data-num="15"></td><td><pre>        end</pre></td></tr><tr><td data-num="16"></td><td><pre>        if (p ~= k)</pre></td></tr><tr><td data-num="17"></td><td><pre>           A ([k p], :) = A ([p k], :);</pre></td></tr><tr><td data-num="18"></td><td><pre>           b ([k p], :) = b ([p k], :);</pre></td></tr><tr><td data-num="19"></td><td><pre>        end</pre></td></tr><tr><td data-num="20"></td><td><pre>        for i = k+1:n</pre></td></tr><tr><td data-num="21"></td><td><pre>            Mik = A (i, k)/A (k, k);</pre></td></tr><tr><td data-num="22"></td><td><pre>            for j = k:n</pre></td></tr><tr><td data-num="23"></td><td><pre>                A (i, j) = A (i, j) - A (k, j)*Mik;</pre></td></tr><tr><td data-num="24"></td><td><pre>            end</pre></td></tr><tr><td data-num="25"></td><td><pre>            b (i) = b (i) - b (k)*Mik;</pre></td></tr><tr><td data-num="26"></td><td><pre>        end</pre></td></tr><tr><td data-num="27"></td><td><pre>    end</pre></td></tr><tr><td data-num="28"></td><td><pre>    if (A (n, n) == 0)</pre></td></tr><tr><td data-num="29"></td><td><pre>        Result = 'Singular matrix!';</pre></td></tr><tr><td data-num="30"></td><td><pre>        return;</pre></td></tr><tr><td data-num="31"></td><td><pre>    end</pre></td></tr><tr><td data-num="32"></td><td><pre>    Result = zeros (n, 1);</pre></td></tr><tr><td data-num="33"></td><td><pre>    Result (n, 1) = b (n)/A (n, n);</pre></td></tr><tr><td data-num="34"></td><td><pre>    for k = n-1:-1:1</pre></td></tr><tr><td data-num="35"></td><td><pre>        Sum = 0;</pre></td></tr><tr><td data-num="36"></td><td><pre>        for j = k+1:n</pre></td></tr><tr><td data-num="37"></td><td><pre>            Sum = Sum + A (k, j)*Result (j, 1);</pre></td></tr><tr><td data-num="38"></td><td><pre>        end</pre></td></tr><tr><td data-num="39"></td><td><pre>        Result (k, 1) = (b (k) - Sum)/A (k, k);</pre></td></tr><tr><td data-num="40"></td><td><pre>    end</pre></td></tr><tr><td data-num="41"></td><td><pre>end*/</pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">/*C 语言程序</span></pre></td></tr><tr><td data-num="44"></td><td><pre>#include &lt;stdio.h></pre></td></tr><tr><td data-num="45"></td><td><pre>#include &lt;stdlib.h></pre></td></tr><tr><td data-num="46"></td><td><pre>#include &lt;math.h></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>#define N 10</pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>int n;</pre></td></tr><tr><td data-num="51"></td><td><pre>double a [N][N], b [N], x [N];</pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>int main () &#123;</pre></td></tr><tr><td data-num="54"></td><td><pre>    scanf ("% d", &amp;n);</pre></td></tr><tr><td data-num="55"></td><td><pre>    for (int i = 1; i &lt;= n; i++)</pre></td></tr><tr><td data-num="56"></td><td><pre>        for (int j = 1; j &lt;= n; j++) scanf ("% lf", &amp;a [i][j]);</pre></td></tr><tr><td data-num="57"></td><td><pre>    for (int i = 1; i &lt;= n; i++) scanf ("% lf", &amp;b [i]);</pre></td></tr><tr><td data-num="58"></td><td><pre>    for (int k = 1; k &lt; n; k++) &#123;</pre></td></tr><tr><td data-num="59"></td><td><pre>        int p = k;</pre></td></tr><tr><td data-num="60"></td><td><pre>        double maxabs = fabs (a [k][k]);</pre></td></tr><tr><td data-num="61"></td><td><pre>        for (int j = k + 1; j &lt;= n; j++)</pre></td></tr><tr><td data-num="62"></td><td><pre>            if (fabs (a [j][k]) - maxabs > 0) &#123;</pre></td></tr><tr><td data-num="63"></td><td><pre>                p = j;</pre></td></tr><tr><td data-num="64"></td><td><pre>                maxabs = fabs (a [j][k]);</pre></td></tr><tr><td data-num="65"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num="66"></td><td><pre>        if (a [p][k] == 0) &#123;</pre></td></tr><tr><td data-num="67"></td><td><pre>            printf ("Singular");</pre></td></tr><tr><td data-num="68"></td><td><pre>            return 0;</pre></td></tr><tr><td data-num="69"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="70"></td><td><pre>        if (p != k) &#123;</pre></td></tr><tr><td data-num="71"></td><td><pre>            double tmp;</pre></td></tr><tr><td data-num="72"></td><td><pre>            for (int j = 1; j &lt;= n; j++) &#123;</pre></td></tr><tr><td data-num="73"></td><td><pre>                tmp = a [p][j];</pre></td></tr><tr><td data-num="74"></td><td><pre>                a [p][j] = a [k][j];</pre></td></tr><tr><td data-num="75"></td><td><pre>                a [k][j] = tmp;</pre></td></tr><tr><td data-num="76"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num="77"></td><td><pre>            tmp = b [p];</pre></td></tr><tr><td data-num="78"></td><td><pre>            b [p] = b [k];</pre></td></tr><tr><td data-num="79"></td><td><pre>            b [k] = tmp;</pre></td></tr><tr><td data-num="80"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="81"></td><td><pre>        for (int i = k + 1; i &lt;= n; i++) &#123;</pre></td></tr><tr><td data-num="82"></td><td><pre>            double m_ik = a [i][k] /a [k][k];</pre></td></tr><tr><td data-num="83"></td><td><pre>            for (int j = k + 1; j &lt;= n; j++) a [i][j] -= a [k][j] * m_ik;</pre></td></tr><tr><td data-num="84"></td><td><pre>            b [i] -= b [k] * m_ik;</pre></td></tr><tr><td data-num="85"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="86"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="87"></td><td><pre>    if (a [n][n] == 0) &#123;</pre></td></tr><tr><td data-num="88"></td><td><pre>        printf ("Singular");</pre></td></tr><tr><td data-num="89"></td><td><pre>        return 0;</pre></td></tr><tr><td data-num="90"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="91"></td><td><pre>    x [n] = b [n] /a [n][n];</pre></td></tr><tr><td data-num="92"></td><td><pre>    for (int k = n - 1; k >= 1; k--) &#123;</pre></td></tr><tr><td data-num="93"></td><td><pre>        double sigma = 0.0;</pre></td></tr><tr><td data-num="94"></td><td><pre>        for (int j = k + 1; j &lt;= n; j++) sigma += a [k][j] * x [j];</pre></td></tr><tr><td data-num="95"></td><td><pre>        x [k] = (b [k] - sigma) /a [k][k];</pre></td></tr><tr><td data-num="96"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="97"></td><td><pre>    for (int i = 1; i &lt;= n; i++) printf ("% lf\t", x [i]);</pre></td></tr><tr><td data-num="98"></td><td><pre>    return 0;</pre></td></tr><tr><td data-num="99"></td><td><pre>&#125;*/</pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429222542617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210429222613165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载"><a class="anchor" href="#newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载">#</a> Newton/Gauss/Lagrange/Runge-Kutta 实验内容 + 方法指导 + Matlab 脚本 + Matlab 函数 + Matlab 运行报告 + C 程序 + 实验报告，一键下载：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTgyNDQ0MTk=">https://download.csdn.net/download/KissMoon_/18244419</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/2021042922265415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数值分析原理</category>
        <category>高斯列主元消去法</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>数值分析原理</tag>
        <tag>算法</tag>
        <tag>高斯消去法</tag>
      </tags>
  </entry>
  <entry>
    <title>牛顿迭代法</title>
    <url>/NumericalAnalysis/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/</url>
    <content><![CDATA[<h1 id="牛顿newton迭代法"><a class="anchor" href="#牛顿newton迭代法">#</a> 牛顿（Newton）迭代法</h1>
<h2 id="方法概要"><a class="anchor" href="#方法概要">#</a> 方法概要</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429214552553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="待求问题"><a class="anchor" href="#待求问题">#</a> 待求问题</h2>
<p><img data-src="https://img-blog.csdnimg.cn/2021042921463173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序流程"><a class="anchor" href="#程序流程">#</a> 程序流程</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429214859187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="程序代码"><a class="anchor" href="#程序代码">#</a> 程序代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*Matlab 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>function Result = Newton (x0, e1, e2, N, f)</pre></td></tr><tr><td data-num="3"></td><td><pre>    n = 1;</pre></td></tr><tr><td data-num="4"></td><td><pre>    while n &lt;= N</pre></td></tr><tr><td data-num="5"></td><td><pre>        F = subs (f, symvar (f), x0);</pre></td></tr><tr><td data-num="6"></td><td><pre>        DF = subs (diff (f), symvar (f), x0);</pre></td></tr><tr><td data-num="7"></td><td><pre>        if (abs (F) &lt; e1)</pre></td></tr><tr><td data-num="8"></td><td><pre>            Result = double (x0);</pre></td></tr><tr><td data-num="9"></td><td><pre>            return;</pre></td></tr><tr><td data-num="10"></td><td><pre>        end</pre></td></tr><tr><td data-num="11"></td><td><pre>        if (abs (DF) &lt; e2)</pre></td></tr><tr><td data-num="12"></td><td><pre>            Result = 'Iteration failed!';</pre></td></tr><tr><td data-num="13"></td><td><pre>            return;</pre></td></tr><tr><td data-num="14"></td><td><pre>        end</pre></td></tr><tr><td data-num="15"></td><td><pre>        x1 = x0-F/DF;</pre></td></tr><tr><td data-num="16"></td><td><pre>        Tol = abs (x1 - x0);</pre></td></tr><tr><td data-num="17"></td><td><pre>        if (Tol &lt; e1)</pre></td></tr><tr><td data-num="18"></td><td><pre>            Result = double (x1);</pre></td></tr><tr><td data-num="19"></td><td><pre>            return;</pre></td></tr><tr><td data-num="20"></td><td><pre>        end</pre></td></tr><tr><td data-num="21"></td><td><pre>        n = n+1;</pre></td></tr><tr><td data-num="22"></td><td><pre>        x0 = x1;</pre></td></tr><tr><td data-num="23"></td><td><pre>    end</pre></td></tr><tr><td data-num="24"></td><td><pre>    Result = 'Iteration failed!';</pre></td></tr><tr><td data-num="25"></td><td><pre>end*/</pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/*C 语言程序</span></pre></td></tr><tr><td data-num="29"></td><td><pre>#include &lt;stdio.h></pre></td></tr><tr><td data-num="30"></td><td><pre>#include &lt;stdlib.h></pre></td></tr><tr><td data-num="31"></td><td><pre>#include &lt;math.h></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>double x, e1, e2;</pre></td></tr><tr><td data-num="34"></td><td><pre>int n;</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>double f (double x) &#123; return cos (x) - x; &#125;</pre></td></tr><tr><td data-num="37"></td><td><pre>double df (double x) &#123; return -sin (x) - 1; &#125;</pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>int main () &#123;</pre></td></tr><tr><td data-num="40"></td><td><pre>    scanf ("% lf% lf% lf% d", &amp;x, &amp;e1, &amp;e2, &amp;n);</pre></td></tr><tr><td data-num="41"></td><td><pre>    for (int i = 1; i &lt;= n; i++) &#123;</pre></td></tr><tr><td data-num="42"></td><td><pre>        double F = f (x), DF = df (x);</pre></td></tr><tr><td data-num="43"></td><td><pre>        if (fabs (F) &lt; e1) &#123;</pre></td></tr><tr><td data-num="44"></td><td><pre>            printf ("% lf", x);</pre></td></tr><tr><td data-num="45"></td><td><pre>            return 0;</pre></td></tr><tr><td data-num="46"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="47"></td><td><pre>        if (fabs (DF) &lt; e2) &#123;</pre></td></tr><tr><td data-num="48"></td><td><pre>            printf ("Failed");</pre></td></tr><tr><td data-num="49"></td><td><pre>            return 0;</pre></td></tr><tr><td data-num="50"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="51"></td><td><pre>        double x1 = x - F / DF;</pre></td></tr><tr><td data-num="52"></td><td><pre>        double tol = fabs (x - x1);</pre></td></tr><tr><td data-num="53"></td><td><pre>        if (tol &lt; e1) &#123;</pre></td></tr><tr><td data-num="54"></td><td><pre>            printf ("% lf", x1);</pre></td></tr><tr><td data-num="55"></td><td><pre>            return 0;</pre></td></tr><tr><td data-num="56"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="57"></td><td><pre>        x = x1;</pre></td></tr><tr><td data-num="58"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="59"></td><td><pre>    printf ("Failed");</pre></td></tr><tr><td data-num="60"></td><td><pre>    return 0;</pre></td></tr><tr><td data-num="61"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="62"></td><td><pre>*/</pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<p><img data-src="https://img-blog.csdnimg.cn/20210429215743424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img data-src="https://img-blog.csdnimg.cn/2021042921575322.png" alt="在这里插入图片描述"></p>
<h3 id="newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载"><a class="anchor" href="#newtongausslagrangerunge-kutta实验内容方法指导matlab脚本matlab函数matlab运行报告c程序实验报告一键下载">#</a> Newton/Gauss/Lagrange/Runge-Kutta 实验内容 + 方法指导 + Matlab 脚本 + Matlab 函数 + Matlab 运行报告 + C 程序 + 实验报告，一键下载：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5jc2RuLm5ldC9kb3dubG9hZC9LaXNzTW9vbl8vMTgyNDQ0MTk=">https://download.csdn.net/download/KissMoon_/18244419</span></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210429220649480.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数值分析原理</category>
        <category>牛顿迭代法</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>数值分析原理</tag>
        <tag>算法</tag>
        <tag>牛顿迭代法</tag>
      </tags>
  </entry>
  <entry>
    <title>八股文之操作系统</title>
    <url>/StereotypedWriting/OperatingSystem/</url>
    <content><![CDATA[<h1 id="简要概述一下什么是操作系统"><a class="anchor" href="#简要概述一下什么是操作系统">#</a> 简要概述一下什么是操作系统？</h1>
<ul>
<li>操作系统是<strong>管理计算机硬件和软件资源</strong>的计算机程序，提供一个计算机用户与计算机硬件系统之间的接口（向上对用户程序提供接口，向下接管硬件资源）。</li>
<li>操作系统本质上也是一个软件，作为最接近硬件的<strong>系统软件，负责处理器管理、存储器管理、设备驱动管理、文件系统管理和提供用户接口。</strong></li>
</ul>
<h1 id="操作系统的分类有哪些"><a class="anchor" href="#操作系统的分类有哪些">#</a> 操作系统的分类有哪些？</h1>
<ul>
<li>操作系统一般可分为<strong>批处理操作系统、分时操作系统和实时操作系统。</strong></li>
<li>若一个操作系统兼顾批处理和分时的功能，则称该系统为<strong>通用操作系统</strong>，常见的通用操作系统有：Windows、Linux、MacOS 等。</li>
</ul>
<h1 id="什么是内核态和用户态"><a class="anchor" href="#什么是内核态和用户态">#</a> 什么是内核态和用户态？</h1>
<ul>
<li>为了<strong>避免操作系统和关键数据被用户程序破坏</strong>，将处理器的执行状态分为内核态和用户态。</li>
<li>内核态是操作系统管理程序执行时所处的状态，<strong>能够执行包含特权指令在内的一切指令，能够访问系统内所有的存储空间。</strong></li>
<li>用户态是用户程序执行时处理器所处的状态，<strong>不能执行特权指令，只能访问用户地址空间。</strong></li>
<li>用户程序运行在用户态，操作系统内核运行在内核态。</li>
</ul>
<h1 id="如何实现内核态和用户态的切换"><a class="anchor" href="#如何实现内核态和用户态的切换">#</a> 如何实现内核态和用户态的切换？</h1>
<p>处理器从用户态切换到内核态的方法有三种：<strong>系统调用、异常、外部中断。</strong></p>
<ul>
<li>系统调用，操作系统的最小功能单位，是操作系统提供的<strong>用户接口，是软中断。</strong></li>
<li>异常，也叫做<strong>内中断，是由错误引起的</strong>，如文件损坏、缺页故障等。</li>
<li>外部中断，通过两根信号线来通知处理器<strong>外设的状态变化，是硬中断。</strong></li>
</ul>
<h1 id="软中断和硬中断的区别与联系"><a class="anchor" href="#软中断和硬中断的区别与联系">#</a> 软中断和硬中断的区别与联系？</h1>
<ul>
<li>硬中断是有<strong>外设硬件</strong>发出的，<strong>需要有中断控制器</strong>的参与。其过程是外设侦测到变化，告知中断控制器，中断控制器通过 CPU 或内存的中断脚通 CPU，然后<strong>硬件</strong>进行程序计数器及堆栈寄存器的现场保存工作（引发上下文切换），并根据中断向量调用<strong>硬中断处理程序</strong>进行中断处理。</li>
<li>软中断则通常是由<strong>硬中断处理程序或者进程调度程序等软件程序</strong>发出的中断信号，<strong>无需中断控制器</strong>的参与，直接以一个 CPU 指令之形式指示<strong> CPU</strong> 进行程序计数器及堆栈寄存器之现场保存工作 (亦会引发上下文切换)，并调用相应的<strong>软中断处理程序</strong>进行中断处理 (即我们通常所言之系统调用)。</li>
<li>硬中断直接以硬件的方式引发，处理速度快。软中断以软件指令的方式引发，适合于对响应速度要求不是特别严格的场景。</li>
<li>硬中断通过设置 CPU 的屏蔽位可进行屏蔽，软中断则由于是指令之方式给出，不能屏蔽（<strong>硬中断可以被屏蔽，软中断不可以被屏蔽</strong>）。</li>
<li>硬中断和软中断<strong>均会引起上下文切换 (进程 / 线程之切换)</strong>，进程切换的过程是差不多的。</li>
</ul>
<h1 id="并发和并行的区别"><a class="anchor" href="#并发和并行的区别">#</a> 并发和并行的区别？</h1>
<ul>
<li>并发：宏观上看多个程序在同时运行，比如在单核 CPU 上的多任务，但微观上看程序的指令是<strong>交替运行</strong>的，<strong>CPU 在任何时刻最多只能同时运行一条指令</strong>。</li>
<li>并行：严格意义上的同时运行，比如多核 CPU，程序的指令是<strong>同时运行</strong>的，<strong>CPU 在任何时刻最多能够同时运行多条指令</strong>。</li>
<li>并发<strong>不能</strong>提高计算机的性能，而并行<strong>能够</strong>提高计算机的性能。</li>
</ul>
<h1 id="什么是进程-线程-协程"><a class="anchor" href="#什么是进程-线程-协程">#</a> 什么是进程、线程、协程？</h1>
<ul>
<li>进程：进程是<strong>系统进行资源分配和管理的基本单位</strong>。每个进程都有自己<strong>独立的内存空间</strong>，不同进程之间可以进行通信。由于进程比较重量，占据独立的内存，所以进程上下文的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对来说比较安全。</li>
<li>线程：线程是进程的一个实体，是<strong> CPU 调度和分派的基本单位</strong>，它是比进程更小的能够独立运行的单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（栈、寄存器、程序计数器），但是它可<strong>与同属一个进程的其他线程共享进程所拥有的全部资源</strong>。线程间的通信主要通过共享内存，上下文的切换开销比较少，但相比进程不够稳定，容易丢失数据。</li>
<li>协程：协程是<strong>一种用户态的轻量级线程</strong>，协程的<strong>调度完全由用户控制</strong>。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方。在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则<strong>基本没有内核切换的开销，可以不加锁地访问全局变量</strong>，所以上下文的切换非常快。</li>
</ul>
<h1 id="进程和线程的区别"><a class="anchor" href="#进程和线程的区别">#</a> 进程和线程的区别？</h1>
<ul>
<li><strong>一个程序至少有一个进程，一个进程至少有一个线程。</strong></li>
<li><strong>从系统调度上看：进程是资源分配和管理的基本单位，线程是 CPU 调度和分派的基本单位。</strong></li>
<li><strong>从上下文切换上看：线程上下文的切换要比进程上下文的切换快得多。</strong></li>
<li><strong>从系统开销上看：创建或撤销进程时，系统都要为之分配或回收系统资源，如内存空间、I/O 设备等，而创建或撤销线程时，系统只需要为之分配或回收少量资源，如栈、寄存器等，所以进程切换的开销要远大于线程切换的开销。</strong></li>
</ul>
<h1 id="协程和线程的区别"><a class="anchor" href="#协程和线程的区别">#</a> 协程和线程的区别？</h1>
<ul>
<li>一个线程可以有多个协程，一个进程也可以有多个协程。线程和进程都是同步机制，而协程是异步机制。</li>
<li>协程是由程序自身控制的，没有线程切换的开销，执行效率非常高。</li>
<li>协程不需要多线程的锁机制：在协程中控制共享资源不需要加锁，只需要判断状态即可，所以执行效率比多线程高很多。</li>
<li>线程是抢占式的，而协程是非抢占式的，需要用户释放使用权切换到其他协程，因此同一时间只有一个协程拥有运行权，相当于单线程。</li>
<li>协程不被操作系统内核管理，而完全由程序控制。线程是被分割的 CPU 资源，协程是组织好的代码流程，线程是协程的资源。但协程不会直接使用线程，协程直接利用的是执行器来关联任意线程或线程池。</li>
</ul>
<h1 id="进程的基本操作有哪些"><a class="anchor" href="#进程的基本操作有哪些">#</a> 进程的基本操作有哪些？</h1>
<ul>
<li>fork () 创建子进程：<strong>fork () 函数调用一次，返回两次，在父进程中返回子进程的 PID，而在子进程中返回 0</strong>，可以利用这个特点来判断一个进程是父进程还是子进程。<br>
（1）新创建子进程几乎但不完全与父进程相同：子进程得到与父进程用户级<strong>虚拟地址空间相同（但是独立的）一份副本</strong>，包括代码和数据段、堆、共享库以及用户栈；子进程还获得与父进程所有<strong>打开文件的描述符相同的一份副本</strong>，这意味着子进程可以读写父进程中任何打开的文件。<br>
（2）父进程与子进程最大的区别在于它们的进程 ID（PID）不同。</li>
<li>exec () 执行新程序：<strong>exec () 函数可以替换当前进程的代码，执行一个新的程序，而不是继续执行当前程序</strong>。exec () 函数可以接受一个参数，这个参数是一个字符串，表示要执行的新程序的路径，如果参数是一个相对路径，那么它会被解析为当前进程的工作目录下的路径。</li>
<li>wait () 等待子进程结束：<strong>wait () 函数可以等待子进程结束，并返回子进程的返回值。</strong></li>
<li>waitpid () 等待子进程结束：<strong>waitpid () 函数可以等待指定的子进程结束，并返回子进程的返回值。</strong></li>
<li>exit () 退出当前进程：<strong>exit () 函数可以退出当前进程，并返回一个整数。</strong></li>
</ul>
]]></content>
      <categories>
        <category>八股文</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>八股文</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>美团20220409</title>
    <url>/WrittenExamination/MeiTuan_20220409/</url>
    <content><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1>
<p>笔试一共五道编程题（四 + 一），一为专项编程题，估计不同岗位有题目不一样，使用的是赛码网，允许跳出界面使用自己的 IDE。</p>
<p>在此感谢<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlYm9ydHQ/dHlwZT1ibG9n">筱羊冰冰</span>提供的部分题目及题解。</p>
<h1 id="题目一数圈游戏"><a class="anchor" href="#题目一数圈游戏">#</a> 题目一：数圈游戏</h1>
<p>给定一个整数 n，计算该整数含有的圆圈个数。数字 0-9 对应的圈数如下：<br>
0: 1<br>
1: 0<br>
2: 0<br>
3: 0<br>
4: 0<br>
5: 0<br>
6: 1<br>
7: 0<br>
8: 2<br>
9: 1</p>
<p>输入：<br>
第一行为一个整数 n，表示数圈游戏的数字。</p>
<p>输入示例：<br>
60498<br>
 输出示例：<br>
5</p>
<p>限制：<br>
80% 的测试用例：n&lt;=10000<br>
100% 的测试用例：n&lt;=100000000</p>
<h2 id="思路"><a class="anchor" href="#思路">#</a> 思路：</h2>
<p>该题较为简单，一次遍历累加即可。</p>
<h1 id="题目二士兵排队"><a class="anchor" href="#题目二士兵排队">#</a> 题目二：士兵排队</h1>
<p>给定一定数量的士兵，将士兵按照身高从小到大排列，身高相同者按照姓名的字典序从小到大排列。</p>
<p>输入：<br>
第一行为一个整数 n，表示士兵的数量。<br>
第二行为 n 个士兵的身高，单位为 cm。<br>
第三行为 n 个士兵的姓名。</p>
<p>输入示例：<br>
4<br>
176 170 176 176<br>
bamma tom alpha beta</p>
<p>输出示例：<br>
tom alpha bamma beta</p>
<p>限制：<br>
士兵身高 hi &lt;= 300<br>
 士兵姓名长度 ni &lt;= 20</p>
<h2 id="思路一"><a class="anchor" href="#思路一">#</a> 思路一：</h2>
<p>将每一个人的身高和名字按照 (身高，名字) 的格式存储，然后进行两次排序，先按照身高排序，再按照名字排序即可。（利用了 python 排序算法的稳定性！）</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>heights <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>names <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># lambda 函数指定排序规则</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="思路二"><a class="anchor" href="#思路二">#</a> 思路二：</h2>
<p>因为身高的限制为 hi &lt;= 300，所以身高最高只能为三位数，那么我们可以把所有身高都通过补前置零的方式化为三位数，然后再与名字拼接成一个字符串，这样只需要一次排序就能够得出结果。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>heights <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>names <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token comment"># str.zfill () 自动填充</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>heights<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目三路径搜索"><a class="anchor" href="#题目三路径搜索">#</a> 题目三：路径搜索</h1>
<p>给定一个地图，询问是否存在一条从起点到终点的直接通路。注意，通路是双向的。</p>
<p>输入：<br>
第一行包括两个整数 n 和 m，分别表示地图上点的数量和通路的数量。<br>
第二行包括 m 个整数，表示地图上通路的一端。<br>
第三行包括 m 个整数，表示地图上通路的另一端。<br>
第四行包括 k 个整数，表示询问的次数。<br>
接下来的 k 行每行包括两个整数，分别表示起点和终点。</p>
<p>输入示例：<br>
4 5<br>
1 2 1 3 1<br>
2 3 3 4 4<br>
4<br>
1 3<br>
2 4<br>
2 1<br>
3 2</p>
<p>输出示例：<br>
Yes<br>
No<br>
Yes<br>
Yes</p>
<h2 id="思路-2"><a class="anchor" href="#思路-2">#</a> 思路：</h2>
<p>筱羊冰冰：上来就看错了，然后花了好久写了类似并查集的东西，然后用不上……<br>
（果然大佬就是不一样，上来直接手撕并查集）<br>
这道题只需要检查有无指定通路就行了，不过要特别注意查询范围，因为通路是双向的而且要求的是直接通路。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>lsu <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>lsv <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ways <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lsu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lsv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    u<span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> ways <span class="token keyword">or</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token keyword">in</span> ways<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        out<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Yes'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        out<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'No'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目四井字棋"><a class="anchor" href="#题目四井字棋">#</a> 题目四：井字棋</h1>
<p>给定一个 2x2 的棋盘和 n 中不同的颜色，要求每行每列均不能出现相同的颜色，计算总共有多少种填充方案。</p>
<p>输入：<br>
第一行包括一个整数 n，表示颜色的数量。</p>
<p>输出：<br>
输出一个整数，表示有多少种填充方案。</p>
<p>输入示例：<br>
2</p>
<p>输出示例：<br>
2</p>
<p>限制：<br>
颜色的种类 n &lt;= 10</p>
<h2 id="思路-3"><a class="anchor" href="#思路-3">#</a> 思路：</h2>
<p>筱羊冰冰：有一说一，感觉就属这个题有意思吧。我当时看完，感觉就有一点像排列组合 (业余玩家，不太清楚具体的类型)。<br>
n 种颜色，如果颜色足够 (指大于四种)，我们其实也只能取出四种来操作，所以只需要一个</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mn>4</mn></msubsup></mrow><annotation encoding="application/x-tex">C_n^4
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>所以我们其实只需要考虑四种以内的情况。</p>
<p>两种颜色：</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>和</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>1</td>
<td></td>
<td>1</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>三种颜色：<br>
我们自然可以想到，拿两种颜色就可以填上面的两种</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>C</mi><mn>3</mn><mn>2</mn></msubsup><mo>∗</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">C_3^2 * 2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>然后，如果是三种颜色都要，有 12 种，肯定是有一个重复的，那么对角线重复就有两种情况，剩下的其实就是将三个数字填入三个位置，</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>A</mi><mn>3</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">A_3^3
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>就是 6 + 6*2 = 18。</p>
<p>到这里其实就应该明白了，我们只需要知道 i 种颜色有多少种即可，因为 i = 2, 3, 4，我们完全可以直接写出来，剩下的就是一个组合问题，再给出一个阶乘列表。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># ls [i] 为 i 种颜色都使用，对应的可能数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 四种颜色忘了说了，不过就是个 A44</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># ls_jc[i] = i!</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ls_jc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token number">5040</span><span class="token punctuation">,</span> <span class="token number">40320</span><span class="token punctuation">,</span> <span class="token number">362880</span><span class="token punctuation">,</span> <span class="token number">3628800</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>ret <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token comment"># 他在系统公告中，提示了 0 的问题</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ret <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">elif</span> n <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        ret <span class="token operator">+=</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> ls_jc<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token punctuation">(</span>ls_jc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> ls_jc<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment"># 还有一个限制就是输出大小，这里原题目是有的</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        ret <span class="token operator">%=</span> <span class="token number">1000000007</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        ret <span class="token operator">+=</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> ls_jc<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token punctuation">(</span>ls_jc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> ls_jc<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        ret <span class="token operator">%=</span> <span class="token number">1000000007</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="小插曲"><a class="anchor" href="#小插曲">#</a> 小插曲：</h2>
<p>当时有一块写错了，然后跑出来只有 27%，自己就去看了一下范围是小于等于十，那么案例至少有 10 个吧。<br>
然后自己因为有边界检测，负数、0、1、2 都能正确，那么至少对三个，反推出案例应该是 11 个，那么就是 3 往上有问题，所以将矛头对准了 ls [3]，果然是算少了，改成 12，啪的一下，很快就过了……</p>
<h1 id="题目五堆积木"><a class="anchor" href="#题目五堆积木">#</a> 题目五：堆积木</h1>
<p>给定一个已有的字符串和一个目标字符串，可以从右边删除一个字符，也可以往左边插入一个字符，删除和插入操作的次数没有限制，问最少操作多少次可以使已有字符串变成目标字符串。</p>
<table>
<thead>
<tr>
<th>输入</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>5</td>
<td>原串长度</td>
</tr>
<tr>
<td>1 5 3 4 6</td>
<td>原串</td>
</tr>
<tr>
<td>5</td>
<td>目标串长度</td>
</tr>
<tr>
<td>2 1 5 3 4</td>
<td>目标串</td>
</tr>
</tbody>
</table>
<h2 id="思路-4"><a class="anchor" href="#思路-4">#</a> 思路：</h2>
<p>筱羊冰冰：这个题，其实看明白了就没那么难，其实就是找最长公共子序列。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque</pre></td></tr><tr><td data-num="2"></td><td><pre>l_old <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>old <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>l_new <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>new <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>length <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 这里没啥原因，就是 deque 的头插尾插都比较快，O (1) 的</span></pre></td></tr><tr><td data-num="8"></td><td><pre>s1<span class="token punctuation">,</span> s2 <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>judge <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>old<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    s2<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span>new<span class="token punctuation">[</span><span class="token operator">-</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    length <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">if</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        judge <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">elif</span> length <span class="token operator">==</span> <span class="token builtin">min</span><span class="token punctuation">(</span>l_old<span class="token punctuation">,</span> l_new<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> judge<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>l_old<span class="token operator">+</span>l_new <span class="token operator">-</span> length<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>l_old<span class="token operator">+</span>l_new<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="重大失误"><a class="anchor" href="#重大失误">#</a> 重大失误</h2>
<p>上面的代码其实没考虑，如果有多对子串相同，要找出最长的……<br>
 不过感觉测试案例比较拉，所以显示还是 ac 了的。</p>
<p><img data-src="/WrittenExamination/MeiTuan_20220409/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>企业笔试</category>
        <category>美团笔试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>赛码网</tag>
        <tag>美团</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯20220424</title>
    <url>/WrittenExamination/Tencent_20220424/</url>
    <content><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1>
<p>笔试一共五道编程题，满分是 100 分，时间是两个小时，可以跳题，使用的平台是牛客网，允许跳出界面使用本地 IDE。</p>
<h1 id="题目一构建数字"><a class="anchor" href="#题目一构建数字">#</a> 题目一：构建数字</h1>
<p>给定 n 个长度均为 m 的数字字符串，从上往下构建成 m 个新的数，去掉前置 0 后按照从小到大的顺序输出。</p>
<p>输入：</p>
<p>第一行包括一个整数 n。</p>
<p>接下来 n 行每行包括一个长度为 m 的数字字符串。</p>
<p>输出：</p>
<p>第一行包括新构建的数按从小到大排列。</p>
<p>输入示例：</p>
<p>3</p>
<p>0121</p>
<p>1502</p>
<p>2138</p>
<p>输出示例：</p>
<p>12 128 151 203</p>
<h2 id="思路"><a class="anchor" href="#思路">#</a> 思路</h2>
<p>该题比较简单，可以直接暴力求解，需要注意的是前置 0 的处理。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    a <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        a <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment"># int () 函数会直接去掉前置 0</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>ans<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目二淘汰数字"><a class="anchor" href="#题目二淘汰数字">#</a> 题目二：淘汰数字</h1>
<p>给定一个数组，下标从 1~n，每次淘汰下标为非质数的数字，剩下的数形成新的数组，重复上述过程，直到数组内只剩下一个数字。</p>
<p><strong>本题为核心代码模式，只需要补充解法类的实现代码即可。</strong></p>
<p>输入：</p>
<p>第一行包括一个长度为 n 的数组。</p>
<p>输出：</p>
<p>第一行包括一个整数。</p>
<p>输入示例 1：</p>
<p>[1, 2, 3, 4]</p>
<p>输出示例 1：</p>
<p>3</p>
<p>输入示例 2：</p>
<p>[3, 1 , 1 , 4 , 5, 6]</p>
<p>输出示例 2：</p>
<p>5</p>
<h2 id="思路-2"><a class="anchor" href="#思路-2">#</a> 思路</h2>
<p>本题也是直接暴力求解，重点是求出 n 内的所有质数。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token punctuation">,</span> ceil</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">isP</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        m <span class="token operator">=</span> ceil<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> x<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment"># write code here</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        pnums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>isP<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                pnums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">while</span> n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            k <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pnums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">if</span> pnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token keyword">break</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>pnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                k <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            n <span class="token operator">=</span> k</pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    </pre></td></tr><tr><td data-num="27"></td><td><pre>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment"># [3,1,1,4,5,6]</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getNumber<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目三士兵分配"><a class="anchor" href="#题目三士兵分配">#</a> 题目三：士兵分配</h1>
<p>给定一定数量的士兵，编号为 1<sub>n，用长度为 n 的 0/1 串 s 表示，其中 0 代表该士兵只会进攻，1 代表该士兵只会防御，且其攻击力或防御力等于其编号。将士兵分组，编号为 1</sub>pos 的士兵为进攻组，该组的攻击力之和用 w 表示，编号为 pos+1~n 的士兵为防御组，该组的防御力之和用 v 表示，求 | w-v | 的最小值。注意：pos 可以取 0，当 pos 取 0 时，表示将所有士兵分到防御组，而进攻组没有士兵。</p>
<p>输入：</p>
<p>第一行包括一个整数 n，表示士兵的数量。</p>
<p>第二行包括一个 0/1 字符串 s，表示士兵的状态。</p>
<p>输出：</p>
<p>第一行包括一个整数，表示 | w-v | 的最小值。</p>
<p>输入示例 1：</p>
<p>4</p>
<p>0011</p>
<p>输出示例 1：</p>
<p>1</p>
<p>输入示例 2：</p>
<p>7</p>
<p>1000101</p>
<p>输出示例 2：</p>
<p>2</p>
<h2 id="思路-3"><a class="anchor" href="#思路-3">#</a> 思路</h2>
<p>思路一：暴力求解。遍历整个字符串，在每一个位置对其进行分割，得到左右两个子串，然后分别统计左右两边的攻击力或防御力，与此同时不断刷新差值绝对值的最小值。这种方法的算法复杂度较高，无法 AC。</p>
<p>思路二：逐个分配。可以先假设所有的士兵都在右边，左边没有士兵，即 pos 为 0 的情况，此时 w 和 v 均可知。然后遍历整个字符串，将士兵逐个从右边分配到左边，如果分配的士兵为 0，那么 w 加上该士兵的编号，v 不变；如果分配的士兵为 1，那么 v 减去该士兵的编号，w 不变，与此同时不断刷新差值绝对值的最小值即可。</p>
<p>以下为思路二的代码：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 因为编号为 1~n，且 pos 的取值范围为 0~n</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 所以添加两个占位符可以简化问题的求解过程</span></pre></td></tr><tr><td data-num="5"></td><td><pre>s <span class="token operator">=</span> <span class="token string">"-"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"-"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>w <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>v <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        v <span class="token operator">+=</span> i</pre></td></tr><tr><td data-num="11"></td><td><pre>res <span class="token operator">=</span> v</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        w <span class="token operator">+=</span> i</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        v <span class="token operator">-=</span> i</pre></td></tr><tr><td data-num="17"></td><td><pre>    res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>w<span class="token operator">-</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目四合并链表"><a class="anchor" href="#题目四合并链表">#</a> 题目四：合并链表</h1>
<p>给出一个链表数组，该链表数组均是某一个环状链表的一部分，请将这些链表组合并成环状链表，然后需要找到一个位置，使得从这个位置将环切开后，按照顺序或逆序遍历这个环，形成的链字典序尽量小，并返回这条链。</p>
<ul>
<li>
<p>链表字典序的定义：对于两个链表 a、b，从头节点到尾节点遍历，找到第一个不相同的节点值并比较大小，如果 a [i].val &lt; b [i].val，则认为 a 的字典序小于 b 的字典序。例如：链表 {1,2,3} &lt; 链表 {1,2,4},     链表 {3,4,5} &lt; 链表 {6,7}。</p>
</li>
<li>
<p>环状链表不存在相同的节点值。</p>
</li>
<li>
<p>该题环状链表节点个数最小为 2</p>
</li>
<li>
<p>每个链表都是在环状链表上的顺时针的一部分。</p>
</li>
<li>
<p>给定的链表数组一定能组成一个环状链表。</p>
</li>
</ul>
<p>输入示例 1：</p>
<p>[{1, 2, 3}, {2, 3, 4}, {4, 1}]</p>
<p>输出示例 1：</p>
<p 4 1, 2, 3,></p>
<p>输入示例 2：</p>
<p>[{3, 7, 4}, {7, 4, 5, 1, 10, 3}]</p>
<p>输出示例 2：</p>
<p 10 1, 5, 4, 7, 3,></p>
<h2 id="思路-4"><a class="anchor" href="#思路-4">#</a> 思路</h2>
<p>用字典存每个下标的前驱和后继，即可还原环状链表。接下来考虑切口位置，可将其转化为确定头节点和遍历方向的问题。要使字典序最小，那么头节点必须是链表里面的最小值（确定头节点），而下一节点为头节点的前驱节点和后继节点中较小的一个（确定遍历方向）。</p>
<p>本题的解法并不难，难的是如何处理输入，将其合并成一个环状链表。系统中采用的核心代码模式，只需补充解法类的实现代码即可，这里给出的是完整代码。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> re <span class="token keyword">import</span> <span class="token builtin">compile</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> MAXINT</pre></td></tr><tr><td data-num="3"></td><td><pre>inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>lss <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'\d+'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>inp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ring <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>head <span class="token operator">=</span> MAXINT</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lss<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    ring<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>lss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lss<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    head <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>rering <span class="token operator">=</span> <span class="token punctuation">&#123;</span>v <span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> ring<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>pre <span class="token operator">=</span> rering<span class="token punctuation">[</span>head<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>nex <span class="token operator">=</span> ring<span class="token punctuation">[</span>head<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>res <span class="token operator">=</span> <span class="token string">'&#123;'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">if</span> pre <span class="token operator">&lt;</span> nex<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rering<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        res <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rering<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        head <span class="token operator">=</span> rering<span class="token punctuation">[</span>head<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> pre <span class="token operator">></span> nex<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ring<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        res <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ring<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        head <span class="token operator">=</span> ring<span class="token punctuation">[</span>head<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目五买卖股票"><a class="anchor" href="#题目五买卖股票">#</a> 题目五：买卖股票</h1>
<p>现在有一个长度为 n 的价格数组 a，表示某只股票每天的价格。每天最多可以买入或卖出该只股票的一股，买入或者卖出没有手续费，且卖出股票前必须手里已经有股票才能卖出，但是持有的股票数目不受限制，并且初始资金为 m 元，在任何时刻都不能进行透支，即资金必须始终大于等于 0。请问在 n 天结束之后，拥有的最大总资产是多少？其中总资产 = 股票数目 * 股票价格 + 现金。</p>
<p>输入：</p>
<p>第一行包括两个整数 n 和 m，分别表示天数和初始资金。</p>
<p>第二行包括 n 个整数，分别表示该只股票每天的价格。</p>
<p>输入示例：</p>
<p>6 2</p>
<p>2 3 1 1 1 2</p>
<p>输出示例：</p>
<p>6</p>
<h2 id="思路-5"><a class="anchor" href="#思路-5">#</a> 思路</h2>
<p>动态规划，01 背包的变种。定义 dp [i][j] 代表前 i 天，手上当前持有 j 只股票的最大现金数，那么可以根据每天选择买入还是卖出达成转移。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>prices <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>prices<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1e16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1e16</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> m</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment"># 今天不买不卖的情况</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        nodo <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment"># 今天买入一股的情况</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        buy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e16</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            buy <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment"># 昨天卖出一股的情况</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        sell <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment"># 取资金数目最大的一种</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nodo<span class="token punctuation">,</span> buy<span class="token punctuation">,</span> sell<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e16</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token operator">*</span>prices<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="/WrittenExamination/Tencent_20220424/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>企业笔试</category>
        <category>腾讯笔试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>笔试</tag>
        <tag>牛客网</tag>
        <tag>腾讯</tag>
      </tags>
  </entry>
  <entry>
    <title>荣耀20220412</title>
    <url>/WrittenExamination/Honor_20220412/</url>
    <content><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1>
<p>笔试一共三道编程题，分数依次为 100、200、300，需要按顺序依次完成，只有做完这一道题，才能进入下一道题，无法跳题，使用的是牛客网，允许跳出界面使用自己的 IDE。</p>
<h1 id="题目一字符串分割"><a class="anchor" href="#题目一字符串分割">#</a> 题目一：字符串分割</h1>
<p>给定一系列的字符串，字符串的个数为 N，每个字符串的长度不超过 100。长度小于 8 的字符串用零补足，长度大于等于 8 的字符串，按 8 位位一组的形式不断分割，最后剩余部分用零补足。</p>
<p>输入：</p>
<p>第一行包括一个整数 N 和 N 个原始字符串。</p>
<p>输出：</p>
<p>第一行包括分割后的字符串按字典序从小到大排列。</p>
<p>输入示例：</p>
<p>2 abc 123456789</p>
<p>输出示例：</p>
<p>12345678 90000000 abc00000</p>
<h2 id="思路"><a class="anchor" href="#思路">#</a> 思路：</h2>
<p>这一题比较简单，只需要按照题目的描述做即可。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    string <span class="token operator">=</span> inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        string <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string <span class="token operator">+</span> <span class="token string">"0"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="题目二蜜蜂采蜜"><a class="anchor" href="#题目二蜜蜂采蜜">#</a> 题目二：蜜蜂采蜜</h1>
<p>平原上，一群蜜蜂离开蜂巢采蜜，要连续采集 5 片花丛后归巢。<br>
已知 5 片花丛相对蜂巢的坐标，请你帮它们规划一下到访花丛的顺序，以使飞行总距离最短。</p>
<p>输入：</p>
<p>以蜂巢为平面坐标原点的 5 片花丛 A、B、C、D、E 的坐标，坐标值为整数。</p>
<p>输出：</p>
<p>从出发到返回蜂巢最短路径的长度取整值，取整办法为舍弃小数点后面的值。</p>
<p>输入示例：</p>
<p>200 0 200 10 200 50 200 30 200 25</p>
<p>输出示例：</p>
<p>456</p>
<p>说明：</p>
<p>样例中的 10 个数，相邻两个分别为一组，表示一个花丛相对蜂巢的坐标：A (x1, y1)、B (x2, y2)、C (x3, y3)、D (x4, y4)、E (x5, y5)，分表代表 x1,y1,x2,y2,x3,y3,x4,y4,x5,y5。</p>
<h2 id="说明"><a class="anchor" href="#说明">#</a> 说明：</h2>
<p>本题实际上是一道旅行商问题（TSP），经典的 TSP 可以描述为：一个商品推销员要去若干个城市推销商品，该推销员从一个城市出发，需要经过所有城市后，回到出发地。应如何选择行进路线，以使总的行程最短。从图论的角度来看，该问题实质是在一个带权完全无向图中，找一个权值最小的 Hamilton 回路。由于该问题的可行解是所有顶点的全排列，随着顶点数的增加，会产生组合爆炸，它是一个 NP 完全问题。</p>
<p>常见的解法有暴力破解、深度优先遍历，动态规划等。</p>
<p>高级的解法有模拟退火算法，遗传算法，粒子群算法、神经网络等</p>
<h2 id="思路一"><a class="anchor" href="#思路一">#</a> 思路一：</h2>
<p>暴力破解，求出五片花丛所有可能的到访顺序（全排列），取飞行总距离最短的路径即可。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token punctuation">,</span> floor</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> MAXINT</pre></td></tr><tr><td data-num="3"></td><td><pre>inp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>mincost <span class="token operator">=</span> MAXINT</pre></td></tr><tr><td data-num="5"></td><td><pre>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inp<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>ls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">def</span> <span class="token function">Perm</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">global</span> mincost<span class="token punctuation">,</span> ls<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> path</pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span> begin <span class="token operator">>=</span> end<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        cost <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            cost <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        cost <span class="token operator">=</span> cost <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> cost <span class="token operator">&lt;</span> mincost<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            path <span class="token operator">=</span> nums</pre></td></tr><tr><td data-num="20"></td><td><pre>            mincost <span class="token operator">=</span> cost</pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            Perm<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>nums <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="29"></td><td><pre>Perm<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mincost<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="思路二"><a class="anchor" href="#思路二">#</a> 思路二：</h2>
<p>采用深度优先遍历来寻找最短路径，并在遍历过程中通过不断剪枝来简化求解过程，广义上来讲也是全排列的一种。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token punctuation">,</span> floor</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> MAXINT</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">global</span> mincost<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> visited</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> cost <span class="token operator">></span> mincost<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        cost <span class="token operator">=</span> cost <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> cost <span class="token operator">&lt;</span> mincost<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            mincost <span class="token operator">=</span> cost</pre></td></tr><tr><td data-num="12"></td><td><pre>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">not</span> visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            DFS<span class="token punctuation">(</span>v<span class="token punctuation">,</span> cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> cost <span class="token operator">+</span> matrix<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>inp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>mincost <span class="token operator">=</span> MAXINT</pre></td></tr><tr><td data-num="20"></td><td><pre>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inp<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="22"></td><td><pre>ls<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>ls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>DFS<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>floor<span class="token punctuation">(</span>mincost<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="惨痛经历"><a class="anchor" href="#惨痛经历">#</a> 惨痛经历</h1>
<p>因为邮件上写着系统开放时间为 18:00-21:00（不同于美团写着笔试时间为 16:00-18:00），所以我习惯性得以为笔试时间为三个小时，当我悠哉游哉地把第二题做完返回系统时，笔试已经结束了，因此只提交了第一题，直接人麻了。。。所以，各位小伙伴无论是在比赛还是在测试，一定先看好时间！！！当然，对于秒 AK 的大佬来说，时间根本不是事，那就当我没说。</p>
<p><img data-src="/WrittenExamination/Honor_20220412/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>企业笔试</category>
        <category>荣耀笔试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>笔试</tag>
        <tag>牛客网</tag>
        <tag>荣耀</tag>
      </tags>
  </entry>
  <entry>
    <title>53-II</title>
    <url>/LeetCode/%E5%89%91%E6%8C%87Offer/53-II/</url>
    <content><![CDATA[<h2 id="题目简述"><a class="anchor" href="#题目简述">#</a> 题目简述</h2>
<p>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0～n-1 之内。在范围 0～n-1 内的 n 个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>
<h2 id="题解示例"><a class="anchor" href="#题解示例">#</a> 题解示例</h2>
<p>示例 1:</p>
<p>输入: [0,1,3]<br>
 输出: 2<br>
 示例 2:</p>
<p>输入: [0,1,2,3,4,5,6,7,9]<br>
 输出: 8</p>
<h2 id="数据范围"><a class="anchor" href="#数据范围">#</a> 数据范围</h2>
<p>1 &lt;= 数组长度 &lt;= 10000</p>
<h2 id="标记难度"><a class="anchor" href="#标记难度">#</a> 标记难度</h2>
<p>通过次数：126,612<br>
 提交次数：284,562<br>
 通过率：44.5%</p>
<h2 id="问题简析"><a class="anchor" href="#问题简析">#</a> 问题简析</h2>
<p>对该数组进行<strong>二分查找</strong>即可。<br>
若计算得到的中值与数组中值相等，则缺失的数字在右区间中；<br>
若计算得到的中值与数组中值不相等，则缺失的数字在左区间中；</p>
<p>最简单的方法便是遍历数组，如此则未能将<strong>数组有序</strong>的条件合理利用，其时间复杂度也相对较大。</p>
<h2 id="python3代码"><a class="anchor" href="#python3代码">#</a> python3 代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>     </pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> mid<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                i <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                j <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> i</pre></td></tr></table></figure><h2 id="c语言代码"><a class="anchor" href="#c语言代码">#</a> C 语言代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">!=</span> mid<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="c代码copy"><a class="anchor" href="#c代码copy">#</a> C++ 代码（Copy）</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">else</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token comment">// 注意最后 left 不等于 right，只能返回 left</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="大佬专属代码"><a class="anchor" href="#大佬专属代码">#</a> 大佬专属代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></pre></td></tr></table></figure><p><strong>敲黑板！！！</strong><br>
<strong>有序数组二分法！！！有序数组二分法！！！有序数组二分法！！！（重要的事情说三遍）</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210607210749915.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>力扣题库</category>
        <category>剑指0ffer</category>
        <category>53-II</category>
      </categories>
  </entry>
  <entry>
    <title>11-期望个数统计</title>
    <url>/LeetCode/%E9%9A%BE%E5%BA%A6%E7%AE%80%E5%8D%95/11-%E6%9C%9F%E6%9C%9B%E4%B8%AA%E6%95%B0%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="题目简述"><a class="anchor" href="#题目简述">#</a> 题目简述</h2>
<p>某互联网公司一年一度的春招开始了，一共有 n 名面试者入选。每名面试者都会提交一份简历，公司会根据提供的简历资料产生一个预估的能力值，数值越大代表越有可能通过面试。</p>
<p>小 A 和小 B 负责审核面试者，他们均有所有面试者的简历，并且将各自根据面试者能力值从大到小的顺序浏览。由于简历事先被打乱过，能力值相同的简历的出现顺序是从它们的全排列中等可能地取一个。现在给定 n 名面试者的能力值 scores，设 X 代表小 A 和小 B 的浏览顺序中出现在同一位置的简历数，求 X 的期望。</p>
<p>提示：离散的非负随机变量的期望计算公式为   E (X) = Σ(k=1, ∞) kPr (X = k)。在本题中，由于 X 的取值为 0 到 n 之间，期望计算公式可以是 E (X) = Σ(k=1, n) kPr (X = k)。</p>
<h2 id="题解示例"><a class="anchor" href="#题解示例">#</a> 题解示例</h2>
<p>示例 1：</p>
<p>输入：scores = [1,2,3]</p>
<p>输出：3</p>
<p>解释：由于面试者能力值互不相同，小 A 和小 B 的浏览顺序一定是相同的。X 的期望是 3 。</p>
<p>示例 2：</p>
<p>输入：scores = [1,1]</p>
<p>输出：1</p>
<p>解释：设两位面试者的编号为 0, 1。由于他们的能力值都是 1，小 A 和小 B 的浏览顺序都为从全排列 [[0,1],[1,0]] 中等可能地取一个。如果小 A 和小 B 的浏览顺序都是 [0,1] 或者 [1,0] ，那么出现在同一位置的简历数为 2 ，否则是 0 。所以 X 的期望是 (2+0+2+0) * 1/4 = 1</p>
<p>示例 3：</p>
<p>输入：scores = [1,1,2]</p>
<p>输出：2</p>
<h2 id="数据范围"><a class="anchor" href="#数据范围">#</a> 数据范围</h2>
<p>1 &lt;= scores.length &lt;= 10^5<br>
0 &lt;= scores[i] &lt;= 10^6</p>
<h2 id="标记难度"><a class="anchor" href="#标记难度">#</a> 标记难度</h2>
<p>难度：简单<br>
通过次数：6051<br>
 提交次数：8963<br>
 通过率：67.5%</p>
<h2 id="问题解析"><a class="anchor" href="#问题解析">#</a> 问题解析</h2>
<p>数组中的元素可以分为两种：单元素和多元素。</p>
<p>对于单元素，由于两位面试官都是根据能力值从大到小的顺序浏览，假设数组元素按数值非递 c 增的顺序排列，那么其在数组中的顺序一定是相同的，即单元素在两位面试官的浏览顺序中一定是出现在同一位置的，则单元素的数学期望为 1。</p>
<p>对于多元素，假设该元素出现 m 次，编号为 0，1，2，...，m-1。假设 m = 3，则全排列有如下 6 种情况：（0,1,2），（0,2,1），（1,0,2），（1,2,0），（2,0,1），（2,1,0），现两个面试官分别从六种顺序里挑选一种，易知每个位置编号相同的概率均为 1/3，那么可以得出两位面试官在同一位置选取同一元素的概率为 1/n，则多元素的数学期望为 1/n × n = 1。</p>
<p>可以得出，无论是单元素还是多元素，其数学期望均为 1，即整个数组的数学期望等于数组中数值不同的元素的个数和。</p>
<h2 id="python3代码"><a class="anchor" href="#python3代码">#</a> python3 代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">expectNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="c语言代码"><a class="anchor" href="#c语言代码">#</a> C 语言代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">expectNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> scores<span class="token punctuation">,</span> <span class="token keyword">int</span> scoresSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scoresSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            hash<span class="token punctuation">[</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            result<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="c代码"><a class="anchor" href="#c代码">#</a> C++ 代码</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">expectNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> scores<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">set</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scores<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="大佬专属代码"><a class="anchor" href="#大佬专属代码">#</a> 大佬专属代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 暂时没看到任何 “出类拔萃” 的代码</span></pre></td></tr></table></figure><p><strong>敲黑板！！！</strong><br>
<strong>这道题关键在于看懂题目，只能说：概率论 yyds！！！</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210606171417228.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>力扣题库</category>
        <category>难度简单</category>
        <category>期望个数统计</category>
      </categories>
  </entry>
  <entry>
    <title>22-黑白方格画</title>
    <url>/LeetCode/%E9%9A%BE%E5%BA%A6%E7%AE%80%E5%8D%95/22-%E9%BB%91%E7%99%BD%E6%96%B9%E6%A0%BC%E7%94%BB/</url>
    <content><![CDATA[<h2 id="题目简述"><a class="anchor" href="#题目简述">#</a> 题目简述</h2>
<p>小扣注意到秋日市集上有一个创作黑白方格画的摊位。摊主给每个顾客提供一个固定在墙上的白色画板，画板不能转动。画板上有 n * n 的网格。绘画规则为，小扣可以选择任意多行以及任意多列的格子涂成黑色（<strong>选择的整行、整列均需涂成黑色</strong>），<strong>所选行数、列数均可为 0</strong>。</p>
<p>小扣希望最终的成品上需要有 k 个黑色格子，请返回小扣共有多少种涂色方案。</p>
<p>注意：两个方案中任意一个相同位置的格子颜色不同，就视为不同的方案。</p>
<h2 id="题解示例"><a class="anchor" href="#题解示例">#</a> 题解示例</h2>
<p>示例 1：</p>
<p>输入：n = 2, k = 2</p>
<p>输出：4</p>
<p>解释：一共有四种不同的方案：<br>
第一种方案：涂第一列；<br>
第二种方案：涂第二列；<br>
第三种方案：涂第一行；<br>
第四种方案：涂第二行。</p>
<p>示例 2：</p>
<p>输入：n = 2, k = 1</p>
<p>输出：0</p>
<p>解释：不可行，因为第一次涂色至少会涂两个黑格。</p>
<p>示例 3：</p>
<p>输入：n = 2, k = 4</p>
<p>输出：1</p>
<p>解释：共有 2*2=4 个格子，仅有一种涂色方案。</p>
<h2 id="数据范围"><a class="anchor" href="#数据范围">#</a> 数据范围</h2>
<p>1 &lt;= n &lt;= 6<br>
0 &lt;= k &lt;= n * n</p>
<h2 id="标记难度"><a class="anchor" href="#标记难度">#</a> 标记难度</h2>
<p>难度：简单<br>
通过次数：8065<br>
 提交次数：24485<br>
 通过率：32.9%</p>
<h2 id="问题解析"><a class="anchor" href="#问题解析">#</a> 问题解析</h2>
<p>本题主要考察组合和阶乘。</p>
<p>假设选择涂黑 i 行、j 列，那么此时黑色方块共有 <strong>i*n + j*n - i*j</strong> 块，其中 <strong>i*j</strong> 为行和列重合的块数。</p>
<p>而在 n 行中取 i 行、在 n 列中取 j 列，即数学中的组合数，其值可以分别为 <strong>n! / (i!(n-i)!)</strong>  、 <strong>n! / (j!(n-j)!)</strong> ，这便涉及到阶乘的计算了。</p>
<p>要注意的是，当不涂或者涂满时，方法都只有一种。</p>
<h2 id="python3代码"><a class="anchor" href="#python3代码">#</a> python3 代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">paintingPlan</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> k <span class="token operator">==</span> n<span class="token operator">*</span>n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        result <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">if</span> n<span class="token operator">*</span>i <span class="token operator">+</span> n<span class="token operator">*</span>j <span class="token operator">-</span> i<span class="token operator">*</span>j <span class="token operator">==</span> k<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    result <span class="token operator">+=</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>n<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>           </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr></table></figure><p>其中，阶乘的求解可以用递归，也可以用循环，或者直接用库函数，可以分别运行来比较其时间复杂度和空间复杂度。</p>
<p>另外，组合的求解方式也非常多样化，可以利用阶乘函数计算，也可以直接进行数值计算。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 递归</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>		<span class="token keyword">return</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>		<span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 循环</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	fact <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		fact <span class="token operator">*=</span> i</pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">return</span> fact</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment"># 利用阶乘</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">def</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">return</span> factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment"># 直接计算</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">def</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	result <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>   		result <span class="token operator">*=</span> i</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        result <span class="token operator">/=</span> j</pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment"># 防溢出防除不尽</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">def</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	result <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		result <span class="token operator">*=</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">/</span>i</pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token keyword">return</span> result</pre></td></tr></table></figure><h2 id="c语言代码"><a class="anchor" href="#c语言代码">#</a> C 语言代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   	<span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token punctuation">&#123;</span> 	</pre></td></tr><tr><td data-num="5"></td><td><pre>		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   	<span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   	<span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">paintingPlan</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> n<span class="token operator">*</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">*</span>i <span class="token operator">+</span> n<span class="token operator">*</span>j <span class="token operator">-</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                result <span class="token operator">+=</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="c代码copy"><a class="anchor" href="#c代码copy">#</a> C++ 代码（Copy）</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token comment">// 预处理组合数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> C<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">else</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">paintingPlan</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">*</span> i <span class="token operator">+</span> n <span class="token operator">*</span> j <span class="token operator">-</span> i <span class="token operator">*</span> j <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    ans <span class="token operator">+=</span> C<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="大佬专属代码"><a class="anchor" href="#大佬专属代码">#</a> 大佬专属代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">paintingPlan</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	    p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	       p<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">44</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">14</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>	        p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            p<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            p<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            p<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            p<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            p<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            p<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">17</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            p<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">21</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            p<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">19</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            p<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            p<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">25</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">24</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            p<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            p<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">22</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>            p<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">36</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>            p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">35</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            p<span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">34</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre>            p<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">33</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            p<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre>            p<span class="token operator">=</span><span class="token number">405</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">31</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            p<span class="token operator">=</span><span class="token number">72</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>            p<span class="token operator">=</span><span class="token number">612</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">28</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>            p<span class="token operator">=</span><span class="token number">450</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">27</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="106"></td><td><pre>            p<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">26</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            p<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">24</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre>            p<span class="token operator">=</span><span class="token number">630</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">21</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>            p<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>            p<span class="token operator">=</span><span class="token number">225</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="116"></td><td><pre>            p<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>            p<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            p<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="122"></td><td><pre>            p<span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="124"></td><td><pre>            p<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>    <span class="token keyword">return</span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>敲黑板！！！<br>
排列、组合、阶乘的各种实现代码必须做到信手拈来，还要考虑其时间复杂度、空间复杂度、是否溢出、是否除不尽等！！！</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210602213721831.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>力扣题库</category>
        <category>难度简单</category>
        <category>黑白方格画</category>
      </categories>
  </entry>
  <entry>
    <title>54-螺旋矩阵</title>
    <url>/LeetCode/%E9%9A%BE%E5%BA%A6%E4%B8%AD%E7%AD%89/54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h2 id="题目简述"><a class="anchor" href="#题目简述">#</a> 题目简述</h2>
<p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</p>
<h2 id="题解示例"><a class="anchor" href="#题解示例">#</a> 题解示例</h2>
<p>示例 1：<br>
输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>
 输出：[1,2,3,6,9,8,7,4,5]<br>
<img data-src="https://img-blog.csdnimg.cn/20210604152606550.png" alt="在这里插入图片描述"><br>
示例 2：<br>
输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>
 输出：[1,2,3,4,8,12,11,10,9,5,6,7]<br>
<img data-src="https://img-blog.csdnimg.cn/20210604152628828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="数据范围"><a class="anchor" href="#数据范围">#</a> 数据范围</h2>
<p>m = matrix.length<br>
n = matrix[i].length<br>
1 &lt;= m, n &lt;= 10<br>
-100 &lt;= matrix[i][j] &lt;= 100</p>
<h2 id="标记难度"><a class="anchor" href="#标记难度">#</a> 标记难度</h2>
<p>难度：中等<br>
通过次数：158025<br>
 提交次数：335,777<br>
 通过率：47.1%</p>
<h2 id="问题解析"><a class="anchor" href="#问题解析">#</a> 问题解析</h2>
<p>本题主要考察矩阵的遍历，还涉及到递归、矩阵转置等知识。</p>
<p>最直观的方法就是按圈遍历矩阵，从外到里一圈一圈遍历，即先遍历矩阵的最外圈，然后递归地遍历其子矩阵的最外圈。要注意的是，单行或单列需要特殊处理。</p>
<h2 id="python3代码"><a class="anchor" href="#python3代码">#</a> python3 代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>    	row<span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">def</span> <span class="token function">getOutermostCircle</span><span class="token punctuation">(</span>row_start<span class="token punctuation">,</span> row_end<span class="token punctuation">,</span> col_start<span class="token punctuation">,</span> col_end<span class="token punctuation">)</span><span class="token punctuation">:</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">if</span> row_start <span class="token operator">></span> row_end <span class="token keyword">or</span> col_start <span class="token operator">></span> col_end<span class="token punctuation">:</span><span class="token comment"># 防错</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">elif</span> row_start <span class="token operator">==</span> row_end<span class="token punctuation">:</span> <span class="token comment">#单行</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                circle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col_start<span class="token punctuation">,</span> col_end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 上边</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row_start<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">return</span> circle</pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token comment"># return matrix[row_start][col_start:col_end+1]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">elif</span> col_start <span class="token operator">==</span> col_end<span class="token punctuation">:</span> <span class="token comment">#单列</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                circle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row_start<span class="token punctuation">,</span> row_end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_start<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">return</span> circle</pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 多行多列</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                circle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col_start<span class="token punctuation">,</span> col_end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 上边</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row_start<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    <span class="token comment"># circle.extend(matrix[row_start][col_start:col_end+1])</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row_start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> row_end<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 右边</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                    circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_end<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col_end<span class="token punctuation">,</span> col_start<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 下边</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row_end<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    <span class="token comment"># circle.extend(reversed(matrix[row_end][col_start:col_end+1]))</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row_end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> row_start<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 左边</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                    circle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_start<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">return</span> circle <span class="token operator">+</span> getOutermostCircle<span class="token punctuation">(</span>row_start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> row_end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> col_start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col_end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 拼接</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> getOutermostCircle<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="c语言代码官方"><a class="anchor" href="#c语言代码官方">#</a> C 语言代码（官方）</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrixSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> rows <span class="token operator">=</span> matrixSize<span class="token punctuation">,</span> columns <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> total <span class="token operator">=</span> rows <span class="token operator">*</span> columns<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span><span class="token operator">*</span> order <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> columns <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> left<span class="token punctuation">;</span> column <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> column<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            order<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            order<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> column <span class="token operator">></span> left<span class="token punctuation">;</span> column<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                order<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> bottom<span class="token punctuation">;</span> row <span class="token operator">></span> top<span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                order<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        left<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        right<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        top<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        bottom<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">return</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="c官方"><a class="anchor" href="#c官方">#</a> C++（官方）</h2>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> columns <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> left<span class="token punctuation">;</span> column <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> column<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                order<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                order<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> column <span class="token operator">></span> left<span class="token punctuation">;</span> column<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    order<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> bottom<span class="token punctuation">;</span> row <span class="token operator">></span> top<span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    order<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            left<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            right<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            top<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            bottom<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">return</span> order<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="大佬专属代码"><a class="anchor" href="#大佬专属代码">#</a> 大佬专属代码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">while</span> matrix<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            res <span class="token operator">+=</span> matrix<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            matrix <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure><p><strong>敲黑板！！！</strong><br>
<strong>熟练掌握矩阵、列表的各种函数或方法！！！</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210604172806704.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tpc3NNb29uXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>力扣题库</category>
        <category>难度中等</category>
        <category>螺旋矩阵</category>
      </categories>
  </entry>
</search>
