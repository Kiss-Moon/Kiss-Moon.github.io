<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>两数之和</title>
    <url>/LeetCode/1_twosum_easy/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p>
<h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p>
<h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>（1）2 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>（2）-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109<br>（3）-109 &lt;&#x3D; target &lt;&#x3D; 109<br>（4）只会存在一个有效答案</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>两数之和</category>
      </categories>
  </entry>
  <entry>
    <title>CPP语言基础</title>
    <url>/C-CPP/CPP%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C-CPP</category>
        <category>CPP语言基础</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>学生成绩管理系统</title>
    <url>/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>相信很多同仁在大学学习编程的时候都会被老师要求动手敲出一个学生成绩管理系统或图书馆管理系统之类的程序吧。<br><strong>不得不说，这个程序简直就是大多数初学者的恶梦，毕竟它的内容涉及到了整一个学期学到的所有知识。</strong><br><del>况且，对于像我这种在大学前从来没接触过编程，也不知道代码是啥的绝对萌新来说，更是一次史诗级的灾难。</del> </p>
<p><strong>你见过凌晨四点的教学楼吗？</strong><br><strong>我见过，那时候我刚从里面出来。</strong><br><img data-src="/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.jpg"></p>
<p><strong>话不多说，说多了都是泪。</strong></p>
<p>实验要求我就不赘述了吧，无非就是录成绩、各种方式查成绩、名次排序、计算均分等。</p>
<p><strong>还是直接上代码吧，大家都是爽快人！</strong></p>
<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#define N 30
#define M 10
#define X 6

/*学生信息结构体，包括学号，姓名，各学科分数，总分，均分*/
typedef struct student
&#123;
  long number;
  char name[M];
  int score[X];
  int stutotal;
  float stuaverage;
&#125;STUDENT;/*对学生信息结构体取别名“STUDENT”*/

/*实现两个结构体的交换，注意，结构体是可以直接赋值的*/
void Swap(STUDENT *a,STUDENT *b)
&#123;
  STUDENT temp;
  temp=*a;
  *a=*b;
  *b=temp;
&#125;

/*由用户用键盘依次输入学生信息*/
void Input(STUDENT stu[],int n,int x)
&#123;
    printf(&quot;\n\n&quot;);
    int i,j;
    for(i=0;i&lt;n;i++)
    &#123;
        printf(&quot;Number:\t&quot;);
        scanf(&quot;%ld&quot;,&amp;stu[i].number);
        getchar();/*清除缓冲区中的回车字符，防止被读入学生姓名*/
        printf(&quot;Name:\t&quot;);
        gets(stu[i].name);
        for(j=0;j&lt;x;j++)
        &#123;
            do&#123;
                printf(&quot;Score %d:&quot;,j+1);
                scanf(&quot;%d&quot;,&amp;stu[i].score[j]);
            &#125;while(stu[i].score[j]&lt;0||stu[i].score[j]&gt;100);/*防止录入异常成绩*/
        &#125;
    &#125;
&#125;

/*计算各学科的总分和均分*/
void SubCalculate(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&#123;
    int i,j;
    for(j=0;j&lt;x;j++)
    &#123;
        subtotal[j]=0;/*学科总成绩初始化为0*/
        for(i=0;i&lt;n;i++)
        &#123;
            subtotal[j]=subtotal[j]+stu[i].score[j];
        &#125;
        subaverage[j]=(float)subtotal[j]/n;/*将整型数强转为浮点数后进行浮点数运算，确保数据的准确性*/
        printf(&quot;(subject %d)Total:%d\t\tAverage:%6.2f\n&quot;,j+1,subtotal[j],subaverage[j]);
    &#125;
 &#125;

/*计算每个学生的总分和均分*/
void StuCalculate(STUDENT stu[],int n,int x)
&#123;
    int i,j;
    for(i=0;i&lt;n;i++)
    &#123;
        stu[i].stutotal=0;/*学生总成绩初始化为0*/
        for(j=0;j&lt;x;j++)
        &#123;
            stu[i].stutotal=stu[i].stutotal+stu[i].score[j];
        &#125;
        stu[i].stuaverage=(float)stu[i].stutotal/x;/*将整型数强转为浮点数后进行浮点数运算，确保数据的准确性*/
        printf(&quot;(student %d)Total:%d\t\tAverage:%6.2f\n&quot;,i+1,stu[i].stutotal,stu[i].stuaverage);
    &#125;
&#125;

/*将学生成绩按从高到低的顺序排列*/
void SortStuScoreUpdown(STUDENT stu[],int n)
&#123;
    for (int i = 0; i &lt; n - 1; ++i)
    &#123;
        for (int j = i + 1; j &lt; n; ++j)
        &#123;
            if (stu[i].stutotal &lt; stu[j].stutotal) Swap(&amp;stu[i], &amp;stu[j]);/*如果前面的学生的总成绩小于后面的学生的总成绩，则交换两个学生信息结构体位置*/
        &#125;
      &#125;
&#125;

/*将学生成绩按从低到高的顺序排列*/
void SortStuScoreDownup(STUDENT stu[],int n)
&#123;
        for (int i = 0; i &lt; n - 1; ++i)
    &#123;
        for (int j = i + 1; j &lt; n; ++j)
        &#123;
            if (stu[i].stutotal &gt; stu[j].stutotal) Swap(&amp;stu[i], &amp;stu[j]);/*如果前面的学生的总成绩大于后面的学生的总成绩，则交换两个学生信息结构体位置*/
        &#125;
      &#125;
&#125;

/*将学生学号按从小到大排列*/
void SortNumberDownup(STUDENT stu[],int n)
&#123;
        for (int i = 0; i &lt; n - 1; ++i)
    &#123;
        for (int j = i + 1; j &lt; n; ++j)
        &#123;
            if (stu[i].number &gt; stu[j].number) Swap(&amp;stu[i], &amp;stu[j]);/*如果前面的学生的学号大于后面的学生的学号，则交换两个学生信息结构体位置*/
        &#125;
      &#125;
&#125;

/*将学生姓名按字典顺序排列*/
void SortName(STUDENT stu[],int n)
&#123;
    for (int i = 0; i &lt; n - 1; ++i)
    &#123;
        for (int j = i + 1; j &lt; n; ++j)
        &#123;
            if (strcmp(stu[i].name,stu[j].name)&gt;0) Swap(&amp;stu[i], &amp;stu[j]);/*如果前面的学生的字母序位大于后面的学生的字母序位，则交换两个学生信息结构体位置*/
        &#125;
      &#125;
&#125;

/*按学号查找学生并输出学生信息*/
void SearchNumber(STUDENT stu[],int n,int x)
&#123;
    int i,j,flag=0;/*未找到学生时flag初始化为0*/
    long temp;
    printf(&quot;Input the number:\t&quot;);
    scanf(&quot;%ld&quot;,&amp;temp);
    getchar();
    SortStuScoreUpdown(stu,n);/*将学生按照成绩从高到低排序以获得学生的排名情况*/
    for(i=0;i&lt;n;i++)/*将录入的学生学号与待查学号进行一一比对*/
    &#123;
        if(stu[i].number==temp)/*找到与待查学号一致的学号*/
        &#123;
            flag=1;/*找到学号对应的学生时，flag被赋值为1*/
            printf(&quot;Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n&quot;);
            printf(&quot;%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t&quot;,stu[i].name,stu[i].number,i+1,stu[i].stutotal,stu[i].stuaverage);
            for(j=0;j&lt;x;j++)
            &#123;
                printf(&quot;%4d&quot;,stu[i].score[j]);
            &#125;
            printf(&quot;\n&quot;);
            break;
        &#125;
    &#125;
    if(flag==0)/*未找到学号对应学生时，flag的值仍为0*/
    &#123;
        printf(&quot;\nNot find!\n&quot;);
    &#125;
&#125;

/*按姓名查找学生并输出学生信息*/
void SearchName(STUDENT stu[],int n,int x)
&#123;
    int i,j,flag=0;/*未找到学生时flag初始化为0*/
    char tep[M];
    printf(&quot;Input the name:\t&quot;);
  scanf(&quot; %s&quot;,tep);
    SortStuScoreUpdown(stu,n);/*将学生按照成绩从高到低排序以获得学生的排名情况*/
    for(i=0;i&lt;n;i++)/*将录入的学生姓名与待查姓名进行一一比对*/
    &#123;
        if(strcmp(stu[i].name,tep)==0)/*找到与待查姓名字母顺序完全一致的姓名*/
        &#123;
            flag=1;/*找到学号对应的学生时，flag被赋值为1*/
            printf(&quot;Name:     \tNumber:      \tPosition:\tTotalscore:\tAveragescore:\t  Subjectscores:\n&quot;);
            printf(&quot;%-10s\t%-13ld\t%9d\t%11d\t%13.2f\t&quot;,stu[i].name,stu[i].number,i+1,stu[i].stutotal,stu[i].stuaverage);
            for(j=0;j&lt;x;j++)
            &#123;
                printf(&quot;%4d&quot;,stu[i].score[j]);
            &#125;
            printf(&quot;\n&quot;);
            break;
        &#125;
    &#125;
    if(flag==0)/*未找到学号对应学生时，flag的值仍为0*/
    &#123;
        printf(&quot;\nNot find!\n&quot;);
    &#125;
&#125;

/*统计并打印出各学科各阶段人数及占比*/
void Analysis(STUDENT stu[],int n,int x)
&#123;
    int a[N]=&#123;0&#125;,b[N]=&#123;0&#125;,c[N]=&#123;0&#125;,d[N]=&#123;0&#125;,e[N]=&#123;0&#125;;
    int i,j;
    for(j=0;j&lt;x;j++)
    &#123;
        for(i=0;i&lt;n;i++)
        &#123;
            if    (100&gt;=stu[i].score[j]&amp;&amp;90&lt;=stu[i].score[j])    a[j]++;
            else if(89&gt;=stu[i].score[j]&amp;&amp;80&lt;=stu[i].score[j])    b[j]++;
            else if(79&gt;=stu[i].score[j]&amp;&amp;70&lt;=stu[i].score[j])    c[j]++;
            else if(69&gt;=stu[i].score[j]&amp;&amp;60&lt;=stu[i].score[j])    d[j]++;
            else                                                           e[j]++;
        &#125;
    &#125;
    for(j=0;j&lt;x;j++)
    &#123;
        printf(&quot;Subject No.%d:\n&quot;,j+1);
        printf(&quot;Excellent:%d\tpercent:%.2f%%\n&quot;,a[j],(float)100*a[j]/n);
        printf(&quot;Good:     %d\tpercent:%.2f%%\n&quot;,b[j],(float)100*b[j]/n);
        printf(&quot;Medium:   %d\tpercent:%.2f%%\n&quot;,c[j],(float)100*c[j]/n);
        printf(&quot;Pass:     %d\tpercent:%.2f%%\n&quot;,d[j],(float)100*d[j]/n);
        printf(&quot;Failed:   %d\tpercent:%.2f%%\n&quot;,e[j],(float)100*e[j]/n);
        printf(&quot;\n&quot;);
    &#125;
    printf(&quot;\n&quot;);
&#125;

/*输出各学生的学生信息及各课程的总分和均分*/
void List(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&#123;
    int i,j;
    printf(&quot;Name:     \tNumber:      \tTotalscore:\tAveragescore:\tSub 1:Sub 2:Sub 3:Sub 4:Sub 5:Sub 6:\n&quot;);
    for(i=0;i&lt;n;i++)
    &#123;
        printf(&quot;%-10s\t%-13ld\t%11d\t%13.2f\t&quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
        for(j=0;j&lt;x;j++)
        &#123;
            printf(&quot;%6d&quot;,stu[i].score[j]);
        &#125;
        printf(&quot;\n&quot;);
    &#125;
     printf(&quot;          \t             \t           \t           \t&quot;);
     for(j=0;j&lt;x;j++)
     &#123;
      printf(&quot;%6d&quot;,subtotal[j]);
     &#125;
      printf(&quot;\n&quot;);
      printf(&quot;         \t             \t           \t          \t&quot;);
      for(j=0;j&lt;x;j++)
      &#123;
          printf(&quot;%6.2f&quot;,subaverage[j]);
      &#125;
&#125;

/*打印姓名，学号，总分，均分及各学科的分数*/
void Print1(STUDENT stu[],int n,int x)
&#123;
    int i,j;
    printf(&quot;Name:     \tNumber:\t      Totalscore:\tAveragescore:\tSubjectscore:\n&quot;);
    for(i=0;i&lt;n;i++)
    &#123;
        printf(&quot;%-10s\t%-13ld\t%9d\t%13.2f\t&quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
        for(j=0;j&lt;x;j++)
        &#123;
            printf(&quot;%-6d&quot;,stu[i].score[j]);
        &#125;
        printf(&quot;\n&quot;);
    &#125;
&#125;

/*打印各课程的总分和均分*/
void Print2(int subtotal[],float subaverage[],int x)
&#123;
  int i;
  for(i=0;i&lt;x;i++)
  &#123;
    printf(&quot;subtotal No.%d: %-6d\tsubaverage No.%d: %-6.2f\n&quot;,i+1,subtotal[i],i+1,subaverage[i]);
  &#125;
&#125;

/*将信息写入文件并保存*/
void WritetoFile(STUDENT stu[],int subtotal[],float subaverage[],int n,int x)
&#123;
  FILE *fp;
  int i,j;
  if((fp=fopen(&quot;score.txt&quot;,&quot;w&quot;))==NULL)/*检验文件是否打开成功*/
  &#123;
    printf(&quot;Failure to open score.txt!\n&quot;);
    exit(0);
  &#125;
  fprintf(fp,&quot;%d\t%d\n&quot;,n,x);
  for(i=0;i&lt;n;i++)
  &#123;
    fprintf(fp,&quot;%-10s\t%-13ld\t%11d\t%13.2f\t&quot;,stu[i].name,stu[i].number,stu[i].stutotal,stu[i].stuaverage);
     for(j=0;j&lt;x;j++)
        &#123;
            fprintf(fp,&quot;%-6d\n&quot;,stu[i].score[j]);
        &#125;
  &#125;
  for(j=0;j&lt;x;j++)
  &#123;
      fprintf(fp,&quot;%d\t%f\n&quot;,subtotal[j],subaverage[j]);
  &#125;
  fclose(fp);
&#125;

/*从文件中读取出信息*/
void ReadfromFile(STUDENT stu[],int subtotal[],float subaverage[],int *n,int *x)
&#123;
  FILE *fp;
  int i,j;
  if((fp=fopen(&quot;score.txt&quot;,&quot;r&quot;))==NULL)/*检验文件是否打开成功*/
  &#123;
    printf(&quot;Failure to open score.txt!\n&quot;);
    exit(0);
  &#125;
   fscanf(fp,&quot;%d\t%d\n&quot;,n,x);
  for(i=0;i&lt;*n;i++)
    &#123;
      fscanf(fp,&quot;%10s&quot;,stu[i].name);
      fscanf(fp,&quot;%13ld&quot;,&amp;stu[i].number);
      fscanf(fp,&quot;%11d&quot;,&amp;stu[i].stutotal);
      fscanf(fp,&quot;%f&quot;,&amp;stu[i].stuaverage);
      for(j=0;j&lt;*x;j++)
      &#123;
        fscanf(fp,&quot;%6d&quot;,&amp;stu[i].score[j]);
      &#125;
    &#125;
    for(j=0;j&lt;*x;j++)
    &#123;
        fscanf(fp,&quot;%d\t%f&quot;,&amp;subtotal[j],&amp;subaverage[j]);
    &#125;
    fclose(fp);
&#125;

int main()
&#123;
    int m,n,x;
    int subtotal[X];
    float subaverage[X];
    STUDENT stu[N];
    do&#123;
        printf(&quot;Input the total number of students:&quot;);
        scanf(&quot;%d&quot;,&amp;n);
        printf(&quot;Input the total number of subjects:&quot;);
        scanf(&quot;%d&quot;,&amp;x);
    &#125;while(n&lt;=0||n&gt;30||x&lt;1||x&gt;6);/*检测学生总人数及学科总数是否符合要求*/
 KG:printf(&quot;\n\n1.Input record\n2.Calculate total and average score of every course\n3.Calculate total and average score of every student\n&quot;);
      printf(&quot;4.Sort in descending order by total score of every student\n5.Sort in ascending order by total score of every student\n&quot;);
      printf(&quot;6.Sort in ascending order by number\n7.Sort in dictionary order by name\n8.Search by number\n&quot;);
      printf(&quot;9.Search by name\n10.Statistic analysis for every course\n11.List record\n&quot;);
      printf(&quot;12.Write to a file\n13.Read from a file\n0.Exit\n\nPlease enter your choice:&quot;);
      scanf(&quot;%d&quot;,&amp;m);/*打印出菜单栏以供用户选择操作*/
    switch(m)/*利用switch语句实现菜单中的各个功能*/
    &#123;
      case 1: Input(stu,n,x);
               break;
      case 2: SubCalculate(stu,subtotal,subaverage,n,x);
               break;
      case 3:StuCalculate(stu,n,x);
               break;
      case 4: SortStuScoreUpdown(stu,n);
               Print1(stu,n,x);
              break;
      case 5: SortStuScoreDownup(stu,n);
              Print1(stu,n,x);
             break;
      case 6: SortNumberDownup(stu,n);
              Print1(stu,n,x);
            break;
      case 7: SortName(stu,n);
              Print1(stu,n,x);
            break;
      case 8: SearchNumber(stu,n,x);
            break;
      case 9: SearchName(stu,n,x);
            break;
      case 10: Analysis(stu,n,x);
            break;
      case 11: List(stu,subtotal,subaverage,n,x);
            break;
      case 12:WritetoFile(stu,subtotal,subaverage,n,x);
            break;
      case 13:ReadfromFile(stu,subtotal,subaverage,&amp;n,&amp;x);
                Print1(stu,n,x);
                Print2(subtotal,subaverage,x);
            break;
      case 0: exit(0);
    &#125;
   if(m!=0||m&lt;0||m&gt;13) goto KG;/*检测用户选择是否出错，并利用goto语句实现跳转*/
   return 0;
&#125;
</code></pre>
<p>以上就是该实验的全部代码。（<del>毫无保留，直接裸奔！！！</del> ）</p>
<p><img data-src="/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2.jpg"></p>
<p>实验数据我就不给了吧。</p>
<p><strong>本人王者荣耀迷和KPL迷，实验数据全是英雄名和选手名（说实话，选手们的ID确实好听），估计助教在看实验的时候都笑出猪叫了。（<del>助教笑出猪叫？？？</del> 啪，又来套娃！）</strong></p>
<p>有相同兴趣的小伙伴们可以找我一起观赛掉分。<del>本人厨艺精湛，饭多管饱！！！</del> </p>
<p><img data-src="/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/3.jpg"></p>
<p><strong>敲黑板！！！</strong></p>
<p><strong>如果大佬们不幸看了我的代码，欢迎指导！！！（毕竟这时大一刚学的时候写的，估计bug一堆，很多代码也不是最优的）<br>如果萌新们不幸看了我的代码，欢迎交流！！！（如果你也备受这个实验困扰，希望这篇文章能够帮助到你）</strong></p>
<p><strong>最后，有被学生成绩管理系统和图书馆管理系统折磨过的同仁，举个爪子示意一下，让我知道我并不孤单！</strong></p>
<p><img data-src="/C-CPP/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>C-CPP</category>
        <category>学生成绩管理系统</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>荣耀笔试题</title>
    <url>/WrittenExamination/Honor_20220412/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔试一共三道编程题，分数依次为100、200、300，需要按顺序依次完成，只有做完这一道题，才能进入下一道题，无法跳题，使用的是牛客网，允许跳出界面使用自己的IDE。</p>
<h2 id="题目一：字符串分割"><a href="#题目一：字符串分割" class="headerlink" title="题目一：字符串分割"></a>题目一：字符串分割</h2><p>给定一系列的字符串，字符串的个数为N，每个字符串的长度不超过100。长度小于8的字符串用零补足，长度大于等于8的字符串，按8位位一组的形式不断分割，最后剩余部分用零补足。</p>
<p>输入：</p>
<p>第一行包括一个整数N和N个原始字符串。</p>
<p>输出：</p>
<p>第一行包括分割后的字符串按字典序从小到大排列。</p>
<p>输入示例：</p>
<p>2 abc 123456789</p>
<p>输出示例：</p>
<p>12345678 90000000 abc00000</p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>这一题比较简单，只需要按照题目的描述做即可。</p>
<pre><code class="python">inp = input().split()
n = int(inp[0])
ls = []
for i in range(1, n+1):
    string = inp[i]
    while len(string) &gt; 8:
        ls.append(string[:8])
        string = string[8:]
    ls.append(string + &quot;0&quot;*(8-len(string)))
ls.sort()
print(&quot; &quot;.join(ls))
</code></pre>
<h2 id="题目二：蜜蜂采蜜"><a href="#题目二：蜜蜂采蜜" class="headerlink" title="题目二：蜜蜂采蜜"></a>题目二：蜜蜂采蜜</h2><p>平原上，一群蜜蜂离开蜂巢采蜜，要连续采集5片花丛后归巢。<br>已知5片花丛相对蜂巢的坐标，请你帮它们规划一下到访花丛的顺序，以使飞行总距离最短。</p>
<p>输入：</p>
<p>以蜂巢为平面坐标原点的5片花丛A、B、C、D、E的坐标，坐标值为整数。</p>
<p>输出：</p>
<p>从出发到返回蜂巢最短路径的长度取整值，取整办法为舍弃小数点后面的值。</p>
<p>输入示例：</p>
<p>200 0 200 10 200 50 200 30 200 25</p>
<p>输出示例：</p>
<p>456</p>
<p>说明：</p>
<p>样例中的10个数，相邻两个分别为一组，表示一个花丛相对蜂巢的坐标：A(x1, y1)、B(x2, y2)、C(x3, y3)、D(x4, y4)、E(x5, y5)，分表代表x1,y1,x2,y2,x3,y3,x4,y4,x5,y5。</p>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>本题实际上是一道旅行商问题（TSP），经典的TSP可以描述为：一个商品推销员要去若干个城市推销商品，该推销员从一个城市出发，需要经过所有城市后，回到出发地。应如何选择行进路线，以使总的行程最短。从图论的角度来看，该问题实质是在一个带权完全无向图中，找一个权值最小的Hamilton回路。由于该问题的可行解是所有顶点的全排列，随着顶点数的增加，会产生组合爆炸，它是一个NP完全问题。</p>
<p>常见的解法有暴力破解、深度优先遍历，动态规划等。</p>
<p>高级的解法有模拟退火算法，遗传算法，粒子群算法、神经网络等</p>
<h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p>暴力破解，求出五片花丛所有可能的到访顺序（全排列），取飞行总距离最短的路径即可。</p>
<pre><code class="python">from math import sqrt, floor
from xmlrpc.client import MAXINT
inp = list(map(int, input().split()))
mincost = MAXINT
ls = [(inp[i*2], inp[i*2+1]) for i in range(5)]
matrix = [[0 for i in range(5)] for j in range(5)]
for i in range(5):
    for j in range(5):
        matrix[i][j] = sqrt((ls[i][0]-ls[j][0])**2 + (ls[i][1]-ls[j][1])**2)

def Perm(nums, begin, end):
    global mincost, ls, matrix, path
    if begin &gt;= end:
        cost = 0
        for i in range(4):
            cost += matrix[nums[i]][nums[i+1]]
        cost = cost + sqrt((ls[nums[0]][0]**2) + (ls[nums[0]][1]**2)) + sqrt((ls[nums[-1]][0]**2) + (ls[nums[-1]][1]**2))
        if cost &lt; mincost:
            path = nums
            mincost = cost
        return
    else:
        for num in range(begin, end):
            nums[begin], nums[num] = nums[num], nums[begin]
            Perm(nums, begin+1, end)
            nums[begin], nums[num] = nums[num], nums[begin]

nums = [i for i in range(5)]
Perm(nums, 0, len(nums))
print(floor(mincost))
</code></pre>
<h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>采用深度优先遍历来寻找最短路径，并在遍历过程中通过不断剪枝来简化求解过程，广义上来讲也是全排列的一种。</p>
<pre><code class="python">from math import sqrt, floor
from xmlrpc.client import MAXINT

def DFS(u, cnt, cost):
    global mincost, matrix, visited
    if cost &gt; mincost:
        return
    if cnt == 6:
        cost = cost + sqrt((ls[u][0]**2) + (ls[u][1]**2)) + sqrt((ls[0][0]**2) + (ls[0][1]**2))
        if cost &lt; mincost:
            mincost = cost
    visited[u] = 1
    for v in range(6):
        if not visited[v]:
            DFS(v, cnt+1, cost + matrix[u][v])
    visited[u] = 0

inp = list(map(int, input().split()))
mincost = MAXINT
visited = [0 for i in range(6)]
ls = [(inp[i*2], inp[i*2+1]) for i in range(5)]
ls.insert(0, (0, 0))
matrix = [[0 for i in range(6)] for j in range(6)]
for i in range(6):
    for j in range(6):
        matrix[i][j] = sqrt((ls[i][0]-ls[j][0])**2 + (ls[i][1]-ls[j][1])**2)

DFS(0, 1, 0)
print(floor(mincost))
</code></pre>
<h2 id="惨痛经历"><a href="#惨痛经历" class="headerlink" title="惨痛经历"></a>惨痛经历</h2><p>因为邮件上写着系统开放时间为18:00-21:00（不同于美团写着笔试时间为16:00-18:00），所以我习惯性得以为笔试时间为三个小时，当我悠哉游哉地把第二题做完返回系统时，笔试已经结束了，因此只提交了第一题，直接人麻了。。。所以，各位小伙伴无论是在比赛还是在测试，一定先看好时间！！！当然，对于秒AK的大佬来说，时间根本不是事，那就当我没说。</p>
<p><img data-src="/WrittenExamination/Honor_20220412/Honor_20220412/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>WrittenExamination</category>
        <category>Honor_20220412</category>
      </categories>
      <tags>
        <tag>牛客网</tag>
        <tag>荣耀</tag>
        <tag>笔试题</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的世界</title>
    <url>/Hello-MyWorld/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
      <categories>
        <category>Hello-MyWorld</category>
        <category>欢迎来到我的世界</category>
      </categories>
  </entry>
  <entry>
    <title>美团笔试题</title>
    <url>/WrittenExamination/MeiTuan_20220409/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔试一共五道编程题（四+一），一为专项编程题，估计不同岗位有题目不一样，使用的是赛码网，允许跳出界面使用自己的IDE。</p>
<p>在此感谢<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlYm9ydHQ/dHlwZT1ibG9n">筱羊冰冰</span>提供的部分题目及题解。</p>
<h2 id="题目一：数圈游戏"><a href="#题目一：数圈游戏" class="headerlink" title="题目一：数圈游戏"></a>题目一：数圈游戏</h2><p>给定一个整数n，计算该整数含有的圆圈个数。数字0-9对应的圈数如下：<br>0: 1<br>1: 0<br>2: 0<br>3: 0<br>4: 0<br>5: 0<br>6: 1<br>7: 0<br>8: 2<br>9: 1</p>
<p>输入：<br>第一行为一个整数n，表示数圈游戏的数字。</p>
<p>输入示例：<br>60498<br>输出示例：<br>5</p>
<p>限制：<br>80%的测试用例：n&lt;&#x3D;10000<br>100%的测试用例：n&lt;&#x3D;100000000</p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>该题较为简单，一次遍历累加即可。</p>
<h2 id="题目二：士兵排队"><a href="#题目二：士兵排队" class="headerlink" title="题目二：士兵排队"></a>题目二：士兵排队</h2><p>给定一定数量的士兵，将士兵按照身高从小到大排列，身高相同者按照姓名的字典序从小到大排列。</p>
<p>输入：<br>第一行为一个整数n，表示士兵的数量。<br>第二行为n个士兵的身高，单位为cm。<br>第三行为n个士兵的姓名。</p>
<p>输入示例：<br>4<br>176 170 176 176<br>bamma tom alpha beta</p>
<p>输出示例：<br>tom alpha bamma beta</p>
<p>限制：<br>士兵身高 hi &lt;&#x3D; 300<br>士兵姓名长度 ni &lt;&#x3D; 20</p>
<h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p>将每一个人的身高和名字按照 (身高，名字) 的格式存储，然后进行两次排序，先按照身高排序，再按照名字排序即可。（利用了python排序算法的稳定性！）</p>
<pre><code class="python">n = int(input())
heights = list(map(str, input().split()))
names = list(map(str, input().split()))
ls = []
for i in range(n):
    ls.append((heights[i], names[i]))
# lambda函数指定排序规则
ls.sort(key=lambda x:x[1])
ls.sort(key=lambda x:x[0])
for i in range(n):
    print(ls[i][1], end=&#39; &#39;)
</code></pre>
<h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>因为身高的限制为 hi &lt;&#x3D; 300，所以身高最高只能为三位数，那么我们可以把所有身高都通过补前置零的方式化为三位数，然后再与名字拼接成一个字符串，这样只需要一次排序就能够得出结果。</p>
<pre><code class="python">n = int(input())
heights = list(map(str, input().split()))
names = list(map(str, input().split()))
for i in range(n):
    # str.zfill()自动填充
    heights[i] = heights[i].zfill(3) + names[i]
heights.sort()
for i in range(n):
    print(heights[i][3:], end=&#39; &#39;)
</code></pre>
<h2 id="题目三：路径搜索"><a href="#题目三：路径搜索" class="headerlink" title="题目三：路径搜索"></a>题目三：路径搜索</h2><p>给定一个地图，询问是否存在一条从起点到终点的直接通路。注意，通路是双向的。</p>
<p>输入：<br>第一行包括两个整数n和m，分别表示地图上点的数量和通路的数量。<br>第二行包括m个整数，表示地图上通路的一端。<br>第三行包括m个整数，表示地图上通路的另一端。<br>第四行包括k个整数，表示询问的次数。<br>接下来的k行每行包括两个整数，分别表示起点和终点。</p>
<p>输入示例：<br>4 5<br>1 2 1 3 1<br>2 3 3 4 4<br>4<br>1 3<br>2 4<br>2 1<br>3 2</p>
<p>输出示例：<br>Yes<br>No<br>Yes<br>Yes</p>
<h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>筱羊冰冰：上来就看错了，然后花了好久写了类似并查集的东西，然后用不上……<br>（果然大佬就是不一样，上来直接手撕并查集）<br>这道题只需要检查有无指定通路就行了，不过要特别注意查询范围，因为通路是双向的而且要求的是直接通路。</p>
<pre><code class="python">n, m = map(int, input().split())
lsu = list(map(int, input().split()))
lsv = list(map(int, input().split()))
k = int(input())
ways = set((lsu[i], lsv[i]) for i in range(m))
out = []
for _ in range(k):
    u, v = map(int, input().split())
    if (u, v) in ways or (v, u) in ways:
        out.append(&#39;Yes&#39;)
    else:
        out.append(&#39;No&#39;)
print(&#39;\n&#39;.join(out))
</code></pre>
<h2 id="井字棋"><a href="#井字棋" class="headerlink" title="井字棋"></a>井字棋</h2><p>给定一个2x2的棋盘和n中不同的颜色，要求每行每列均不能出现相同的颜色，计算总共有多少种填充方案。</p>
<p>输入：<br>第一行包括一个整数n，表示颜色的数量。</p>
<p>输出：<br>输出一个整数，表示有多少种填充方案。</p>
<p>输入示例：<br>2</p>
<p>输出示例：<br>2</p>
<p>限制：<br>颜色的种类n &lt;&#x3D; 10</p>
<h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>筱羊冰冰：有一说一，感觉就属这个题有意思吧。我当时看完，感觉就有一点像排列组合(业余玩家，不太清楚具体的类型)。<br>n种颜色，如果颜色足够(指大于四种)，我们其实也只能取出四种来操作，所以只需要一个<br>$$<br>C_n^4<br>$$<br>所以我们其实只需要考虑四种以内的情况。</p>
<p>两种颜色：</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>和</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>1</td>
<td></td>
<td>1</td>
<td>2</td>
</tr>
</tbody></table>
<p>三种颜色：<br>我们自然可以想到，拿两种颜色就可以填上面的两种<br>$$<br>C_3^2 * 2<br>$$<br>然后，如果是三种颜色都要，有12种，肯定是有一个重复的，那么对角线重复就有两种情况，剩下的其实就是将三个数字填入三个位置，<br>$$<br>A_3^3<br>$$<br>就是6 + 6*2 &#x3D; 18。</p>
<p>到这里其实就应该明白了，我们只需要知道 i 种颜色有多少种即可，因为 i &#x3D; 2, 3, 4，我们完全可以直接写出来，剩下的就是一个组合问题，再给出一个阶乘列表。</p>
<pre><code class="python"># ls[i]为i种颜色都使用，对应的可能数
# 四种颜色忘了说了，不过就是个A44
ls = [0, 0, 2, 12, 24]
# ls_jc[i] = i!
ls_jc = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
ret = 0
n = int(input())
if n &lt;= 1:
    # 他在系统公告中，提示了0的问题
    ret = 0
elif n &lt;= 4:
    for i in range(2, n+1):
        ret += ls[i] * ls_jc[n] // (ls_jc[i] * ls_jc[n-i])
        # 还有一个限制就是输出大小，这里原题目是有的
        ret %= 1000000007
else:
    for i in range(2, 5):
        ret += ls[i] * ls_jc[n] // (ls_jc[i] * ls_jc[n-i])
        ret %= 1000000007
print(ret)
</code></pre>
<h3 id="小插曲："><a href="#小插曲：" class="headerlink" title="小插曲："></a>小插曲：</h3><p>当时有一块写错了，然后跑出来只有27%，自己就去看了一下范围是小于等于十，那么案例至少有10个吧。<br>然后自己因为有边界检测，负数、0、1、2都能正确，那么至少对三个，反推出案例应该是11个，那么就是3往上有问题，所以将矛头对准了ls[3]，果然是算少了，改成12，啪的一下，很快就过了……</p>
<h2 id="题目五：堆积木"><a href="#题目五：堆积木" class="headerlink" title="题目五：堆积木"></a>题目五：堆积木</h2><p>给定一个已有的字符串和一个目标字符串，可以从右边删除一个字符，也可以往左边插入一个字符，删除和插入操作的次数没有限制，问最少操作多少次可以使已有字符串变成目标字符串。</p>
<table>
<thead>
<tr>
<th>输入</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>原串长度</td>
</tr>
<tr>
<td>1 5 3 4 6</td>
<td>原串</td>
</tr>
<tr>
<td>5</td>
<td>目标串长度</td>
</tr>
<tr>
<td>2 1 5 3 4</td>
<td>目标串</td>
</tr>
</tbody></table>
<h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>筱羊冰冰：这个题，其实看明白了就没那么难，其实就是找最长公共子序列。</p>
<pre><code class="python">from collections import deque
l_old = int(input())
old = input().split()
l_new = int(input())
new = input().split()
length = 0
# 这里没啥原因，就是deque的头插尾插都比较快，O(1)的
s1, s2 = deque(), deque()
judge = 0
while True:
    s1.append(old[length])
    s2.appendleft(new[-length-1])
    length += 1
    if s1 == s2:
        judge = 1
        break
    elif length == min(l_old, l_new):
        break
if judge:
    print(l_old+l_new - length*2)
else:
    print(l_old+l_new)
</code></pre>
<h3 id="重大失误"><a href="#重大失误" class="headerlink" title="重大失误"></a>重大失误</h3><p>上面的代码其实没考虑，如果有多对子串相同，要找出最长的……<br>不过感觉测试案例比较拉，所以显示还是ac了的。</p>
<p><img data-src="/WrittenExamination/MeiTuan_20220409/MeiTuan_20220409/Wolf.jpg" alt="Wolf"></p>
]]></content>
      <categories>
        <category>WrittenExamination</category>
        <category>MeiTuan_20220409</category>
      </categories>
      <tags>
        <tag>笔试题</tag>
        <tag>赛码网</tag>
        <tag>美团</tag>
      </tags>
  </entry>
</search>
